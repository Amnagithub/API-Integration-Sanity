"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehavior: () => (/* binding */ coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   isCustomBehaviorEvent: () => (/* binding */ isCustomBehaviorEvent),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n\n\n\nconst IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\nconst arrowDownOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowDown = isHotkey(\"ArrowDown\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return isArrowDown && focusBlockObject && !nextBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, arrowUpOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowUp = isHotkey(\"ArrowUp\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return isArrowUp && focusBlockObject && !previousBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"before\"\n  }, {\n    type: \"select.previous block\"\n  }]]\n}, breakingBlockObject = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    });\n    return (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }) && focusBlockObject !== void 0;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, deletingEmptyTextBlockAfterBlockObject = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n  on: \"delete.forward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+b\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"strong\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  },\n  emShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+i\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"em\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  },\n  underlineShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+u\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"underline\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  },\n  codeShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+'\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"code\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  }\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  }]]\n}, unindentListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [{\n    type: \"text block.set\",\n    level,\n    at: focusTextBlock.path\n  }]]\n}, clearListOnEnter = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusListBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusListBlock)({\n      context\n    });\n    return !selectionCollapsed || !focusListBlock || !(0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  }]]\n}, indentListOnTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1)),\n    at: selectedListBlock.path\n  }))]\n}, unindentListOnShiftTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Shift+Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1)),\n    at: selectedListBlock.path\n  }))]\n}, coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab\n}, softReturn = {\n  on: \"insert.soft break\",\n  actions: [() => [{\n    type: \"insert.text\",\n    text: `\n`\n  }]]\n}, coreBehaviors = [softReturn, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab], coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors\n};\n\n//# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText)\n/* harmony export */ });\n/* harmony import */ var _util_get_block_start_point_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-block-start-point.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-block-start-point.js\");\n/* harmony import */ var _util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-keyed-segment.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\n\nconst getSelectionText = ({\n  context\n}) => {\n  let text = \"\";\n  const {\n    value,\n    selection\n  } = context;\n  if (!value || !selection)\n    return text;\n  const forwardSelection = selection.backward ? (0,_util_get_block_start_point_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(selection) : selection;\n  if (!forwardSelection)\n    return text;\n  for (const block of value)\n    if (!((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[0]) && block._key !== forwardSelection.anchor.path[0]._key) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextSpan)(child)) {\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key && (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset, forwardSelection.focus.offset);\n            break;\n          }\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset);\n            continue;\n          }\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(0, forwardSelection.focus.offset);\n            break;\n          }\n          text.length > 0 && (text = text + child.text);\n        }\n      if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[0]) && block._key === forwardSelection.focus.path[0]._key)\n        break;\n    }\n  return text;\n}, getBlockTextBefore = ({\n  context\n}) => {\n  if (!context.selection)\n    return \"\";\n  const point = (context.selection.backward ? (0,_util_get_block_start_point_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(context.selection) : context.selection).anchor, key = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(point.path[0]) ? point.path[0]._key : void 0, block = key ? context.value.find((block2) => block2._key === key) : void 0;\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_get_block_start_point_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    node: block,\n    path: [{\n      _key: block._key\n    }]\n  });\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVGO0FBQzNCO0FBQ2dCO0FBQzVFO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdEQUFnRCxnRkFBZ0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5RUFBYyw2RkFBNkYsc0VBQXVCO0FBQzVJO0FBQ0EsWUFBWSxpRUFBa0I7QUFDOUIsY0FBYyx5RUFBYyw0RkFBNEYseUVBQWM7QUFDdEk7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5RUFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlFQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlFQUFjO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsOENBQThDLGdGQUFnQix1REFBdUQseUVBQWM7QUFDbkk7QUFDQTtBQUNBLHVCQUF1QixrRkFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBpLWludGVyZ3JhdGUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzPzk2NWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmV2ZXJzZVNlbGVjdGlvbiwgZ2V0QmxvY2tTdGFydFBvaW50IH0gZnJvbSBcIi4vdXRpbC5nZXQtYmxvY2stc3RhcnQtcG9pbnQuanNcIjtcbmltcG9ydCB7IGlzS2V5ZWRTZWdtZW50IH0gZnJvbSBcIi4vdXRpbC5pcy1rZXllZC1zZWdtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1BvcnRhYmxlVGV4dFRleHRCbG9jaywgaXNQb3J0YWJsZVRleHRTcGFuIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmNvbnN0IGdldFNlbGVjdGlvblRleHQgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGxldCB0ZXh0ID0gXCJcIjtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIHNlbGVjdGlvblxuICB9ID0gY29udGV4dDtcbiAgaWYgKCF2YWx1ZSB8fCAhc2VsZWN0aW9uKVxuICAgIHJldHVybiB0ZXh0O1xuICBjb25zdCBmb3J3YXJkU2VsZWN0aW9uID0gc2VsZWN0aW9uLmJhY2t3YXJkID8gcmV2ZXJzZVNlbGVjdGlvbihzZWxlY3Rpb24pIDogc2VsZWN0aW9uO1xuICBpZiAoIWZvcndhcmRTZWxlY3Rpb24pXG4gICAgcmV0dXJuIHRleHQ7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgdmFsdWUpXG4gICAgaWYgKCEoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFswXSkgJiYgYmxvY2suX2tleSAhPT0gZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFswXS5fa2V5KSAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhibG9jaykpIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pXG4gICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgaWYgKGlzS2V5ZWRTZWdtZW50KGZvcndhcmRTZWxlY3Rpb24uYW5jaG9yLnBhdGhbMl0pICYmIGNoaWxkLl9rZXkgPT09IGZvcndhcmRTZWxlY3Rpb24uYW5jaG9yLnBhdGhbMl0uX2tleSAmJiBpc0tleWVkU2VnbWVudChmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0pICYmIGNoaWxkLl9rZXkgPT09IGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFsyXS5fa2V5KSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dCArIGNoaWxkLnRleHQuc2xpY2UoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0LCBmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLm9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzS2V5ZWRTZWdtZW50KGZvcndhcmRTZWxlY3Rpb24uYW5jaG9yLnBhdGhbMl0pICYmIGNoaWxkLl9rZXkgPT09IGZvcndhcmRTZWxlY3Rpb24uYW5jaG9yLnBhdGhbMl0uX2tleSkge1xuICAgICAgICAgICAgdGV4dCA9IHRleHQgKyBjaGlsZC50ZXh0LnNsaWNlKGZvcndhcmRTZWxlY3Rpb24uYW5jaG9yLm9mZnNldCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzS2V5ZWRTZWdtZW50KGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdLl9rZXkpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgY2hpbGQudGV4dC5zbGljZSgwLCBmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLm9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dC5sZW5ndGggPiAwICYmICh0ZXh0ID0gdGV4dCArIGNoaWxkLnRleHQpO1xuICAgICAgICB9XG4gICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdKSAmJiBibG9jay5fa2V5ID09PSBmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0uX2tleSlcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICByZXR1cm4gdGV4dDtcbn0sIGdldEJsb2NrVGV4dEJlZm9yZSA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3QgcG9pbnQgPSAoY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyByZXZlcnNlU2VsZWN0aW9uKGNvbnRleHQuc2VsZWN0aW9uKSA6IGNvbnRleHQuc2VsZWN0aW9uKS5hbmNob3IsIGtleSA9IGlzS2V5ZWRTZWdtZW50KHBvaW50LnBhdGhbMF0pID8gcG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBibG9jayA9IGtleSA/IGNvbnRleHQudmFsdWUuZmluZCgoYmxvY2syKSA9PiBibG9jazIuX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3Qgc3RhcnRPZkJsb2NrID0gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICBub2RlOiBibG9jayxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH1dXG4gIH0pO1xuICByZXR1cm4gZ2V0U2VsZWN0aW9uVGV4dCh7XG4gICAgY29udGV4dDoge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIHZhbHVlOiBjb250ZXh0LnZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIGFuY2hvcjogc3RhcnRPZkJsb2NrLFxuICAgICAgICBmb2N1czogcG9pbnRcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCB7XG4gIGdldEJsb2NrVGV4dEJlZm9yZSxcbiAgZ2V0U2VsZWN0aW9uVGV4dFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmdldC10ZXh0LWJlZm9yZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction createGuards({\n  schema\n}) {\n  function isListBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n  }\n  function isTextBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n  }\n  return {\n    isListBlock,\n    isTextBlock\n  };\n}\nconst getFocusBlock = ({\n  context\n}) => {\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusListBlock = ({\n  context\n}) => {\n  const guards = createGuards(context), focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && guards.isListBlock(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusTextBlock = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusBlockObject = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = ({\n  context\n}) => {\n  const focusBlock = getFocusTextBlock({\n    context\n  });\n  if (!focusBlock)\n    return;\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = ({\n  context\n}) => {\n  const focusChild = getFocusChild({\n    context\n  });\n  return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFirstBlock = ({\n  context\n}) => {\n  const node = context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = ({\n  context\n}) => {\n  const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getSelectedBlocks = ({\n  context\n}) => {\n  if (!context.selection)\n    return [];\n  const selectedBlocks = [], startKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionStartBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getSelectionEndBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getPreviousBlock = ({\n  context\n}) => {\n  let previousBlock;\n  const selectionStartBlock = getSelectionStartBlock({\n    context\n  });\n  if (!selectionStartBlock)\n    return;\n  let foundSelectionStartBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = !0;\n      break;\n    }\n    previousBlock = {\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    };\n  }\n  if (foundSelectionStartBlock && previousBlock)\n    return previousBlock;\n}, getNextBlock = ({\n  context\n}) => {\n  let nextBlock;\n  const selectionEndBlock = getSelectionEndBlock({\n    context\n  });\n  if (!selectionEndBlock)\n    return;\n  let foundSelectionEndBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = !0;\n      continue;\n    }\n    if (foundSelectionEndBlock) {\n      nextBlock = {\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      };\n      break;\n    }\n  }\n  if (foundSelectionEndBlock && nextBlock)\n    return nextBlock;\n}, isSelectionCollapsed = ({\n  context\n}) => JSON.stringify(context.selection?.anchor.path) === JSON.stringify(context.selection?.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset;\n\n//# sourceMappingURL=selector.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1IO0FBQ25IO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxXQUFXLHNFQUF1QjtBQUNsQztBQUNBO0FBQ0EsV0FBVyxzRUFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUMsMkRBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEdBQUc7QUFDSCx1QkFBdUIsc0VBQXVCO0FBQzlDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0JBQXdCLHNFQUF1QjtBQUMvQztBQUNBO0FBQ0EsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQ0FBbUMsMkRBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNILHVCQUF1QixpRUFBa0I7QUFDekM7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EscUVBQXFFLDJEQUFZLG9GQUFvRiwyREFBWSwySEFBMkgsMkRBQVksc0ZBQXNGLDJEQUFZO0FBQzFaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsMkNBQTJDLDJEQUFZLG9GQUFvRiwyREFBWTtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSwyQ0FBMkMsMkRBQVksc0ZBQXNGLDJEQUFZO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQWlCQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBpLWludGVyZ3JhdGUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcz9jNWQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrLCBpc1BvcnRhYmxlVGV4dFRleHRCbG9jaywgaXNLZXlTZWdtZW50LCBpc1BvcnRhYmxlVGV4dFNwYW4gfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuZnVuY3Rpb24gY3JlYXRlR3VhcmRzKHtcbiAgc2NoZW1hXG59KSB7XG4gIGZ1bmN0aW9uIGlzTGlzdEJsb2NrKGJsb2NrKSB7XG4gICAgcmV0dXJuIGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrKGJsb2NrKSAmJiBibG9jay5fdHlwZSA9PT0gc2NoZW1hLmJsb2NrLm5hbWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNUZXh0QmxvY2soYmxvY2spIHtcbiAgICByZXR1cm4gaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLl90eXBlID09PSBzY2hlbWEuYmxvY2submFtZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzTGlzdEJsb2NrLFxuICAgIGlzVGV4dEJsb2NrXG4gIH07XG59XG5jb25zdCBnZXRGb2N1c0Jsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBrZXkgPSBjb250ZXh0LnNlbGVjdGlvbiAmJiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIG5vZGUgPSBrZXkgPyBjb250ZXh0LnZhbHVlLmZpbmQoKGJsb2NrKSA9PiBibG9jay5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSAmJiBrZXkgPyB7XG4gICAgbm9kZSxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleToga2V5XG4gICAgfV1cbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzTGlzdEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIGZvY3VzQmxvY2sgPSBnZXRGb2N1c0Jsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICByZXR1cm4gZm9jdXNCbG9jayAmJiBndWFyZHMuaXNMaXN0QmxvY2soZm9jdXNCbG9jay5ub2RlKSA/IHtcbiAgICBub2RlOiBmb2N1c0Jsb2NrLm5vZGUsXG4gICAgcGF0aDogZm9jdXNCbG9jay5wYXRoXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c1RleHRCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGZvY3VzQmxvY2subm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNCbG9jay5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQmxvY2sucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNCbG9ja09iamVjdCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmICFpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhmb2N1c0Jsb2NrLm5vZGUpID8ge1xuICAgIG5vZGU6IGZvY3VzQmxvY2subm9kZSxcbiAgICBwYXRoOiBmb2N1c0Jsb2NrLnBhdGhcbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzQ2hpbGQgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IGZvY3VzQmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgaWYgKCFmb2N1c0Jsb2NrKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24gJiYgaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFsyXS5fa2V5IDogdm9pZCAwLCBub2RlID0ga2V5ID8gZm9jdXNCbG9jay5ub2RlLmNoaWxkcmVuLmZpbmQoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogWy4uLmZvY3VzQmxvY2sucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNTcGFuID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBmb2N1c0NoaWxkID0gZ2V0Rm9jdXNDaGlsZCh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgcmV0dXJuIGZvY3VzQ2hpbGQgJiYgaXNQb3J0YWJsZVRleHRTcGFuKGZvY3VzQ2hpbGQubm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNDaGlsZC5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQ2hpbGQucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rmlyc3RCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3Qgbm9kZSA9IGNvbnRleHQudmFsdWVbMF07XG4gIHJldHVybiBub2RlID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IG5vZGUuX2tleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRMYXN0QmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBjb250ZXh0LnZhbHVlW2NvbnRleHQudmFsdWUubGVuZ3RoIC0gMV0gPyBjb250ZXh0LnZhbHVlW2NvbnRleHQudmFsdWUubGVuZ3RoIC0gMV0gOiB2b2lkIDA7XG4gIHJldHVybiBub2RlID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IG5vZGUuX2tleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRTZWxlY3RlZEJsb2NrcyA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gW10sIHN0YXJ0S2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAgOiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgZW5kS2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCA6IGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0uX2tleSA6IHZvaWQgMDtcbiAgaWYgKCFzdGFydEtleSB8fCAhZW5kS2V5KVxuICAgIHJldHVybiBzZWxlY3RlZEJsb2NrcztcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHN0YXJ0S2V5KSB7XG4gICAgICBpZiAoc2VsZWN0ZWRCbG9ja3MucHVzaCh7XG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH0pLCBzdGFydEtleSA9PT0gZW5kS2V5KVxuICAgICAgICBicmVhaztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYmxvY2suX2tleSA9PT0gZW5kS2V5KSB7XG4gICAgICBzZWxlY3RlZEJsb2Nrcy5wdXNoKHtcbiAgICAgICAgbm9kZTogYmxvY2ssXG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMCAmJiBzZWxlY3RlZEJsb2Nrcy5wdXNoKHtcbiAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgcGF0aDogW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc2VsZWN0ZWRCbG9ja3M7XG59LCBnZXRTZWxlY3Rpb25TdGFydEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAgOiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgbm9kZSA9IGtleSA/IGNvbnRleHQudmFsdWUuZmluZCgoYmxvY2spID0+IGJsb2NrLl9rZXkgPT09IGtleSkgOiB2b2lkIDA7XG4gIHJldHVybiBub2RlICYmIGtleSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0U2VsZWN0aW9uRW5kQmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGlmICghY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBrZXkgPSBjb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5hbmNob3IucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5hbmNob3IucGF0aFswXS5fa2V5IDogdm9pZCAwIDogaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5IDogdm9pZCAwLCBub2RlID0ga2V5ID8gY29udGV4dC52YWx1ZS5maW5kKChibG9jaykgPT4gYmxvY2suX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRQcmV2aW91c0Jsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBsZXQgcHJldmlvdXNCbG9jaztcbiAgY29uc3Qgc2VsZWN0aW9uU3RhcnRCbG9jayA9IGdldFNlbGVjdGlvblN0YXJ0QmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIGlmICghc2VsZWN0aW9uU3RhcnRCbG9jaylcbiAgICByZXR1cm47XG4gIGxldCBmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2sgPSAhMTtcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHNlbGVjdGlvblN0YXJ0QmxvY2subm9kZS5fa2V5KSB7XG4gICAgICBmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2sgPSAhMDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2aW91c0Jsb2NrID0ge1xuICAgICAgbm9kZTogYmxvY2ssXG4gICAgICBwYXRoOiBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9XVxuICAgIH07XG4gIH1cbiAgaWYgKGZvdW5kU2VsZWN0aW9uU3RhcnRCbG9jayAmJiBwcmV2aW91c0Jsb2NrKVxuICAgIHJldHVybiBwcmV2aW91c0Jsb2NrO1xufSwgZ2V0TmV4dEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBsZXQgbmV4dEJsb2NrO1xuICBjb25zdCBzZWxlY3Rpb25FbmRCbG9jayA9IGdldFNlbGVjdGlvbkVuZEJsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICBpZiAoIXNlbGVjdGlvbkVuZEJsb2NrKVxuICAgIHJldHVybjtcbiAgbGV0IGZvdW5kU2VsZWN0aW9uRW5kQmxvY2sgPSAhMTtcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHNlbGVjdGlvbkVuZEJsb2NrLm5vZGUuX2tleSkge1xuICAgICAgZm91bmRTZWxlY3Rpb25FbmRCbG9jayA9ICEwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChmb3VuZFNlbGVjdGlvbkVuZEJsb2NrKSB7XG4gICAgICBuZXh0QmxvY2sgPSB7XG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGZvdW5kU2VsZWN0aW9uRW5kQmxvY2sgJiYgbmV4dEJsb2NrKVxuICAgIHJldHVybiBuZXh0QmxvY2s7XG59LCBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IEpTT04uc3RyaW5naWZ5KGNvbnRleHQuc2VsZWN0aW9uPy5hbmNob3IucGF0aCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5wYXRoKSAmJiBjb250ZXh0LnNlbGVjdGlvbj8uYW5jaG9yLm9mZnNldCA9PT0gY29udGV4dC5zZWxlY3Rpb24/LmZvY3VzLm9mZnNldDtcbmV4cG9ydCB7XG4gIGNyZWF0ZUd1YXJkcyxcbiAgZ2V0Rmlyc3RCbG9jayxcbiAgZ2V0Rm9jdXNCbG9jayxcbiAgZ2V0Rm9jdXNCbG9ja09iamVjdCxcbiAgZ2V0Rm9jdXNDaGlsZCxcbiAgZ2V0Rm9jdXNMaXN0QmxvY2ssXG4gIGdldEZvY3VzU3BhbixcbiAgZ2V0Rm9jdXNUZXh0QmxvY2ssXG4gIGdldExhc3RCbG9jayxcbiAgZ2V0TmV4dEJsb2NrLFxuICBnZXRQcmV2aW91c0Jsb2NrLFxuICBnZXRTZWxlY3RlZEJsb2NrcyxcbiAgZ2V0U2VsZWN0aW9uRW5kQmxvY2ssXG4gIGdldFNlbGVjdGlvblN0YXJ0QmxvY2ssXG4gIGlzU2VsZWN0aW9uQ29sbGFwc2VkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-block-start-point.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.get-block-start-point.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   reverseSelection: () => (/* binding */ reverseSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction reverseSelection(selection) {\n  return selection.backward ? {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !1\n  } : {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !0\n  };\n}\nfunction getBlockStartPoint({\n  node,\n  path\n}) {\n  return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node) ? {\n    path: [...path, \"children\", {\n      _key: node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path,\n    offset: 0\n  };\n}\n\n//# sourceMappingURL=util.get-block-start-point.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5nZXQtYmxvY2stc3RhcnQtcG9pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxTQUFTLHNFQUF1QjtBQUNoQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwaS1pbnRlcmdyYXRlLy4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuZ2V0LWJsb2NrLXN0YXJ0LXBvaW50LmpzPzY0NmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2sgfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuZnVuY3Rpb24gcmV2ZXJzZVNlbGVjdGlvbihzZWxlY3Rpb24pIHtcbiAgcmV0dXJuIHNlbGVjdGlvbi5iYWNrd2FyZCA/IHtcbiAgICBhbmNob3I6IHNlbGVjdGlvbi5mb2N1cyxcbiAgICBmb2N1czogc2VsZWN0aW9uLmFuY2hvcixcbiAgICBiYWNrd2FyZDogITFcbiAgfSA6IHtcbiAgICBhbmNob3I6IHNlbGVjdGlvbi5mb2N1cyxcbiAgICBmb2N1czogc2VsZWN0aW9uLmFuY2hvcixcbiAgICBiYWNrd2FyZDogITBcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJsb2NrU3RhcnRQb2ludCh7XG4gIG5vZGUsXG4gIHBhdGhcbn0pIHtcbiAgcmV0dXJuIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKG5vZGUpID8ge1xuICAgIHBhdGg6IFsuLi5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IG5vZGUuY2hpbGRyZW5bMF0uX2tleVxuICAgIH1dLFxuICAgIG9mZnNldDogMFxuICB9IDoge1xuICAgIHBhdGgsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5leHBvcnQge1xuICBnZXRCbG9ja1N0YXJ0UG9pbnQsXG4gIHJldmVyc2VTZWxlY3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmdldC1ibG9jay1zdGFydC1wb2ludC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-block-start-point.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-keyed-segment.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\");\n\n\nfunction blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          if (offsetLeft === 0) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: 0\n            };\n            break;\n          }\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n        }\n    }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, spanKey = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;\n  if (!(!blockKey || !spanKey)) {\n    for (const block of value)\n      if (block._key === blockKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isEmptyTextBlock(block) {\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n    return !1;\n  const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n  return onlyText && blockText === \"\";\n}\n\n//# sourceMappingURL=util.is-empty-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE0RTtBQUNoQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLG1EQUFtRCxzRUFBdUI7QUFDMUU7QUFDQSxZQUFZLGlFQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQix5RUFBYywyRUFBMkUseUVBQWM7QUFDMUg7QUFDQTtBQUNBLHFDQUFxQyxzRUFBdUI7QUFDNUQ7QUFDQSxjQUFjLGlFQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBdUI7QUFDOUI7QUFDQSx3Q0FBd0MsNkRBQWtCO0FBQzFEO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBpLWludGVyZ3JhdGUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzP2I0OGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0U3BhbiB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5pbXBvcnQgeyBpc0tleWVkU2VnbWVudCB9IGZyb20gXCIuL3V0aWwuaXMta2V5ZWQtc2VnbWVudC5qc1wiO1xuZnVuY3Rpb24gYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCh7XG4gIHZhbHVlLFxuICBibG9ja09mZnNldFxufSkge1xuICBsZXQgb2Zmc2V0TGVmdCA9IGJsb2NrT2Zmc2V0Lm9mZnNldCwgc2VsZWN0aW9uUG9pbnQ7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgdmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhibG9jaykpIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pXG4gICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgaWYgKG9mZnNldExlZnQgPT09IDApIHtcbiAgICAgICAgICAgIHNlbGVjdGlvblBvaW50ID0ge1xuICAgICAgICAgICAgICBwYXRoOiBbLi4uYmxvY2tPZmZzZXQucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvZmZzZXRMZWZ0IDw9IGNoaWxkLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Qb2ludCA9IHtcbiAgICAgICAgICAgICAgcGF0aDogWy4uLmJsb2NrT2Zmc2V0LnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0TGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvZmZzZXRMZWZ0IC09IGNoaWxkLnRleHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICByZXR1cm4gc2VsZWN0aW9uUG9pbnQ7XG59XG5mdW5jdGlvbiBzcGFuU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgdmFsdWUsXG4gIHNlbGVjdGlvblBvaW50XG59KSB7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBjb25zdCBibG9ja0tleSA9IGlzS2V5ZWRTZWdtZW50KHNlbGVjdGlvblBvaW50LnBhdGhbMF0pID8gc2VsZWN0aW9uUG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBzcGFuS2V5ID0gaXNLZXllZFNlZ21lbnQoc2VsZWN0aW9uUG9pbnQucGF0aFsyXSkgPyBzZWxlY3Rpb25Qb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghKCFibG9ja0tleSB8fCAhc3BhbktleSkpIHtcbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIHZhbHVlKVxuICAgICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrS2V5ICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKVxuICAgICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gc3BhbktleSlcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQudGV4dC5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKSB7XG4gIHJldHVybiBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZC50ZXh0ID8/IFwiXCIpLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBpc0VtcHR5VGV4dEJsb2NrKGJsb2NrKSB7XG4gIGlmICghaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgb25seVRleHQgPSBibG9jay5jaGlsZHJlbi5ldmVyeShpc1BvcnRhYmxlVGV4dFNwYW4pLCBibG9ja1RleHQgPSBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKTtcbiAgcmV0dXJuIG9ubHlUZXh0ICYmIGJsb2NrVGV4dCA9PT0gXCJcIjtcbn1cbmV4cG9ydCB7XG4gIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQsXG4gIGdldFRleHRCbG9ja1RleHQsXG4gIGlzRW1wdHlUZXh0QmxvY2ssXG4gIHNwYW5TZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment)\n/* harmony export */ });\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\n\n//# sourceMappingURL=util.is-keyed-segment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1rZXllZC1zZWdtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBpLWludGVyZ3JhdGUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1rZXllZC1zZWdtZW50LmpzPzc3ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNLZXllZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gdHlwZW9mIHNlZ21lbnQgPT0gXCJvYmplY3RcIiAmJiBzZWdtZW50ICE9PSBudWxsICYmIFwiX2tleVwiIGluIHNlZ21lbnQ7XG59XG5leHBvcnQge1xuICBpc0tleWVkU2VnbWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuaXMta2V5ZWQtc2VnbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/behaviors/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehavior: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.coreBehaviors),\n/* harmony export */   createCodeEditorBehaviors: () => (/* binding */ createCodeEditorBehaviors),\n/* harmony export */   createEmojiPickerBehaviors: () => (/* binding */ createEmojiPickerBehaviors),\n/* harmony export */   createLinkBehaviors: () => (/* binding */ createLinkBehaviors),\n/* harmony export */   createMarkdownBehaviors: () => (/* binding */ createMarkdownBehaviors),\n/* harmony export */   defineBehavior: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior),\n/* harmony export */   raise: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.raise)\n/* harmony export */ });\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n\n\n\n\n\n\n\nfunction createCodeEditorBehaviors(config) {\n  return [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const isMoveUpShortcut = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(config.moveBlockUpShortcut, event.keyboardEvent), firstBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFirstBlock)({\n        context\n      }), selectedBlocks = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n        context\n      }), blocksAbove = firstBlock?.node._key !== selectedBlocks[0]?.node._key;\n      return !isMoveUpShortcut || !blocksAbove ? !1 : {\n        paths: selectedBlocks.map((block) => block.path)\n      };\n    },\n    actions: [(_, {\n      paths\n    }) => paths.map((at) => ({\n      type: \"move.block up\",\n      at\n    }))]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const isMoveDownShortcut = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(config.moveBlockDownShortcut, event.keyboardEvent), lastBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getLastBlock)({\n        context\n      }), selectedBlocks = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n        context\n      }), blocksBelow = lastBlock?.node._key !== selectedBlocks[selectedBlocks.length - 1]?.node._key;\n      return !isMoveDownShortcut || !blocksBelow ? !1 : {\n        paths: selectedBlocks.map((block) => block.path).reverse()\n      };\n    },\n    actions: [(_, {\n      paths\n    }) => paths.map((at) => ({\n      type: \"move.block down\",\n      at\n    }))]\n  })];\n}\nconst emojiCharRegEx = /^[a-zA-Z-_0-9]{1}$/, incompleteEmojiRegEx = /:([a-zA-Z-_0-9]+)$/, emojiRegEx = /:([a-zA-Z-_0-9]+):$/;\nfunction createEmojiPickerBehaviors(config) {\n  const emojiPickerActor = (0,xstate__WEBPACK_IMPORTED_MODULE_2__.A)(createEmojiPickerMachine());\n  return emojiPickerActor.start(), emojiPickerActor.subscribe((state) => {\n    config.onMatchesChanged({\n      matches: state.context.matches\n    }), config.onSelectedIndexChanged({\n      selectedIndex: state.context.selectedIndex\n    });\n  }), [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text === \":\")\n        return !1;\n      if (!emojiCharRegEx.test(event.text))\n        return {\n          emojis: []\n        };\n      const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), emojiKeyword = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      })}${event.text}`.match(incompleteEmojiRegEx)?.[1];\n      return !focusBlock || emojiKeyword === void 0 ? {\n        emojis: []\n      } : {\n        emojis: config.matchEmojis({\n          keyword: emojiKeyword\n        })\n      };\n    },\n    actions: [(_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"emojis found\",\n          matches: params.emojis\n        });\n      }\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \":\")\n        return !1;\n      const matches = emojiPickerActor.getSnapshot().context.matches, selectedIndex = emojiPickerActor.getSnapshot().context.selectedIndex, emoji = matches[selectedIndex] ? config.parseMatch({\n        match: matches[selectedIndex]\n      }) : void 0, focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), emojiKeyword = `${textBefore}:`.match(emojiRegEx)?.[1];\n      if (!focusBlock || emojiKeyword === void 0)\n        return !1;\n      const emojiStringLength = emojiKeyword.length + 2;\n      return emoji ? {\n        focusBlock,\n        emoji,\n        emojiStringLength,\n        textBeforeLength: textBefore.length + 1\n      } : !1;\n    },\n    actions: [() => [{\n      type: \"insert.text\",\n      text: \":\"\n    }], (_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"select\"\n        });\n      }\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength - params.emojiStringLength\n      },\n      focus: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength\n      }\n    }, {\n      type: \"insert.text\",\n      text: params.emoji\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const matches = emojiPickerActor.getSnapshot().context.matches;\n      if (matches.length === 0)\n        return !1;\n      if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Escape\", event.keyboardEvent))\n        return {\n          action: \"reset\"\n        };\n      const isEnter = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Enter\", event.keyboardEvent), isTab = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Tab\", event.keyboardEvent);\n      if (isEnter || isTab) {\n        const selectedIndex = emojiPickerActor.getSnapshot().context.selectedIndex, emoji = matches[selectedIndex] ? config.parseMatch({\n          match: matches[selectedIndex]\n        }) : void 0;\n        if (!emoji)\n          return !1;\n        const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n          context\n        }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n          context\n        }), emojiKeyword = textBefore.match(incompleteEmojiRegEx)?.[1];\n        if (!focusBlock || emojiKeyword === void 0)\n          return !1;\n        const emojiStringLength = emojiKeyword.length + 1;\n        return emoji ? {\n          action: \"select\",\n          focusBlock,\n          emoji,\n          emojiStringLength,\n          textBeforeLength: textBefore.length\n        } : !1;\n      }\n      const isArrowDown = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"ArrowDown\", event.keyboardEvent), isArrowUp = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"ArrowUp\", event.keyboardEvent);\n      return isArrowDown && matches.length > 0 ? {\n        action: \"navigate down\"\n      } : isArrowUp && matches.length > 0 ? {\n        action: \"navigate up\"\n      } : !1;\n    },\n    actions: [(_, params) => params.action === \"select\" ? [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"select\"\n        });\n      }\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength - params.emojiStringLength\n      },\n      focus: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength\n      }\n    }, {\n      type: \"insert.text\",\n      text: params.emoji\n    }] : params.action === \"navigate up\" ? [\n      // If we are navigating then we want to hijack the key event and\n      // turn it into a noop.\n      {\n        type: \"noop\"\n      },\n      {\n        type: \"effect\",\n        effect: () => {\n          emojiPickerActor.send({\n            type: \"navigate up\"\n          });\n        }\n      }\n    ] : params.action === \"navigate down\" ? [\n      // If we are navigating then we want to hijack the key event and\n      // turn it into a noop.\n      {\n        type: \"noop\"\n      },\n      {\n        type: \"effect\",\n        effect: () => {\n          emojiPickerActor.send({\n            type: \"navigate down\"\n          });\n        }\n      }\n    ] : [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"reset\"\n        });\n      }\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.unit !== \"character\" || emojiPickerActor.getSnapshot().context.matches.length === 0)\n        return !1;\n      const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), emojiKeyword = textBefore.slice(0, textBefore.length - 1).match(incompleteEmojiRegEx)?.[1];\n      return !focusBlock || emojiKeyword === void 0 ? {\n        emojis: []\n      } : {\n        emojis: config.matchEmojis({\n          keyword: emojiKeyword\n        })\n      };\n    },\n    actions: [(_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"emojis found\",\n          matches: params.emojis\n        });\n      }\n    }]]\n  })];\n}\nfunction createEmojiPickerMachine() {\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_4__.setup)({\n    types: {\n      context: {},\n      events: {}\n    },\n    actions: {\n      \"assign matches\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        matches: ({\n          event\n        }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_4__.assertEvent)(event, \"emojis found\"), event.matches)\n      }),\n      \"reset matches\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        matches: []\n      }),\n      \"reset selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: 0\n      }),\n      \"increment selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: ({\n          context\n        }) => context.selectedIndex === context.matches.length - 1 ? 0 : context.selectedIndex + 1\n      }),\n      \"decrement selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: ({\n          context\n        }) => context.selectedIndex === 0 ? context.matches.length - 1 : context.selectedIndex - 1\n      })\n    },\n    guards: {\n      \"no matches\": ({\n        context\n      }) => context.matches.length === 0\n    }\n  }).createMachine({\n    id: \"emoji picker\",\n    context: {\n      matches: [],\n      selectedIndex: 0\n    },\n    initial: \"idle\",\n    states: {\n      idle: {\n        on: {\n          \"emojis found\": {\n            actions: \"assign matches\",\n            target: \"showing matches\"\n          }\n        }\n      },\n      \"showing matches\": {\n        always: {\n          guard: \"no matches\",\n          target: \"idle\"\n        },\n        exit: [\"reset selected index\"],\n        on: {\n          \"emojis found\": {\n            actions: \"assign matches\"\n          },\n          \"navigate down\": {\n            actions: \"increment selected index\"\n          },\n          \"navigate up\": {\n            actions: \"decrement selected index\"\n          },\n          reset: {\n            target: \"idle\",\n            actions: [\"reset selected index\", \"reset matches\"]\n          },\n          select: {\n            target: \"idle\",\n            actions: [\"reset selected index\", \"reset matches\"]\n          }\n        }\n      }\n    }\n  });\n}\nfunction looksLikeUrl(text) {\n  let looksLikeUrl2 = !1;\n  try {\n    const url = new URL(text);\n    if (!sensibleProtocols.includes(url.protocol))\n      return !1;\n    looksLikeUrl2 = !0;\n  } catch {\n  }\n  return looksLikeUrl2;\n}\nconst sensibleProtocols = [\"http:\", \"https:\", \"mailto:\", \"tel:\"];\nfunction createLinkBehaviors(config) {\n  const pasteLinkOnSelection = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), text = event.data.getData(\"text/plain\"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? config.linkAnnotation?.({\n        url,\n        schema: context.schema\n      }) : void 0;\n      return annotation && !selectionCollapsed ? {\n        annotation\n      } : !1;\n    },\n    actions: [(_, {\n      annotation\n    }) => [{\n      type: \"annotation.add\",\n      annotation\n    }]]\n  }), pasteLinkAtCaret = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      }), selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      });\n      if (!focusSpan || !selectionCollapsed)\n        return !1;\n      const text = event.data.getData(\"text/plain\"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? config.linkAnnotation?.({\n        url,\n        schema: context.schema\n      }) : void 0;\n      return url && annotation && selectionCollapsed ? {\n        focusSpan,\n        annotation,\n        url\n      } : !1;\n    },\n    actions: [(_, {\n      annotation,\n      url\n    }) => [{\n      type: \"insert.span\",\n      text: url,\n      annotations: [annotation]\n    }]]\n  });\n  return [pasteLinkOnSelection, pasteLinkAtCaret];\n}\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [{\n      type: \"insert.text\",\n      text: \" \"\n    }], (_, {\n      focusTextBlock,\n      style\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: 2\n      }\n    }]]\n  }), automaticHr = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      });\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacter\n    }], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [{\n      type: \"insert.block object\",\n      placement: \"before\",\n      blockObject: hrObject\n    }, {\n      type: \"delete.text\",\n      ...hrBlockOffsets\n    }]]\n  }), automaticHrOnPaste = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const text = event.data.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n        context\n      });\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacters\n    }], (_, {\n      hrObject,\n      focusBlock\n    }) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_7__.isPortableTextTextBlock)(focusBlock.node) ? [{\n      type: \"insert.text block\",\n      textBlock: {\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }, {\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }, {\n      type: \"delete.block\",\n      blockPath: focusBlock.path\n    }] : [{\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }]]\n  }), automaticHeadingOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0;\n      if (blockOffset.offset !== level)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: level + 1\n      }\n    }]]\n  }), clearStyleOnBackspace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      context\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [{\n      type: \"text block.set\",\n      style: defaultStyle,\n      at: focusTextBlock.path\n    }]]\n  }), automaticListOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [{\n      type: \"text block.set\",\n      listItem,\n      level: 1,\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: listItemLength + 1\n      }\n    }]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   editorMachine: () => (/* binding */ editorMachine),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./_chunks-es/util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @sanity/block-tools */ \"(ssr)/./node_modules/@sanity/block-tools/lib/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createEditorSchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nfunction compileSchemaDefinition(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with the name `image`\n    name: blockObject.name === \"image\" ? \"tmp-image\" : blockObject.name,\n    title: blockObject.title,\n    fields: []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    name: inlineObject.name,\n    title: inlineObject.title,\n    fields: []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n          value: decorator.name\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name)\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name)\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createEditorSchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => blockObject.name === \"tmp-image\" ? {\n      ...blockObject,\n      name: \"image\",\n      type: {\n        ...blockObject.type,\n        name: \"image\"\n      }\n    } : blockObject)\n  };\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_5__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_5__ && debug__WEBPACK_IMPORTED_MODULE_5__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_5__(namespace) : debug__WEBPACK_IMPORTED_MODULE_5__(rootName);\n}\nfunction createKeyedPath(point, value, types) {\n  const blockPath = [point.path[0]];\n  if (!value)\n    return null;\n  const block = value[blockPath[0]];\n  if (!block)\n    return null;\n  const keyedBlockPath = [{\n    _key: block._key\n  }];\n  if (block._type !== types.block.name)\n    return keyedBlockPath;\n  let keyedChildPath;\n  const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];\n  return child && (keyedChildPath = [\"children\", {\n    _key: child._key\n  }]), keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;\n}\nfunction toSlatePath(path, editor) {\n  if (!editor)\n    return [];\n  const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isKeySegment)(path[0]) && n._key === path[0]._key\n  }))[0] || [void 0, void 0];\n  if (!block || !slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block))\n    return [];\n  if (editor.isVoid(block))\n    return [blockPath[0], 0];\n  const childPath = [path[2]], childIndex = block.children.findIndex((child) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__([{\n    _key: child._key\n  }], childPath));\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n  }\n  return [blockPath[0], 0];\n}\nfunction toPortableTextRange(value, range, types) {\n  if (!range)\n    return null;\n  let anchor = null, focus = null;\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);\n  anchorPath && range.anchor && (anchor = {\n    path: anchorPath,\n    offset: range.anchor.offset\n  });\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types);\n  focusPath && range.focus && (focus = {\n    path: focusPath,\n    offset: range.focus.offset\n  });\n  const backward = !!(slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(range) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(range));\n  return anchor && focus ? {\n    anchor,\n    focus,\n    backward\n  } : null;\n}\nfunction toSlateRange(selection, editor) {\n  if (!selection || !editor)\n    return null;\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset\n  }, focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset\n  };\n  return focus.path.length === 0 || anchor.path.length === 0 ? null : focus ? {\n    anchor,\n    focus\n  } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block, voidChildren = [{\n      _key: VOID_CHILD_KEY,\n      _type: \"span\",\n      text: \"\",\n      marks: []\n    }];\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: voidChildren,\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: voidChildren,\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].value && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), DefaultObject = (props) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n};\nDefaultObject.displayName = \"DefaultObject\";\nconst debug$j = debugWithName(\"components:DraggableBlock\"), DraggableBlock = (t0) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(51), {\n    children,\n    element,\n    readOnly,\n    blockRef\n  } = t0, editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlateStatic)(), dragGhostRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(void 0), [isDragOver, setIsDragOver] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  let t1, t2;\n  $[0] !== editor || $[1] !== element ? (t2 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, element), $[0] = editor, $[1] = element, $[2] = t2) : t2 = $[2], t1 = t2;\n  const isVoid = t1;\n  let t3, t4;\n  $[3] !== editor || $[4] !== element ? (t4 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isInline(editor, element), $[3] = editor, $[4] = element, $[5] = t4) : t4 = $[5], t3 = t4;\n  const isInline = t3, [blockElement, setBlockElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t5, t6;\n  $[6] !== blockRef || $[7] !== editor || $[8] !== element ? (t5 = () => setBlockElement(blockRef ? blockRef.current : slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, element)), t6 = [editor, element, blockRef], $[6] = blockRef, $[7] = editor, $[8] = element, $[9] = t5, $[10] = t6) : (t5 = $[9], t6 = $[10]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t5, t6);\n  let t7;\n  $[11] !== blockElement || $[12] !== editor || $[13] !== element ? (t7 = (event) => {\n    const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor);\n    if (!isMyDragOver || !blockElement)\n      return;\n    event.preventDefault(), event.dataTransfer.dropEffect = \"move\", IS_DRAGGING_ELEMENT_TARGET.set(editor, element);\n    const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);\n    if (element === editor.children[0] || (loc < height / 2 ? IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"top\") : IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"bottom\")), isMyDragOver === element) {\n      event.dataTransfer.dropEffect = \"none\";\n      return;\n    }\n    setIsDragOver(!0);\n  }, $[11] = blockElement, $[12] = editor, $[13] = element, $[14] = t7) : t7 = $[14];\n  const handleDragOver = t7;\n  let t8;\n  $[15] === Symbol.for(\"react.memo_cache_sentinel\") ? (t8 = () => {\n    setIsDragOver(!1);\n  }, $[15] = t8) : t8 = $[15];\n  const handleDragLeave = t8;\n  let t9;\n  $[16] !== editor || $[17] !== element ? (t9 = (event_0) => {\n    const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor);\n    if (targetBlock) {\n      IS_DRAGGING.set(editor, !1), event_0.preventDefault(), event_0.stopPropagation(), IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$j(\"Removing drag ghost\"), document.body.removeChild(dragGhostRef.current));\n      const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);\n      IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);\n      let targetPath = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, targetBlock);\n      const myPath = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, element), isBefore = slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(myPath, targetPath);\n      if (dragPosition === \"bottom\" && !isBefore) {\n        if (targetPath[0] >= editor.children.length - 1) {\n          debug$j(\"target is already at the bottom, not moving\");\n          return;\n        }\n        const originalPath = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(targetPath), debug$j(`Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (dragPosition === \"top\" && isBefore && targetPath[0] !== editor.children.length - 1) {\n        const originalPath_0 = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(targetPath), debug$j(`Adjusting targetPath from ${JSON.stringify(originalPath_0)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(targetPath, myPath)) {\n        event_0.preventDefault(), debug$j(\"targetPath and myPath is the same, not moving\");\n        return;\n      }\n      debug$j(`Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(targetPath)} (${dragPosition})`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(editor, {\n        at: myPath,\n        to: targetPath\n      }), editor.onChange();\n      return;\n    }\n    debug$j(\"No target element, not doing anything\");\n  }, $[16] = editor, $[17] = element, $[18] = t9) : t9 = $[18];\n  const handleDragEnd = t9;\n  let t10;\n  $[19] !== editor || $[20] !== element ? (t10 = (event_1) => {\n    IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$j(\"On drop (prevented)\", element), event_1.preventDefault(), event_1.stopPropagation(), setIsDragOver(!1));\n  }, $[19] = editor, $[20] = element, $[21] = t10) : t10 = $[21];\n  const handleDrop = t10;\n  let t11;\n  $[22] !== editor || $[23] !== element || $[24] !== isVoid ? (t11 = (event_2) => {\n    if (!isVoid) {\n      IS_DRAGGING_BLOCK_ELEMENT.delete(editor);\n      return;\n    }\n    IS_DRAGGING.set(editor, !0), IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event_2.stopPropagation();\n    const target = event_2.target;\n    target instanceof HTMLElement && (target.style.opacity = \"1\");\n  }, $[22] = editor, $[23] = element, $[24] = isVoid, $[25] = t11) : t11 = $[25];\n  const handleDrag = t11;\n  let t12;\n  $[26] !== blockElement || $[27] !== editor || $[28] !== handleDrag || $[29] !== isInline || $[30] !== isVoid ? (t12 = (event_3) => {\n    if (!isVoid || isInline) {\n      debug$j(\"Not dragging block\"), IS_DRAGGING_BLOCK_ELEMENT.delete(editor), IS_DRAGGING.set(editor, !1);\n      return;\n    }\n    if (debug$j(\"Drag start\"), IS_DRAGGING.set(editor, !0), event_3.dataTransfer && (event_3.dataTransfer.setData(\"application/portable-text\", \"something\"), event_3.dataTransfer.effectAllowed = \"move\"), blockElement && blockElement instanceof HTMLElement) {\n      let dragGhost = blockElement.cloneNode(!0);\n      const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n      if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), document.body) {\n        dragGhostRef.current = dragGhost, dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const rect = blockElement.getBoundingClientRect(), x = event_3.clientX - rect.left, y = event_3.clientY - rect.top;\n        dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event_3.dataTransfer.setDragImage(dragGhost, x, y);\n      }\n    }\n    handleDrag(event_3);\n  }, $[26] = blockElement, $[27] = editor, $[28] = handleDrag, $[29] = isInline, $[30] = isVoid, $[31] = t12) : t12 = $[31];\n  const handleDragStart = t12;\n  let t13;\n  $[32] !== editor || $[33] !== isDragOver ? (t13 = isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[32] = editor, $[33] = isDragOver, $[34] = t13) : t13 = $[34];\n  const isDraggingOverFirstBlock = t13;\n  let t14;\n  $[35] !== editor || $[36] !== isDragOver ? (t14 = isDragOver && editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[35] = editor, $[36] = isDragOver, $[37] = t14) : t14 = $[37];\n  const isDraggingOverLastBlock = t14, dragPosition_0 = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"top\", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"bottom\";\n  let t15, t16;\n  $[38] === Symbol.for(\"react.memo_cache_sentinel\") ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  } }), $[38] = t16) : t16 = $[38], t15 = t16;\n  const dropIndicator = t15;\n  if (readOnly) {\n    let t172;\n    return $[39] !== children ? (t172 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children }), $[39] = children, $[40] = t172) : t172 = $[40], t172;\n  }\n  const t17 = isDraggingOverTop && dropIndicator, t18 = isDraggingOverBottom && dropIndicator;\n  let t19;\n  return $[41] !== children || $[42] !== handleDrag || $[43] !== handleDragEnd || $[44] !== handleDragOver || $[45] !== handleDragStart || $[46] !== handleDrop || $[47] !== isVoid || $[48] !== t17 || $[49] !== t18 ? (t19 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { draggable: isVoid, onDragStart: handleDragStart, onDrag: handleDrag, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDragEnd: handleDragEnd, onDrop: handleDrop, children: [\n    t17,\n    children,\n    t18\n  ] }), $[41] = children, $[42] = handleDrag, $[43] = handleDragEnd, $[44] = handleDragOver, $[45] = handleDragStart, $[46] = handleDrop, $[47] = isVoid, $[48] = t17, $[49] = t18, $[50] = t19) : t19 = $[50], t19;\n};\nDraggableBlock.displayName = \"DraggableBlock\";\ndebugWithName(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n  display: \"inline-block\"\n}, Element = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck\n}) => {\n  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), focused = selected && editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection) || !1, value = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0], [editor, element, schemaTypes.block.name]);\n  let renderedBlock = children, className;\n  const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => [{\n    _key: element._key\n  }], [element]);\n  if (typeof element._type != \"string\")\n    throw new Error(\"Expected element to have a _type property\");\n  if (typeof element._key != \"string\")\n    throw new Error(\"Expected element to have a _key property\");\n  if (editor.isInline(element)) {\n    const path = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n      depth: 1\n    }), schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type);\n    if (!schemaType)\n      throw new Error(\"Could not find type for inline block element\");\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block)) {\n      const elmPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: element._key\n      }];\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { ...attributes, children: [\n        children,\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { draggable: !readOnly, className: \"pt-inline-object\", \"data-testid\": \"pt-inline-object\", ref: inlineBlockObjectRef, style: inlineBlockStyle, contentEditable: !1, children: [\n          renderChild && renderChild({\n            annotations: EMPTY_ANNOTATIONS,\n            // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n            editorElementRef: inlineBlockObjectRef,\n            focused,\n            path: elmPath,\n            schemaType,\n            selected,\n            type: schemaType,\n            value\n          }),\n          !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value })\n        ] }, element._key)\n      ] });\n    }\n    throw new Error(\"Block not found!\");\n  }\n  if (element._type === schemaTypes.block.name) {\n    className = \"pt-block pt-text-block\";\n    const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n    className = `pt-block pt-text-block pt-text-block-style-${style}`;\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style);\n    renderStyle && blockStyleType && (renderedBlock = renderStyle({\n      block: element,\n      children,\n      focused,\n      selected,\n      value: style,\n      path: blockPath,\n      schemaType: blockStyleType,\n      editorElementRef: blockRef\n    }));\n    let level;\n    if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item_0) => item_0.value === element.listItem);\n      renderListItem && listType && (renderedBlock = renderListItem({\n        block: value,\n        children: renderedBlock,\n        focused,\n        selected,\n        value: element.listItem,\n        path: blockPath,\n        schemaType: listType,\n        level: value.level || 1,\n        editorElementRef: blockRef\n      }));\n    }\n    const renderProps = Object.defineProperty({\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : void 0,\n      path: blockPath,\n      selected,\n      style,\n      schemaType: schemaTypes.block,\n      value\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n      }\n    }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ...attributes, className, spellCheck, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, children: propsOrDefaultRendered }) }) }, element._key);\n  }\n  const schemaType_0 = schemaTypes.blockObjects.find((_type_0) => _type_0.name === element._type);\n  if (!schemaType_0)\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n  className = \"pt-block pt-object-block\";\n  const block_0 = fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n  let renderedBlockFromProps;\n  if (renderBlock) {\n    const _props = Object.defineProperty({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n      editorElementRef: blockRef,\n      focused,\n      path: blockPath,\n      schemaType: schemaType_0,\n      selected,\n      value: block_0\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n      }\n    });\n    renderedBlockFromProps = renderBlock(_props);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { ...attributes, className, children: [\n    children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, contentEditable: !1, children: renderedBlockFromProps || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }) }) })\n  ] }, element._key);\n};\nElement.displayName = \"Element\";\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n};\nfunction DefaultAnnotation(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props.annotation ? (t0 = () => alert(JSON.stringify(props.annotation)), $[0] = props.annotation, $[1] = t0) : t0 = $[1];\n  const handleClick = t0;\n  let t1;\n  $[2] === Symbol.for(\"react.memo_cache_sentinel\") ? (t1 = {\n    color: \"blue\"\n  }, $[2] = t1) : t1 = $[2];\n  let t2;\n  return $[3] !== handleClick || $[4] !== props.children ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: t1, onClick: handleClick, children: props.children }), $[3] = handleClick, $[4] = props.children, $[5] = t2) : t2 = $[5], t2;\n}\nDefaultAnnotation.displayName = \"DefaultAnnotation\";\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst FLUSH_PATCHES_THROTTLED_MS =  false ? 0 : 1e3, mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"has pending patches\"\n    }),\n    \"emit mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      context\n    }) => ({\n      type: \"mutation\",\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(context.slateEditor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(context.slateEditor))\n    })),\n    \"clear pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingPatches: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingPatches: ({\n        context,\n        event\n      }) => [...context.pendingPatches, event.patch]\n    })\n  },\n  guards: {\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isNormalizing(context.slateEditor)\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      on: {\n        patch: {\n          actions: [\"defer patch\", \"emit has pending patches\"],\n          target: \"has pending patches\"\n        }\n      }\n    },\n    \"has pending patches\": {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [{\n          guard: \"slate is normalizing\",\n          target: \"idle\",\n          actions: [\"emit mutation\", \"clear pending patches\"]\n        }, {\n          reenter: !0\n        }]\n      },\n      on: {\n        patch: {\n          actions: [\"defer patch\"],\n          reenter: !0\n        }\n      }\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)({\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.value).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$i = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor,\n    blockSchemaType\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);\n    const remotePatches = getRemotePatches(editor);\n    options.subscriptions.push(() => {\n      debug$i(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$i(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$i(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);\n      let merge = !0;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$i(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      apply2(op);\n    }, editor.undo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        undos\n      } = editor.history;\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1];\n        if (debug$i(\"Undoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_15__.Operation.inverse).reverse();\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$i(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.redos.push(step), editor.history.undos.pop();\n        }\n      }\n    }, editor.redo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        redos\n      } = editor.history;\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1];\n        if (debug$i(\"Redoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$i(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.undos.push(step), editor.history.redos.pop();\n        }\n      }\n    }, editor;\n  };\n}\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$i(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$i(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$i(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_20__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"done syncing initial value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => !context.readOnly && (context.isProcessingLocalChanges || (isChangingRemotely(context.slateEditor) ?? !1)),\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => !(context.previousValue === void 0 && context.pendingValue === void 0) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  on: {\n    \"has pending patches\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"setting up\": {\n      initial: \"syncing initial value\",\n      states: {\n        \"syncing initial value\": {\n          always: {\n            guard: \"initial value synced\",\n            target: \"done syncing initial value\"\n          }\n        },\n        \"done syncing initial value\": {\n          entry: [\"emit done syncing initial value\"],\n          type: \"final\"\n        }\n      }\n    },\n    syncing: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          on: {\n            \"update value\": [{\n              guard: \"is busy\",\n              target: \"busy\",\n              actions: [\"assign pending value\"]\n            }, {\n              target: \"syncing\",\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        busy: {\n          after: {\n            1e3: [{\n              guard: \"is busy\",\n              reenter: !0\n            }, {\n              target: \"syncing\"\n            }]\n          },\n          on: {\n            \"update value\": [{\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        syncing: {\n          always: {\n            guard: \"pending value equals previous value\",\n            target: \"idle\",\n            actions: [\"clear pending value\", \"assign initial value synced\"]\n          },\n          invoke: {\n            src: \"sync value\",\n            id: \"sync value\",\n            input: ({\n              context\n            }) => ({\n              context: {\n                keyGenerator: context.keyGenerator,\n                previousValue: context.previousValue,\n                readOnly: context.readOnly,\n                schema: context.schema\n              },\n              slateEditor: context.slateEditor,\n              streamBlocks: !context.initialValueSynced,\n              value: context.pendingValue\n            })\n          },\n          on: {\n            \"update value\": {\n              actions: [\"assign pending value\"]\n            },\n            patch: {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"invalid value\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"value changed\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"done syncing\": [{\n              guard: \"value changed while syncing\",\n              actions: [\"assign previous value\", \"assign initial value synced\"],\n              reenter: !0\n            }, {\n              target: \"idle\",\n              actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$h = debugWithName(\"hook:useSyncValue\");\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$h(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor);\n        const childrenLength = slateEditor.children.length;\n        slateEditor.children.forEach((_, index) => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n            at: [childrenLength - 1 - index]\n          });\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n          decorators: []\n        }), {\n          at: [0]\n        }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]);\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length;\n            if (slateValueFromProps.length < childrenLength) {\n              for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                  at: [i]\n                });\n              isChanged = !0;\n            }\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks\n            })) {\n              const {\n                blockChanged,\n                blockValid\n              } = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value\n              });\n              isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n            }\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$h(\"Invalid value, returning\"), sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$h(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$h(\"Server value and editor value is equal, no need to sync.\");\n  sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nasync function* getBlocks({\n  slateValue,\n  streamBlocks\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    streamBlocks && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$h.enabled && debug$h(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$h.enabled && debug$h(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$h.enabled && debug$h(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$h(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$h(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$h(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode && isTextChanged ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode || (debug$h(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$h(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$h(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$g = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(40), {\n    editorActor,\n    slateEditor\n  } = props, value = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp2);\n  let t0;\n  $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n  const t1 = t0.context.keyGenerator;\n  let t2;\n  $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n    \"edit mode\": \"read only\"\n  }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n  let t4;\n  $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n    input: {\n      keyGenerator: t1,\n      readOnly: t2,\n      schema: t3.context.schema,\n      slateEditor\n    }\n  }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n  const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(syncMachine, t4);\n  let t5;\n  $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n    input: {\n      schema: t5.context.schema,\n      slateEditor\n    }\n  }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n  const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(mutationMachine, t6);\n  let t7, t8;\n  $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = () => {\n    const subscription = mutationActorRef.on(\"*\", (event) => {\n      event.type === \"has pending patches\" && syncActorRef.send({\n        type: \"has pending patches\"\n      }), event.type === \"mutation\" && (syncActorRef.send({\n        type: \"mutation\"\n      }), editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t8 = [mutationActorRef, syncActorRef, editorActor], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t7, t8);\n  let t10, t9;\n  $[21] !== props.editorActor || $[22] !== syncActorRef ? (t9 = () => {\n    const subscription_0 = syncActorRef.on(\"*\", (event_0) => {\n      props.editorActor.send(event_0);\n    });\n    return () => {\n      subscription_0.unsubscribe();\n    };\n  }, t10 = [props.editorActor, syncActorRef], $[21] = props.editorActor, $[22] = syncActorRef, $[23] = t10, $[24] = t9) : (t10 = $[23], t9 = $[24]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t9, t10);\n  let t11, t12;\n  $[25] !== readOnly || $[26] !== syncActorRef ? (t11 = () => {\n    syncActorRef.send({\n      type: \"update readOnly\",\n      readOnly\n    });\n  }, t12 = [syncActorRef, readOnly], $[25] = readOnly, $[26] = syncActorRef, $[27] = t11, $[28] = t12) : (t11 = $[27], t12 = $[28]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t11, t12);\n  let t13, t14;\n  $[29] !== syncActorRef || $[30] !== value ? (t13 = () => {\n    debug$g(\"Value from props changed, syncing new value\"), syncActorRef.send({\n      type: \"update value\",\n      value\n    });\n  }, t14 = [syncActorRef, value], $[29] = syncActorRef, $[30] = value, $[31] = t13, $[32] = t14) : (t13 = $[31], t14 = $[32]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t13, t14);\n  let t15;\n  $[33] !== editorActor || $[34] !== mutationActorRef ? (t15 = () => {\n    debug$g(\"Subscribing to patch events\");\n    const sub = editorActor.on(\"patch\", (event_1) => {\n      mutationActorRef.send(event_1);\n    });\n    return () => {\n      debug$g(\"Unsubscribing to patch events\"), sub.unsubscribe();\n    };\n  }, $[33] = editorActor, $[34] = mutationActorRef, $[35] = t15) : t15 = $[35];\n  let t16;\n  return $[36] !== editorActor || $[37] !== mutationActorRef || $[38] !== slateEditor ? (t16 = [editorActor, mutationActorRef, slateEditor], $[36] = editorActor, $[37] = mutationActorRef, $[38] = slateEditor, $[39] = t16) : t16 = $[39], (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n  return s_0.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp(s) {\n  return s.context.value;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst debug$f = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(types) {\n  const textBlockName = types.block.name;\n  function insertTextPatch(editor, operation, beforeValue) {\n    debug$f.enabled && debug$f(\"Operation\", JSON.stringify(operation, null, 2));\n    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.diffMatchPatch)(prevText, textChild.text, path);\n    return patch.value.length ? [patch] : [];\n  }\n  function removeTextPatch(editor, operation, beforeValue) {\n    const block = editor && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n    if (child && !textChild)\n      throw new Error(\"Expected span\");\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n    return patch.value ? [patch] : [];\n  }\n  function setNodePatch(editor, operation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]];\n      if (typeof block._key != \"string\")\n        throw new Error(\"Expected block to have a _key\");\n      const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__({\n        ...editor.children[operation.path[0]],\n        ...operation.newProperties\n      }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__);\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(fromSlateValue([setNode], textBlockName)[0], [{\n        _key: block._key\n      }])];\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]];\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]];\n        if (child) {\n          const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n          return keys.forEach((keyName) => {\n            if (keys.length === 1 && keyName === \"_key\") {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(val, [{\n                _key: blockKey\n              }, \"children\", block.children.indexOf(child), keyName]));\n            } else {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(val, [{\n                _key: blockKey\n              }, \"children\", {\n                _key: childKey\n              }, keyName]));\n            }\n          }), patches;\n        }\n        throw new Error(\"Could not find a valid child\");\n      }\n      throw new Error(\"Could not find a valid block\");\n    } else\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n  }\n  function insertNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n      return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([operation.node], textBlockName)[0]], position, [{\n        _key: targetKey\n      }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([operation.node], textBlockName)[0]], \"before\", [operation.path[0]])];\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n        ...operation.node\n      };\n      !node._type && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n      const child = fromSlateValue([{\n        _key: \"bogus\",\n        _type: textBlockName,\n        children: [node]\n      }], textBlockName)[0].children[0];\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([child], position, [{\n        _key: block._key\n      }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n        _key: block.children[operation.path[1] - 1]._key\n      }])];\n    }\n    return debug$f(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n  }\n  function splitNodePatch(editor, operation, beforeValue) {\n    const patches = [], splitBlock = editor.children[operation.path[0]];\n    if (!editor.isTextBlock(splitBlock))\n      throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]];\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue([editor.children[operation.path[0] + 1]], textBlockName)[0];\n        targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([targetValue], \"after\", [{\n          _key: splitBlock._key\n        }])), oldBlock.children.slice(operation.position).forEach((span) => {\n          const path = [{\n            _key: oldBlock._key\n          }, \"children\", {\n            _key: span._key\n          }];\n          patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)(path));\n        }));\n      }\n      return patches;\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]];\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = fromSlateValue([{\n          ...splitBlock,\n          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n        }], textBlockName)[0].children;\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)(targetSpans, \"after\", [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(splitSpan.text, [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }, \"text\"]));\n      }\n      return patches;\n    }\n    return patches;\n  }\n  function removeNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]];\n    if (operation.path.length === 1) {\n      if (block && block._key)\n        return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: block._key\n        }])];\n      throw new Error(\"Block not found\");\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]];\n      return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: spanToRemove._key\n      }])] : (debug$f(\"Span not found in editor trying to remove node\"), []);\n    } else\n      return debug$f(\"Not creating patch inside object block\"), [];\n  }\n  function mergeNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n    if (operation.path.length === 1)\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(newBlock, [{\n          _key: newBlock._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: block._key\n        }]));\n      } else\n        throw new Error(\"Target key not found!\");\n    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n      updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(updatedSpan.text, [{\n        _key: block._key\n      }, \"children\", {\n        _key: updatedSpan._key\n      }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: removedSpan._key\n      }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n    } else\n      debug$f(\"Void nodes can't be merged, not creating any patches\");\n    return patches;\n  }\n  function moveNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n    if (!targetBlock)\n      return patches;\n    if (operation.path.length === 1) {\n      const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([block], textBlockName)[0]], position, [{\n        _key: targetBlock._key\n      }]));\n    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: child._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([childToInsert], position, [{\n        _key: targetBlock._key\n      }, \"children\", {\n        _key: targetChild._key\n      }]));\n    }\n    return patches;\n  }\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch\n  };\n}\nconst IS_APPLYING_BEHAVIOR_ACTIONS = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorActions(editor, fn) {\n  const prev = isApplyingBehaviorActions(editor);\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, !0), fn(), IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev);\n}\nfunction isApplyingBehaviorActions(editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? !1;\n}\nfunction createWithEventListeners(editorActor, subscriptions) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    subscriptions.push(() => {\n      const subscription = editorActor.on(\"*\", (event) => {\n        switch (event.type) {\n          case \"annotation.add\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.add\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"annotation.remove\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.remove\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"blur\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"blur\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"custom.*\": {\n            editorActor.send({\n              type: \"custom behavior event\",\n              behaviorEvent: event.event,\n              editor\n            });\n            break;\n          }\n          case \"decorator.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"decorator.toggle\",\n                decorator: event.decorator\n              },\n              editor\n            });\n            break;\n          }\n          case \"focus\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"focus\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.block object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.block object\",\n                placement: event.placement,\n                blockObject: event.blockObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.inline object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.inline object\",\n                inlineObject: event.inlineObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"list item.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"list item.toggle\",\n                listItem: event.listItem\n              },\n              editor\n            });\n            break;\n          }\n          case \"select\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"select\",\n                selection: event.selection\n              },\n              editor\n            });\n            break;\n          }\n          case \"style.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"style.toggle\",\n                style: event.style\n              },\n              editor\n            });\n            break;\n          }\n        }\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    const {\n      deleteBackward: deleteBackward2,\n      deleteForward: deleteForward2,\n      insertBreak,\n      insertSoftBreak,\n      insertText: insertText2,\n      select\n    } = editor;\n    return editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText2(text, options);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text,\n          options\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText2(text, options);\n        }\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          selection: toPortableTextRange(fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), range, editorActor.getSnapshot().context.schema)\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location);\n        }\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor, schemaTypes) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(operation.node)) {\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node) && node._type === schemaTypes.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$e = debugWithName(\"applyPatches\"), debugVerbose = debug$e.enabled && !0;\nfunction createApplyPatch(schemaTypes) {\n  return (editor, patch) => {\n    let changed = !1;\n    debugVerbose && (debug$e(`\n\nNEW PATCH =============================================================`), debug$e(JSON.stringify(patch, null, 2)));\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schemaTypes);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n        default:\n          debug$e(\"Unhandled patch\", patch.type);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const {\n    block,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$e(\"Block not found\"), !1;\n  if (!child || !childPath)\n    return debug$e(\"Child not found\"), !1;\n  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n  debugState(editor, \"before\");\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schemaTypes) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!targetBlock || !targetBlockPath)\n    return debug$e(\"Block not found\"), !1;\n  if (patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$e(\"Ignoring patch targeting void value\"), !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n    return debug$e(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), debugState(editor, \"after\"), !0;\n  }\n  const {\n    items,\n    position\n  } = patch;\n  if (!targetChild || !targetChildPath)\n    return debug$e(\"Child not found\"), !1;\n  const childrenToInsert = targetBlock && toSlateValue([{\n    ...targetBlock,\n    children: items\n  }], {\n    schemaTypes\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];\n  return debug$e(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$e(\"Block not found\"), !1;\n  const isTextBlock = editor.isTextBlock(block);\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$e(\"Ignoring setting void value\"), !1;\n  if (debugState(editor, \"before\"), isTextBlock && child && childPath) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child)) {\n      const newText = child.text;\n      value.text !== newText && (debug$e(\"Setting text property\"), editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset: 0,\n        text: newText\n      }), editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset: 0,\n        text: value.text\n      }), editor.onChange());\n    } else\n      debug$e(\"Setting non-text property\"), editor.apply({\n        type: \"set_node\",\n        path: childPath,\n        properties: {},\n        newProperties: value\n      });\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug$e(\"Setting block property\");\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: blockPath,\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    }), debug$e(\"Setting children\"), block.children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c2\n      });\n    }), Array.isArray(children) && children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: blockPath.concat(cIndex),\n        node: c2\n      });\n    });\n  } else if (block && \"value\" in block) {\n    const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.applyAll)([block.value], [patch])[0];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n      ...block,\n      value: newVal\n    }, {\n      at: blockPath\n    }), !0;\n  }\n  return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    debug$e(\"Removing everything\"), debugState(editor, \"before\");\n    const previousSelection = editor.selection;\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.children.forEach((_child, i) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n        at: [i]\n      });\n    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), debugState(editor, \"after\"), !0;\n  }\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (patch.path.length === 1) {\n    if (!block || !blockPath)\n      return debug$e(\"Block not found\"), !1;\n    const blockIndex = blockPath[0];\n    return debug$e(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [blockIndex]\n    }), debugState(editor, \"after\"), !0;\n  }\n  return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$e(\"Child not found\"), !1) : (debug$e(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose && debug$e(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n    at: childPath\n  }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n  debugVerbose && (debug$e(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$e(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n  let blockIndex = -1;\n  const block = editor.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  return block ? {\n    block,\n    path: [blockIndex]\n  } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n  const {\n    block,\n    path: blockPath\n  } = findBlockFromPath(editor, path);\n  if (!(slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && path[1] === \"children\"))\n    return {\n      block,\n      blockPath,\n      child: void 0,\n      childPath: void 0\n    };\n  let childIndex = -1;\n  const child = block.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  return child ? {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex)\n  } : {\n    block,\n    blockPath,\n    child: void 0,\n    childPath: void 0\n  };\n}\nconst debug$d = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(schemaTypes);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                debug$d.enabled && debug$d(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n              });\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$d(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$d(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...patchFunctions.insertTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...patchFunctions.removeTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...patchFunctions.removeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...patchFunctions.splitNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...patchFunctions.insertNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...patchFunctions.setNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...patchFunctions.moveNodePatch(editor, operation, previousChildren)];\n          break;\n      }\n      return !editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([])], editorActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)([], []), ...patches]), patches.length > 0 && patches.forEach((patch) => {\n        editorActor.send({\n          type: \"patch\",\n          patch: {\n            ...patch,\n            origin: \"local\"\n          }\n        });\n      }), editor;\n    }, editor;\n  };\n}\nconst debug$c = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const node = op.node;\n        if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, node)) {\n          const nextPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(op.path);\n          editor.children[nextPath[0]] || (debug$c(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n            decorators: []\n          })));\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$b = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor, types) {\n  const defaultStyle = types.styles[0].value;\n  return function(editor) {\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry;\n      for (const op of editor.operations)\n        if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(path, op.path)) {\n          const [child] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] + 1, 0]);\n          if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && child.text === \"\") {\n            debug$b(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              style: defaultStyle\n            }, {\n              at: [op.path[0] + 1],\n              voids: !1\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      normalizeNode(nodeEntry);\n    }, editor;\n  };\n}\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nconst debug$a = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor, types) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = types.decorators.map((t) => t.value);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$a(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$a(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$a(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath), decorators2 = types.decorators.map((decorator) => decorator.value), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$a(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = types.decorators.map((decorator) => decorator.value);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$a(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = types.decorators.map((decorator) => decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$a(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$a(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(newMarkDefs, node.markDefs)) {\n          debug$a(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          if (movedToNextSpan || movedToPreviousSpan)\n            return;\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const {\n          selection\n        } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) : !1;\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: selection.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotation) {\n                apply2(op);\n                return;\n              } else if (!previousSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n            if (atTheEndOfSpan) {\n              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? []\n                });\n                return;\n              }\n              if (!nextSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n          }\n          if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              _type: \"span\",\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark) => decorators.includes(mark))\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const marksWithoutAnnotationMarks = ({\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n              }.marks || []).filter((mark) => decorators.includes(mark));\n              slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                  marks: marksWithoutAnnotationMarks\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...oldDefs, ...op.properties.markDefs]);\n          debug$a(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst addDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator;\n  if (editor.selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n      const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(editor.selection) ? [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })] : [];\n      splitTextNodes.length > 1 && splitTextNodes.every((node) => node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path]) => {\n        const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks\n        }, {\n          at: path,\n          match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n          split: !0,\n          hanging: !0\n        });\n      });\n    } else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: [...existingMarks, mark]\n        };\n        editor.marks = marks;\n      }\n    }\n    if (editor.selection) {\n      const selection = editor.selection;\n      editor.selection = {\n        ...selection\n      };\n    }\n  }\n}, removeDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: existingMarks.filter((eMark) => eMark !== mark)\n        };\n        editor.marks = {\n          marks: marks.marks,\n          _type: \"span\"\n        };\n      }\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction isDecoratorActive({\n  editor,\n  decorator\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n    at: editor.selection\n  }));\n  return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n) => {\n    const [node] = n;\n    return node.marks?.includes(decorator);\n  }) : ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n  }.marks || []).includes(decorator);\n}\nconst toggleDecoratorActionImplementation = ({\n  context,\n  action\n}) => {\n  isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator\n  }) ? removeDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.remove\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  }) : addDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.add\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  });\n};\ndebugWithName(\"plugin:withPortableTextSelections\");\nfunction createWithPortableTextSelections(editorActor, types) {\n  let prevSelection = null;\n  return function(editor) {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange = null;\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n          if (existing)\n            ptRange = existing;\n          else {\n            const value = editor.children;\n            ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n          }\n        }\n        ptRange ? editorActor.send({\n          type: \"selection\",\n          selection: ptRange\n        }) : editorActor.send({\n          type: \"selection\",\n          selection: null\n        });\n      }\n      prevSelection = editor.selection;\n    }, {\n      onChange\n    } = editor;\n    return editor.onChange = () => {\n      onChange(), editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      }) || emitPortableTextSelection();\n    }, editor;\n  };\n}\nconst debug$9 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextListBlock)(value) && value._type === schemaTypes.block.name, editor.isVoid = (element) => schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$9(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          ...span,\n          _type: schemaTypes.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$9(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withUtils\");\nfunction createWithUtils({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    return editor.pteExpandToWord = () => {\n      const {\n        selection\n      } = editor;\n      if (selection && !slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n        const [textNode] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection.focus, {\n          depth: 2\n        });\n        if (!textNode || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(textNode) || textNode.text.length === 0) {\n          debug$8(\"pteExpandToWord: Can't expand to word here\");\n          return;\n        }\n        const {\n          focus\n        } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str) => str.match(/\\s/g), whiteSpaceBeforeIndex = charsBefore.split(\"\").reverse().findIndex((str) => isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split(\"\").findIndex((obj) => isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);\n        if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {\n          debug$8(\"pteExpandToWord: Expanding to focused word\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n            anchor: {\n              ...selection.anchor,\n              offset: newStartOffset\n            },\n            focus: {\n              ...selection.focus,\n              offset: newEndOffset\n            }\n          });\n          return;\n        }\n        debug$8(\"pteExpandToWord: Can't expand to word here\");\n      }\n    }, editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: schemaTypes.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: schemaTypes.styles[0].value || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => schemaTypes.decorators.find(({\n          value\n        }) => value === decorator))\n      }]\n    }], {\n      schemaTypes\n    })[0], editor;\n  };\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor\n  } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes\n  }), withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor,\n    schemaTypes\n  }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);\n  return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$7 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n  const existingSlateEditor = slateEditors.get(config.editorActor);\n  if (existingSlateEditor)\n    return debug$7(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n  debug$7(\"Creating new Slate editor instance\", config.editorActor.id);\n  const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_16__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_15__.createEditor)()), {\n    editorActor: config.editorActor,\n    subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n  for (const subscription of subscriptions)\n    unsubscriptions.push(subscription());\n  const initialValue = [instance.pteCreateTextBlock({\n    decorators: []\n  })], slateEditor = {\n    instance,\n    initialValue\n  };\n  return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nconst toggleListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem\n  }) ? removeListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.remove\"\n    }\n  }) : addListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.add\"\n    }\n  });\n}, removeListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isListBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, [\"listItem\", \"level\"], {\n      at\n    });\n}, addListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      level: 1,\n      listItem: action.listItem\n    }, {\n      at\n    });\n};\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nconst toggleStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  isStyleActive({\n    editor: action.editor,\n    style: action.style\n  }) ? removeStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.remove\"\n    }\n  }) : addStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.add\"\n    }\n  });\n}, removeStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const defaultStyle = context.schema.styles[0].value, guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: defaultStyle\n    }, {\n      at\n    });\n}, addStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: action.style\n    }, {\n      at\n    });\n};\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nconst debug$6 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"focus\"\n        },\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"blur\"\n        },\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      try {\n        return isDecoratorActive({\n          editor,\n          decorator: mark\n        });\n      } catch (err) {\n        return console.warn(err), !1;\n      }\n    },\n    marks: () => ({\n      ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n    }).marks || [],\n    undo: () => editor.undo(),\n    redo: () => editor.redo(),\n    select: (selection) => {\n      const slateSelection = toSlateRange(selection, editor);\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_15__.Node.get(editor, focusChildPath);\n      return isSpanNode && focusNode._type !== types.span.name && (debug$6(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block object\",\n        blockObject: {\n          name: type.name,\n          value\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        focus: {\n          path,\n          offset: 0\n        },\n        anchor: {\n          path,\n          offset: 0\n        }\n      }, editor);\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => isAnnotationActive({\n      editor,\n      annotation: {\n        name: annotationType\n      }\n    }),\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          action: {\n            type: \"annotation.add\",\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange(selection, editor);\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$6(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          options?.mode === \"blocks\" && (debug$6(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$6(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({\n            decorators: []\n          })]), editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nfunction isAnnotationActive({\n  editor,\n  annotation\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2)\n    return !1;\n  try {\n    const spans = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node)\n    })];\n    if (spans.length === 0 || spans.some(([span]) => !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n        depth: 1\n      });\n      return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;\n    }, []);\n    return spans.every(([span]) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) ? span.marks?.map((markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n  } catch {\n    return !1;\n  }\n}\nconst addAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  const editor = action.editor, {\n    selection: originalSelection\n  } = editor;\n  let paths;\n  if (originalSelection && (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {\n    let spanPath, markDefPath;\n    const markDefPaths = [];\n    if (!editor.selection)\n      return;\n    const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n      reverse: slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection)\n    });\n    for (const [block, blockPath] of selectedBlocks) {\n      if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n        continue;\n      const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];\n      markDefs.find((markDef) => markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: [...markDefs, {\n          _type: action.annotation.name,\n          _key: annotationKey,\n          ...action.annotation.value\n        }]\n      }, {\n        at: blockPath\n      }), markDefPath = [{\n        _key: block._key\n      }, \"markDefs\", {\n        _key: annotationKey\n      }], slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0\n      });\n      const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n      for (const [span, path] of children) {\n        if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, path))\n          continue;\n        const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === action.annotation.name));\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n        }, {\n          at: path\n        }), spanPath = [{\n          _key: block._key\n        }, \"children\", {\n          _key: span._key\n        }];\n      }\n    }\n    markDefPath && spanPath && (paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath\n    });\n  }\n  return paths;\n}, removeAnnotationActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor;\n  if (debug$6(\"Removing annotation\", action.annotation.name), !!editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== action.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, toggleAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  if (isAnnotationActive({\n    editor: action.editor,\n    annotation: {\n      name: action.annotation.name\n    }\n  }))\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.remove\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n  else\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.add\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n};\nfunction insertBlock({\n  block,\n  placement,\n  editor,\n  schema\n}) {\n  if (editor.selection) {\n    const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection.focus.path.slice(0, 1),\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n)\n    }))[0] ?? [void 0, void 0];\n    if (placement === \"after\") {\n      const nextPath = [focusBlockPath[0] + 1];\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n        at: nextPath\n      }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextPath[0], 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextPath[0], 0],\n          offset: 0\n        }\n      });\n    } else placement === \"before\" ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n      at: focusBlockPath\n    }) : slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block);\n    focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: focusBlockPath\n    });\n  } else {\n    const lastBlock = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n),\n      at: [],\n      reverse: !0\n    }))[0];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: lastBlock[1]\n    });\n  }\n}\nconst insertBlockObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  const block = toSlateValue([{\n    _key: context.keyGenerator(),\n    _type: action.blockObject.name,\n    ...action.blockObject.value ? action.blockObject.value : {}\n  }], {\n    schemaTypes: context.schema\n  })[0];\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema\n  });\n}, insertBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;\n  if (!editor.selection)\n    return;\n  const [focusSpan] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    mode: \"lowest\",\n    at: editor.selection.focus,\n    match: (n) => editor.isTextSpan(n),\n    voids: !1\n  }))[0] ?? [void 0], focusDecorators = focusSpan?.marks?.filter((mark) => schema.decorators.some((decorator) => decorator.value === mark)) ?? [], focusAnnotations = focusSpan?.marks?.filter((mark) => !schema.decorators.some((decorator) => decorator.value === mark)) ?? [], anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, focusBlockPath);\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(editor.selection), lastFocusBlockChild = focusBlock.children[focusBlock.children.length - 1], atTheEndOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild) ? lastFocusBlockChild.text.length : 0\n    }), atTheStartOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0\n    });\n    if (atTheEndOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      return;\n    }\n    if (atTheStartOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      const [nextBlockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath);\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        }\n      });\n      return;\n    }\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0];\n    if (!atTheStartOfBlock && !atTheEndOfBlock && !selectionAcrossBlocks) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection)\n          return;\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n          at: editor.selection\n        });\n        const [nextNode, nextNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath), {\n          depth: 1\n        });\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n          anchor: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          },\n          focus: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          }\n        }), editor.isTextBlock(nextNode) && nextNode.markDefs && nextNode.markDefs.length > 0) {\n          const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, focusBlockPath)).map((entry) => entry[0]).filter((node) => editor.isTextSpan(node)), children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, nextNodePath);\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child))\n              continue;\n            const marks = child.marks ?? [];\n            for (const mark of marks)\n              schema.decorators.some((decorator) => decorator.value === mark) || prevNodeSpans.some((prevNodeSpan) => prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());\n            const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark);\n            lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(marks, newMarks) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: newMarks\n            }, {\n              at: childPath\n            });\n          }\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key\n          }));\n          lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(nextNode.markDefs, newMarkDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: nextNodePath,\n            match: (node) => editor.isTextBlock(node)\n          });\n        }\n      }), editor.onChange();\n      return;\n    }\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n    always: !0\n  });\n}, insertSoftBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  insertBreakActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"insert.break\"\n    }\n  });\n}, insertInlineObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!context.schema.inlineObjects.some((inlineObject) => inlineObject.name === action.inlineObject.name)) {\n    console.error(\"Unable to insert unknown inline object\");\n    return;\n  }\n  if (!action.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [{\n      _type: action.inlineObject.name,\n      _key: context.keyGenerator(),\n      ...action.inlineObject.value ?? {}\n    }]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection) {\n    console.error(\"Unable to perform action without selection\", action);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", action);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...action.decorators ?? []]\n  });\n}, textBlockSetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    ...action.style ? {\n      style: action.style\n    } : {},\n    ...action.listItem ? {\n      listItem: action.listItem\n    } : {},\n    ...action.level ? {\n      level: action.level\n    } : {}\n  }, {\n    at\n  });\n}, textBlockUnsetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, action.props, {\n    at\n  });\n}, behaviorActionImplementations = {\n  \"annotation.add\": addAnnotationActionImplementation,\n  \"annotation.remove\": removeAnnotationActionImplementation,\n  \"annotation.toggle\": toggleAnnotationActionImplementation,\n  blur: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.blur(action.editor);\n  },\n  \"decorator.add\": addDecoratorActionImplementation,\n  \"decorator.remove\": removeDecoratorActionImplementation,\n  \"decorator.toggle\": toggleDecoratorActionImplementation,\n  focus: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.focus(action.editor);\n  },\n  \"delete.backward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteBackward)(action.editor, action.unit);\n  },\n  \"delete.forward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteForward)(action.editor, action.unit);\n  },\n  \"delete.block\": ({\n    action\n  }) => {\n    const range = toSlateRange({\n      anchor: {\n        path: action.blockPath,\n        offset: 0\n      },\n      focus: {\n        path: action.blockPath,\n        offset: 0\n      }\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(action.editor, {\n      at: range\n    });\n  },\n  \"delete.text\": ({\n    context,\n    action\n  }) => {\n    const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), anchor = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.anchor\n    }), focus = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.focus\n    });\n    if (!anchor || !focus) {\n      console.error(\"Unable to find anchor or focus selection point\");\n      return;\n    }\n    const range = toSlateRange({\n      anchor,\n      focus\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(action.editor, {\n      at: range\n    });\n  },\n  \"insert.block object\": insertBlockObjectActionImplementation,\n  \"insert.break\": insertBreakActionImplementation,\n  \"insert.inline object\": insertInlineObjectActionImplementation,\n  \"insert.soft break\": insertSoftBreakActionImplementation,\n  \"insert.span\": insertSpanActionImplementation,\n  \"insert.text\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.insertText)(action.editor, action.text);\n  },\n  \"insert.text block\": ({\n    context,\n    action\n  }) => {\n    const block = toSlateValue([{\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? \"normal\",\n      markDefs: [],\n      children: action.textBlock?.children?.map((child) => ({\n        ...child,\n        _key: context.keyGenerator()\n      })) ?? [{\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: \"\"\n      }]\n    }], {\n      schemaTypes: context.schema\n    })[0];\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement\n    });\n  },\n  effect: ({\n    action\n  }) => {\n    action.effect();\n  },\n  \"list item.add\": addListItemActionImplementation,\n  \"list item.remove\": removeListItemActionImplementation,\n  \"list item.toggle\": toggleListItemActionImplementation,\n  \"move.block\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [toSlatePath(action.to, action.editor)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block down\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block up\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]];\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(at))\n      return;\n    const to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  noop: () => {\n  },\n  select: ({\n    action\n  }) => {\n    const newSelection = toSlateRange(action.selection, action.editor);\n    newSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(action.editor);\n  },\n  \"select.previous block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select previous block without a selection\");\n      return;\n    }\n    const blockPath = action.editor.selection.focus.path.slice(0, 1);\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\");\n      return;\n    }\n    const previousBlockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(blockPath);\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, previousBlockPath);\n  },\n  \"select.next block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select next block without a selection\");\n      return;\n    }\n    const nextBlockPath = [action.editor.selection.focus.path.slice(0, 1)[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, nextBlockPath);\n  },\n  \"style.toggle\": toggleStyleActionImplementation,\n  \"style.add\": addStyleActionImplementation,\n  \"style.remove\": removeStyleActionImplementation,\n  \"text block.set\": textBlockSetActionImplementation,\n  \"text block.unset\": textBlockUnsetActionImplementation\n};\nfunction performAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.toggle\": {\n      behaviorActionImplementations[\"annotation.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.add\": {\n      behaviorActionImplementations[\"decorator.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.remove\": {\n      behaviorActionImplementations[\"decorator.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.block\": {\n      behaviorActionImplementations[\"delete.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.text\": {\n      behaviorActionImplementations[\"delete.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.span\": {\n      behaviorActionImplementations[\"insert.span\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text block\": {\n      behaviorActionImplementations[\"insert.text block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.add\": {\n      behaviorActionImplementations[\"list item.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.remove\": {\n      behaviorActionImplementations[\"list item.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block\": {\n      behaviorActionImplementations[\"move.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block down\": {\n      behaviorActionImplementations[\"move.block down\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block up\": {\n      behaviorActionImplementations[\"move.block up\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"noop\":\n      break;\n    case \"effect\": {\n      behaviorActionImplementations.effect({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.previous block\": {\n      behaviorActionImplementations[\"select.previous block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.next block\": {\n      behaviorActionImplementations[\"select.next block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.add\": {\n      behaviorActionImplementations[\"style.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.remove\": {\n      behaviorActionImplementations[\"style.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.set\": {\n      behaviorActionImplementations[\"text block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.unset\": {\n      behaviorActionImplementations[\"text block.unset\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      performDefaultAction({\n        context,\n        action\n      });\n  }\n}\nfunction performDefaultAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.add\": {\n      behaviorActionImplementations[\"annotation.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.remove\": {\n      behaviorActionImplementations[\"annotation.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"blur\": {\n      behaviorActionImplementations.blur({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.toggle\": {\n      behaviorActionImplementations[\"decorator.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.backward\": {\n      behaviorActionImplementations[\"delete.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.forward\": {\n      behaviorActionImplementations[\"delete.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"focus\": {\n      behaviorActionImplementations.focus({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block object\": {\n      behaviorActionImplementations[\"insert.block object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.inline object\": {\n      behaviorActionImplementations[\"insert.inline object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.break\": {\n      behaviorActionImplementations[\"insert.break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.soft break\": {\n      behaviorActionImplementations[\"insert.soft break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text\": {\n      behaviorActionImplementations[\"insert.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.toggle\": {\n      behaviorActionImplementations[\"list item.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      behaviorActionImplementations[\"style.toggle\"]({\n        context,\n        action\n      });\n  }\n}\nfunction getActiveDecorators({\n  schema,\n  slateEditorInstance\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value);\n  return ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(slateEditorInstance) ?? {}\n  }.marks ?? []).filter((mark) => decorators.includes(mark));\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behavior]))\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behavior), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update behaviors\"), new Set(event.behaviors))\n    }),\n    \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      schema: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update schema\"), event.schema)\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, [\"patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue((0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(event));\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingEvents: []\n    }),\n    \"handle behavior event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.b)(({\n      context,\n      event,\n      enqueue\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, [\"behavior event\", \"custom behavior event\"]);\n      const defaultAction = event.type === \"custom behavior event\" || event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"key.down\" || event.behaviorEvent.type === \"key.up\" || event.behaviorEvent.type === \"paste\" ? void 0 : {\n        ...event.behaviorEvent,\n        editor: event.editor\n      }, defaultActionCallback = event.type === \"behavior event\" ? event.defaultActionCallback : void 0, eventBehaviors = [...context.behaviors.values()].filter((behavior) => behavior.on === event.behaviorEvent.type);\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n        return;\n      }\n      const value = fromSlateValue(event.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(event.editor)), selection = toPortableTextRange(value, event.editor.selection, context.schema), editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value\n      };\n      let behaviorOverwritten = !1;\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n          context: editorContext,\n          event: event.behaviorEvent\n        });\n        if (!shouldRun)\n          continue;\n        const actionIntendSets = eventBehavior.actions.map((actionSet) => actionSet({\n          context: editorContext,\n          event: event.behaviorEvent\n        }, shouldRun));\n        for (const actionIntends of actionIntendSets)\n          behaviorOverwritten = behaviorOverwritten || actionIntends.length > 0 && actionIntends.some((actionIntend) => actionIntend.type !== \"effect\"), withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              for (const actionIntend of actionIntends) {\n                if (actionIntend.type === \"raise\") {\n                  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isCustomBehaviorEvent)(actionIntend.event) ? enqueue.raise({\n                    type: \"custom behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  }) : enqueue.raise({\n                    type: \"behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  });\n                  continue;\n                }\n                const action = {\n                  ...actionIntend,\n                  editor: event.editor\n                };\n                try {\n                  performAction({\n                    context,\n                    action\n                  });\n                } catch (error) {\n                  console.error(new Error(`Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n                  break;\n                }\n              }\n            });\n          }), event.editor.onChange();\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault();\n          break;\n        }\n      }\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n      }\n    })\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(input.behaviors ?? _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.coreBehaviors),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    value: input.value\n  }),\n  on: {\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    unset: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"value changed\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"invalid value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    error: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    selection: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)]\n    },\n    blurred: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    focused: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    loading: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n        type: \"loading\"\n      })\n    },\n    patches: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"done loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n        type: \"done loading\"\n      })\n    },\n    \"update behaviors\": {\n      actions: \"assign behaviors\"\n    },\n    \"update schema\": {\n      actions: \"assign schema\"\n    },\n    \"update value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        value: ({\n          event\n        }) => event.value\n      })\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          states: {\n            \"determine initial edit mode\": {\n              on: {\n                \"done syncing initial value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"custom behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"annotation.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            blur: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"custom.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => ({\n                type: \"custom.*\",\n                event\n              }))\n            },\n            \"decorator.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            focus: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"insert.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"list item.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            select: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"style.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          exit: [\"emit ready\"],\n          on: {\n            patch: {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing initial value\": {\n              target: \"pristine\"\n            }\n          }\n        },\n        pristine: {\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: \"normalizing\"\n                },\n                patch: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                },\n                mutation: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                }\n              }\n            },\n            normalizing: {\n              on: {\n                \"done normalizing\": {\n                  target: \"idle\"\n                },\n                patch: {\n                  actions: \"defer event\"\n                },\n                mutation: {\n                  actions: \"defer event\"\n                }\n              }\n            }\n          }\n        },\n        dirty: {\n          entry: [\"emit pending events\", \"clear pending events\"],\n          on: {\n            patch: {\n              actions: \"emit patch event\"\n            },\n            mutation: {\n              actions: \"emit mutation event\"\n            }\n          }\n        }\n      }\n    }\n  }\n});\nfunction getValue({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return fromSlateValue(slateEditorInstance.children, editorActorSnapshot.context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditorInstance));\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor._internal.slateEditor.instance || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor._internal.slateEditor.instance, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({\n        editorActorSnapshot,\n        slateEditorInstance\n      })\n    }\n  };\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditor(config) {\n  const editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_26__.A)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  });\n  return editorActor.start(), createEditorFromActor(editorActor);\n}\nfunction useCreateEditor(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];\n  let t1;\n  $[2] !== t0 ? (t1 = {\n    input: t0\n  }, $[2] = t0, $[3] = t1) : t1 = $[3];\n  const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(editorMachine, t1);\n  let t2, t3;\n  return $[4] !== editorActor ? (t3 = createEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;\n}\nfunction editorConfigToMachineInput(config) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)),\n    value: config.initialValue\n  };\n}\nfunction createEditorFromActor(editorActor) {\n  const slateEditor = createSlateEditor({\n    editorActor\n  }), editable = createEditableAPI(slateEditor.instance, editorActor);\n  return {\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (config) => (editorActor.send({\n      type: \"add behavior\",\n      behavior: config.behavior\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior: config.behavior\n      });\n    }),\n    send: (event) => {\n      editorActor.send(event);\n    },\n    on: (event, listener) => editorActor.on(\n      event,\n      // @ts-expect-error\n      listener\n    ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({}), PortableTextEditorSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditorSelection = () => {\n  const selection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorSelectionContext);\n  if (selection === void 0)\n    throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n  return selection;\n}, debug$5 = debugWithName(\"component:PortableTextEditor:SelectionProvider\");\nfunction PortableTextEditorSelectionProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t0, t1;\n  $[0] !== props.editorActor ? (t0 = () => {\n    debug$5(\"Subscribing to selection changes\");\n    const subscription = props.editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n        setSelection(event.selection);\n      });\n    });\n    return () => {\n      debug$5(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1);\n  let t2;\n  return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug$4 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_4__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_27__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  constructor(props) {\n    super(props), props.editor ? this.editor = props.editor : this.editor = createEditor({\n      keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n      schema: props.schemaType,\n      initialValue: props.value,\n      maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n      readOnly: props.readOnly\n    }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n      type: \"update schema\",\n      schema: this.schemaTypes\n    })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor: this.editor._internal.editorActor, onChange: (change) => {\n        this.props.editor || this.props.onChange(change), this.change$.next(change);\n      } }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor: this.editor._internal.editorActor, slateEditor: this.editor._internal.slateEditor.instance }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_16__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor: this.editor._internal.editorActor, children: this.props.children }) }) }) })\n    ] });\n  }\n  // Static API methods\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  static blur = (editor) => {\n    debug$4(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  static focus = (editor) => {\n    debug$4(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  static focusChild = (editor) => editor.editable?.focusChild();\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  static getValue = (editor) => editor.editable?.getValue();\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  static insertChild = (editor, type, value) => (debug$4(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  static select = (editor, selection) => {\n    debug$4(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  static toggleBlockStyle = (editor, blockStyle) => (debug$4(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  static toggleMark = (editor, mark) => {\n    debug$4(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  static getFragment = (editor) => (debug$4(\"Host getting fragment\"), editor.editable?.getFragment());\n  static undo = (editor) => {\n    debug$4(\"Host undoing\"), editor.editable?.undo();\n  };\n  static redo = (editor) => {\n    debug$4(\"Host redoing\"), editor.editable?.redo();\n  };\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(t0);\n  let t1, t2;\n  return $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = () => {\n    debug$4(\"Subscribing to editor changes\");\n    const sub = props.editorActor.on(\"*\", (event) => {\n      bb5: switch (event.type) {\n        case \"blurred\": {\n          handleChange({\n            type: \"blur\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"patch\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !0\n          });\n          break bb5;\n        }\n        case \"done loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !1\n          });\n          break bb5;\n        }\n        case \"focused\": {\n          handleChange({\n            type: \"focus\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"value changed\": {\n          handleChange({\n            type: \"value\",\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"invalid value\": {\n          handleChange({\n            type: \"invalidValue\",\n            resolution: event.resolution,\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"error\": {\n          handleChange({\n            ...event,\n            level: \"warning\"\n          });\n          break bb5;\n        }\n        case \"mutation\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"ready\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"selection\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"unset\":\n          handleChange(event);\n      }\n    });\n    return () => {\n      debug$4(\"Unsubscribing to changes\"), sub.unsubscribe();\n    };\n  }, t2 = [props.editorActor, handleChange], $[2] = handleChange, $[3] = props.editorActor, $[4] = t1, $[5] = t2) : (t1 = $[4], t2 = $[5]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t1, t2), null;\n}\nconst debug$3 = debugWithName(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation\n  } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => block ? [{\n    _key: block?._key\n  }, \"children\", {\n    _key: leaf._key\n  }] : [], [block, leaf._key]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => schemaTypes.decorators.map((dec) => dec.value), [schemaTypes.decorators]), marks = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))), [decoratorValues, leaf.marks]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => annotationMarks.map((mark_0) => !decoratorValues.includes(mark_0) && block?.markDefs?.find((def) => def._key === mark_0)).filter(Boolean), [annotationMarks, block, decoratorValues]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    debug$3(\"Setting selection and focus from range\");\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blur\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focus\", () => {\n      const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  const content = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    let returnedChildren = children;\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1) => {\n      const schemaType = schemaTypes.decorators.find((dec_0) => dec_0.value === mark_1);\n      if (schemaType && renderDecorator) {\n        const _props = Object.defineProperty({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          schemaType,\n          value: mark_1\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n          }\n        });\n        returnedChildren = renderDecorator(_props);\n      }\n    }), block && annotations.length > 0 && annotations.forEach((annotation) => {\n      const schemaType_0 = schemaTypes.annotations.find((t) => t.name === annotation._type);\n      if (schemaType_0)\n        if (renderAnnotation) {\n          const _props_0 = Object.defineProperty({\n            block,\n            children: returnedChildren,\n            editorElementRef: spanRef,\n            focused,\n            path,\n            selected,\n            schemaType: schemaType_0,\n            value: annotation\n          }, \"type\", {\n            enumerable: !1,\n            get() {\n              return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n          });\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: renderAnnotation(_props_0) });\n        } else\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultAnnotation, { annotation, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: returnedChildren }) });\n    }), block && renderChild)) {\n      const child = block.children.find((_child) => _child._key === leaf._key);\n      if (child) {\n        const _props_1 = Object.defineProperty({\n          annotations,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: returnedChildren }),\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n          }\n        });\n        returnedChildren = renderChild(_props_1);\n      }\n    }\n    return returnedChildren;\n  }, [annotations, block, children, focused, leaf, marks, path, renderAnnotation, renderChild, renderDecorator, schemaTypes.annotations, schemaTypes.decorators, schemaTypes.span, selected]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ...attributes, ref: spanRef, children: content }, leaf._key), [leaf, attributes, content]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$2 = debugWithName(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$2(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nconst debug$1 = debugWithName(\"plugin:withInsertData\");\nfunction createWithInsertData(editorActor, schemaTypes) {\n  return function(editor) {\n    const blockTypeName = schemaTypes.block.name, spanTypeName = schemaTypes.span.name, whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode, toPlainText = (blocks) => blocks.map((block) => editor.isTextBlock(block) ? block.children.map((child) => child._type === spanTypeName ? child.text : `[${schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || \"Object\"}]`).join(\"\") : `[${schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || \"Object\"}]`).join(`\n\n`);\n    return editor.setFragmentData = (data, originEvent) => {\n      const {\n        selection\n      } = editor;\n      if (!selection)\n        return;\n      const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(selection), startVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: start.path\n      }), endVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: end.path\n      });\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) && !startVoid)\n        return;\n      const domRange = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMRange(editor, selection);\n      let contents = domRange.cloneContents();\n      if (endVoid) {\n        const [voidNode] = endVoid, r = domRange.cloneRange(), domNode = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, voidNode);\n        r.setEndAfter(domNode), contents = r.cloneContents();\n      }\n      Array.from(contents.querySelectorAll(\"[data-slate-zero-width]\")).forEach((zw) => {\n        const isNewline = zw.getAttribute(\"data-slate-zero-width\") === \"n\";\n        zw.textContent = isNewline ? `\n` : \"\";\n      }), Array.from(contents.querySelectorAll(\"*\")).forEach((elm) => {\n        elm.removeAttribute(\"contentEditable\"), elm.removeAttribute(\"data-slate-inline\"), elm.removeAttribute(\"data-slate-leaf\"), elm.removeAttribute(\"data-slate-node\"), elm.removeAttribute(\"data-slate-spacer\"), elm.removeAttribute(\"data-slate-string\"), elm.removeAttribute(\"data-slate-zero-width\"), elm.removeAttribute(\"draggable\");\n        for (const key in elm.attributes)\n          elm.hasAttribute(key) && elm.removeAttribute(key);\n      });\n      const div = contents.ownerDocument.createElement(\"div\");\n      div.appendChild(contents), div.setAttribute(\"hidden\", \"true\"), contents.ownerDocument.body.appendChild(div);\n      const asHTML = div.innerHTML;\n      contents.ownerDocument.body.removeChild(div);\n      const fragment = editor.getFragment(), portableText = fromSlateValue(fragment, blockTypeName), asJSON = JSON.stringify(portableText), asPlainText = toPlainText(portableText);\n      data.clearData(), data.setData(\"text/plain\", asPlainText), data.setData(\"text/html\", asHTML), data.setData(\"application/json\", asJSON), data.setData(\"application/x-portable-text\", asJSON), debug$1(\"text\", asPlainText), data.setData(\"application/x-portable-text-event-origin\", originEvent || \"external\"), debug$1(\"Set fragment data\", asJSON, asHTML);\n    }, editor.insertPortableTextData = (data) => {\n      if (!editor.selection)\n        return !1;\n      const pText = data.getData(\"application/x-portable-text\"), origin = data.getData(\"application/x-portable-text-event-origin\");\n      if (debug$1(`Inserting portable text from ${origin} event`, pText), pText) {\n        const parsed = JSON.parse(pText);\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(editor, toSlateValue(parsed, {\n            schemaTypes\n          }), editorActor.getSnapshot().context.keyGenerator, spanTypeName, schemaTypes), validation = validateValue(parsed, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`;\n            return editorActor.send({\n              type: \"error\",\n              name: \"pasteError\",\n              description: errorDescription,\n              data: validation\n            }), debug$1(\"Invalid insert result\", validation), !1;\n          }\n          return _insertFragment(editor, slateValue, schemaTypes), !0;\n        }\n      }\n      return !1;\n    }, editor.insertTextOrHTMLData = (data) => {\n      if (!editor.selection)\n        return debug$1(\"No selection, not inserting\"), !1;\n      const html = data.getData(\"text/html\"), text = data.getData(\"text/plain\");\n      if (html || text) {\n        debug$1(\"Inserting data\", data);\n        let portableText, fragment, insertedType;\n        if (html) {\n          if (portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode\n          }).map((block) => (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n            blockTypeName\n          })), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"HTML\", portableText.length === 0)\n            return !1;\n        } else {\n          const textToHtml = `<html><body>${escapeHtml(text).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`;\n          portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(textToHtml, schemaTypes.portableText).map((block) => (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n            blockTypeName\n          })), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"text\";\n        }\n        const validation = validateValue(portableText, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\n${validation.resolution?.description}\nTry to insert as plain text (shift-paste) instead.`;\n          return editorActor.send({\n            type: \"error\",\n            name: \"pasteError\",\n            description: errorDescription,\n            data: validation\n          }), debug$1(\"Invalid insert result\", validation), !1;\n        }\n        return debug$1(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`), _insertFragment(editor, fragment, schemaTypes), !0;\n      }\n      return !1;\n    }, editor.insertData = (data) => {\n      editor.insertPortableTextData(data) || editor.insertTextOrHTMLData(data);\n    }, editor.insertFragmentData = (data) => {\n      const fragment = data.getData(\"application/x-portable-text\");\n      if (fragment) {\n        const parsed = JSON.parse(fragment);\n        return editor.insertFragment(parsed), !0;\n      }\n      return !1;\n    }, editor;\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction _regenerateKeys(editor, fragment, keyGenerator, spanTypeName, editorTypes) {\n  return fragment.map((node) => {\n    const newNode = {\n      ...node\n    };\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name);\n      if (annotations.length === 0) {\n        const {\n          markDefs,\n          ...NewNodeNoDefs\n        } = newNode;\n        return {\n          ...NewNodeNoDefs,\n          _key: keyGenerator()\n        };\n      }\n      if ((newNode.markDefs || []).some((def) => !annotations.includes(def._type))) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => annotations.includes(def._type));\n        return {\n          ...newNode,\n          markDefs: allowedAnnotations,\n          _key: keyGenerator()\n        };\n      }\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key, newKey = keyGenerator();\n        return newNode.children = newNode.children.map((child) => child._type === spanTypeName && editor.isTextSpan(child) ? {\n          ...child,\n          marks: child.marks && child.marks.includes(oldKey) ? [...child.marks].filter((mark) => mark !== oldKey).concat(newKey) : child.marks\n        } : child), {\n          ...def,\n          _key: newKey\n        };\n      });\n    }\n    const nodeWithNewKeys = {\n      ...newNode,\n      _key: keyGenerator()\n    };\n    return editor.isTextBlock(nodeWithNewKeys) && (nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n      ...child,\n      _key: keyGenerator()\n    }))), nodeWithNewKeys;\n  });\n}\nfunction _insertFragment(editor, fragment, schemaTypes) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection)\n      return;\n    const [focusBlock, focusPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n      depth: 1\n    });\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {\n        markDefs\n      } = focusBlock;\n      debug$1(\"Mixing markDefs of focusBlock and fragments[0] block\", markDefs, fragment[0].markDefs), lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(markDefs, fragment[0].markDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...fragment[0].markDefs || [], ...markDefs || []])\n      }, {\n        at: focusPath,\n        mode: \"lowest\",\n        voids: !1\n      });\n    }\n    isEqualToEmptyEditor(editor.children, schemaTypes) ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n      at: [0, 0]\n    }), editor.insertFragment(fragment), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [0]\n    })) : editor.insertFragment(fragment);\n  }), editor.onChange();\n}\nfunction withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations\n}) {\n  const originalApply = slateEditor.apply;\n  return slateEditor.apply = (op) => {\n    originalApply(op), !editorActor.getSnapshot().matches({\n      \"edit mode\": \"read only\"\n    }) && op.type !== \"set_selection\" && syncRangeDecorations(op);\n  }, () => {\n    slateEditor.apply = originalApply;\n  };\n}\nconst debug = debugWithName(\"component:Editable\"), PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n}, PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [rangeDecorationState, setRangeDecorationsState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const rangeDecorationsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(rangeDecorations), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), schemaTypes = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editorActor, (s_0) => s_0.context.schema), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlate)(), blockTypeName = schemaTypes.block.name;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    const withInsertData = createWithInsertData(editorActor, schemaTypes);\n    if (readOnly)\n      return debug(\"Editable is in read only mode\"), withInsertData(slateEditor);\n    const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n    return debug(\"Editable is in edit mode\"), withInsertData(withHotKeys(slateEditor));\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, schemaTypes, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Element, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, schemaTypes, spellCheck }), [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((lProps) => {\n    if (lProps.leaf._type === \"span\") {\n      let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Leaf, { ...lProps, editorActor, schemaTypes, renderAnnotation, renderChild, renderDecorator, readOnly });\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\")\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),\n          rendered\n        ] });\n      const decoration = lProps.leaf.rangeDecoration;\n      return decoration && (rendered = decoration.component({\n        children: rendered\n      })), rendered;\n    }\n    return lProps.children;\n  }, [editorActor, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, blockTypeName));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange(normalizedSelection, slateEditor);\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor]), syncRangeDecorations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((operation) => {\n    if (rangeDecorations && rangeDecorations.length > 0) {\n      const newSlateRanges = [];\n      if (rangeDecorations.forEach((rangeDecorationItem) => {\n        const slateRange_0 = toSlateRange(rangeDecorationItem.selection, slateEditor);\n        if (!slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(slateRange_0)) {\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: null,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n          return;\n        }\n        let newRange;\n        if (operation && (newRange = moveRangeByOperation(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {\n          const value = PortableTextEditor.getValue(portableTextEditor), newRangeSelection = toPortableTextRange(value, newRange, schemaTypes);\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: newRangeSelection,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && newSlateRanges.push({\n          ...newRange || slateRange_0,\n          rangeDecoration: rangeDecorationItem\n        });\n      }), newSlateRanges.length > 0) {\n        setRangeDecorationsState(newSlateRanges);\n        return;\n      }\n    }\n    setRangeDecorationsState((rangeDecorationState_0) => rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);\n  }, [portableTextEditor, rangeDecorations, schemaTypes, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      syncRangeDecorations(), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());\n  }, [syncRangeDecorations, syncedRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;\n  }, [rangeDecorations, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations\n    });\n    return () => teardown();\n  }, [editorActor, slateEditor, syncRangeDecorations]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event) => {\n    onCopy ? onCopy(event) !== void 0 && event.preventDefault() : event.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"copy\",\n        data: event.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event\n    });\n  }, [onCopy, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_0) => {\n    const value_0 = PortableTextEditor.getValue(portableTextEditor), path = toPortableTextRange(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_0,\n      value: value_0,\n      path,\n      schemaTypes\n    });\n    onPasteResult || !slateEditor.selection ? (event_0.preventDefault(), editorActor.send({\n      type: \"loading\"\n    }), Promise.resolve(onPasteResult).then((result_0) => {\n      debug(\"Custom paste function from client resolved\", result_0), !result_0 || !result_0.insert ? (debug(\"No result from custom paste handler, pasting normally\"), slateEditor.insertData(event_0.clipboardData)) : result_0.insert ? slateEditor.insertFragment(toSlateValue(result_0.insert, {\n        schemaTypes\n      })) : console.warn(\"Your onPaste function returned something unexpected:\", result_0);\n    }).catch((error) => (console.error(error), error)).finally(() => {\n      editorActor.send({\n        type: \"done loading\"\n      });\n    })) : event_0.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"paste\",\n        data: event_0.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event_0\n    }), debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_1) => {\n    if (onFocus && onFocus(event_1), !event_1.isDefaultPrevented()) {\n      const selection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === null && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_15__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n        type: \"focused\",\n        event: event_1\n      });\n      const newSelection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === newSelection && editorActor.send({\n        type: \"selection\",\n        selection\n      });\n    }\n  }, [editorActor, onFocus, portableTextEditor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_2) => {\n    onClick && onClick(event_2);\n    const focusBlockPath = slateEditor.selection ? slateEditor.selection.focus.path.slice(0, 1) : void 0, focusBlock = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(slateEditor, focusBlockPath) : void 0, [_, lastNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Node.last(slateEditor, []), lastBlockPath = lastNodePath.slice(0, 1), lastNodeFocused = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(lastBlockPath, focusBlockPath) : !1, lastBlockIsVoid = focusBlock ? !slateEditor.isTextBlock(focusBlock) : !1;\n    slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(slateEditor.selection) && lastNodeFocused && lastBlockIsVoid && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n      decorators: []\n    })), slateEditor.onChange());\n  }, [onClick, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_3) => {\n    onBlur && onBlur(event_3), event_3.isPropagationStopped() || editorActor.send({\n      type: \"blurred\",\n      event: event_3\n    });\n  }, [editorActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_4) => {\n    onBeforeInput && onBeforeInput(event_4);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_5) => {\n    props.onKeyDown && props.onKeyDown(event_5), event_5.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_5), event_5.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.down\",\n        keyboardEvent: {\n          key: event_5.key,\n          code: event_5.code,\n          altKey: event_5.altKey,\n          ctrlKey: event_5.ctrlKey,\n          metaKey: event_5.metaKey,\n          shiftKey: event_5.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_5\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_6) => {\n    props.onKeyUp && props.onKeyUp(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.up\",\n        keyboardEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]), decorate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(([, path_0]) => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path_0.length === 0)\n      return [];\n    const result_1 = rangeDecorationState.filter((item) => slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(item) ? path_0.length !== 2 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.focus.path, path_0) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.anchor.path, path_0) : slate__WEBPACK_IMPORTED_MODULE_15__.Range.intersection(item, {\n      anchor: {\n        path: path_0,\n        offset: 0\n      },\n      focus: {\n        path: path_0,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(item, path_0));\n    return result_1.length > 0 ? result_1 : [];\n  }, [slateEditor, schemaTypes, rangeDecorationState]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.Editable,\n    {\n      ...restProps,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nconst EditorContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(28), editor = useCreateEditor(props.initialConfig), editorActor = editor._internal.editorActor, slateEditor = editor._internal.slateEditor;\n  let t0, t1;\n  $[0] !== editor ? (t1 = new PortableTextEditor({\n    editor\n  }), $[0] = editor, $[1] = t1) : t1 = $[1], t0 = t1;\n  const portableTextEditor = t0;\n  let t2;\n  $[2] !== portableTextEditor.change$ ? (t2 = (change) => {\n    portableTextEditor.change$.next(change);\n  }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor, onChange: t2 }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];\n  let t4;\n  $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor, slateEditor: slateEditor.instance }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor, children: props.children }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor, children: t5 }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];\n  let t7;\n  $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_16__.Slate, { editor: slateEditor.instance, initialValue: slateEditor.initialValue, children: t6 }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];\n  let t8;\n  $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: editorActor, children: t7 }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];\n  let t9;\n  return $[23] !== editor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(EditorContext.Provider, { value: editor, children: [\n    t3,\n    t4,\n    t8\n  ] }), $[23] = editor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;\n}\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_4__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4), editor = useEditor(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(props.on);\n  let t0, t1;\n  return $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, on], $[0] = editor, $[1] = on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQzRIO0FBQzNIO0FBQ2U7QUFDQztBQUNqQjtBQUNOO0FBQ3VJO0FBQ2M7QUFDMUU7QUFDakY7QUFDZTtBQUNUO0FBQ0g7QUFDbUI7QUFDbUQ7QUFDa0I7QUFDL0U7QUFDWTtBQUNwQjtBQUNnQjtBQUNWO0FBQ3lDO0FBQ1k7QUFDSTtBQUMzQztBQUNlO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGlDQUFpQztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsMERBQVU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRywyRUFBMkUsMERBQVU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLCtCQUErQiwyREFBVztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esb0NBQW9DLDZDQUFTO0FBQzdDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsNkJBQTZCLDZDQUFTO0FBQ3RDLE9BQU87QUFDUDtBQUNBO0FBQ0EsOEJBQThC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Q2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxP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akk7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsNkNBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFDLGdDQUFnQyxpRUFBYztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLCtGQUErRixnREFBUztBQUMzRztBQWFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcGktaW50ZXJncmF0ZS8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvaW5kZXguanM/MGNiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiQHNhbml0eS9zY2hlbWFcIjtcbmltcG9ydCB7IGRlZmluZVR5cGUsIGRlZmluZUZpZWxkLCBpc0tleVNlZ21lbnQsIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4gYXMgaXNQb3J0YWJsZVRleHRTcGFuJDEsIGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmltcG9ydCBzdGFydENhc2UgZnJvbSBcImxvZGFzaC5zdGFydGNhc2VcIjtcbmltcG9ydCB7IGpzeHMsIGpzeCwgRnJhZ21lbnQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VBY3RvclJlZiB9IGZyb20gXCJAeHN0YXRlL3JlYWN0XCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwibG9kYXNoL2lzRXF1YWwuanNcIjtcbmltcG9ydCBub29wIGZyb20gXCJsb2Rhc2gvbm9vcC5qc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgc3RhcnRUcmFuc2l0aW9uLCBDb21wb25lbnQsIHVzZUNhbGxiYWNrLCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBFZGl0b3IsIEVsZW1lbnQgYXMgRWxlbWVudCQxLCBSYW5nZSwgUG9pbnQsIFRleHQsIFBhdGgsIFRyYW5zZm9ybXMsIE9wZXJhdGlvbiwgTm9kZSwgY3JlYXRlRWRpdG9yIGFzIGNyZWF0ZUVkaXRvciQxLCBkZWxldGVCYWNrd2FyZCwgZGVsZXRlRm9yd2FyZCwgaW5zZXJ0VGV4dCB9IGZyb20gXCJzbGF0ZVwiO1xuaW1wb3J0IHsgdXNlU2xhdGVTdGF0aWMsIFJlYWN0RWRpdG9yLCB1c2VTZWxlY3RlZCwgd2l0aFJlYWN0LCBTbGF0ZSwgdXNlU2xhdGUsIEVkaXRhYmxlIH0gZnJvbSBcInNsYXRlLXJlYWN0XCI7XG5pbXBvcnQgZGVidWckayBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCB7IGMgfSBmcm9tIFwicmVhY3QtY29tcGlsZXItcnVudGltZVwiO1xuaW1wb3J0IHVuaXEgZnJvbSBcImxvZGFzaC91bmlxLmpzXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHVzZUVmZmVjdEV2ZW50IH0gZnJvbSBcInVzZS1lZmZlY3QtZXZlbnRcIjtcbmltcG9ydCB7IHNldHVwLCBlbWl0LCBhc3NpZ24sIGZyb21DYWxsYmFjaywgYXNzZXJ0RXZlbnQsIGVucXVldWVBY3Rpb25zLCBjcmVhdGVBY3RvciB9IGZyb20gXCJ4c3RhdGVcIjtcbmltcG9ydCB7IHVuc2V0LCBzZXQsIHNldElmTWlzc2luZywgaW5zZXJ0LCBkaWZmTWF0Y2hQYXRjaCBhcyBkaWZmTWF0Y2hQYXRjaCQxLCBhcHBseUFsbCB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L3BhdGNoZXNcIjtcbmltcG9ydCBmbGF0dGVuIGZyb20gXCJsb2Rhc2gvZmxhdHRlbi5qc1wiO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC9pc1BsYWluT2JqZWN0LmpzXCI7XG5pbXBvcnQgZ2V0IGZyb20gXCJsb2Rhc2gvZ2V0LmpzXCI7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSBcImxvZGFzaC9pc1VuZGVmaW5lZC5qc1wiO1xuaW1wb3J0IG9taXRCeSBmcm9tIFwibG9kYXNoL29taXRCeS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlR3VhcmRzIH0gZnJvbSBcIi4vX2NodW5rcy1lcy9zZWxlY3Rvci5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzXCI7XG5pbXBvcnQgeyBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50IH0gZnJvbSBcIi4vX2NodW5rcy1lcy91dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanNcIjtcbmltcG9ydCB7IGNvcmVCZWhhdmlvcnMsIGlzQ3VzdG9tQmVoYXZpb3JFdmVudCwgaXNIb3RrZXkgfSBmcm9tIFwiLi9fY2h1bmtzLWVzL2JlaGF2aW9yLmNvcmUuanNcIjtcbmltcG9ydCBnZXRSYW5kb21WYWx1ZXMgZnJvbSBcImdldC1yYW5kb20tdmFsdWVzLWVzbVwiO1xuaW1wb3J0IHsgaHRtbFRvQmxvY2tzLCBub3JtYWxpemVCbG9jayB9IGZyb20gXCJAc2FuaXR5L2Jsb2NrLXRvb2xzXCI7XG5mdW5jdGlvbiBjcmVhdGVFZGl0b3JTY2hlbWEocG9ydGFibGVUZXh0VHlwZSkge1xuICBpZiAoIXBvcnRhYmxlVGV4dFR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyICdwb3J0YWJsZXRleHRUeXBlJyBtaXNzaW5nIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IGJsb2NrVHlwZSA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbmQoZmluZEJsb2NrVHlwZSk7XG4gIGlmICghYmxvY2tUeXBlKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJsb2NrIHR5cGUgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgY2hpbGRyZW5GaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGZpZWxkKSA9PiBmaWVsZC5uYW1lID09PSBcImNoaWxkcmVuXCIpO1xuICBpZiAoIWNoaWxkcmVuRmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hpbGRyZW4gZmllbGQgZm9yIGJsb2NrIHR5cGUgZm91bmQgaW4gc2NoZW1hIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IG9mVHlwZSA9IGNoaWxkcmVuRmllbGQudHlwZS5vZjtcbiAgaWYgKCFvZlR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWQgdHlwZXMgZm9yIGJsb2NrIGNoaWxkcmVuIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3Qgc3BhblR5cGUgPSBvZlR5cGUuZmluZCgobWVtYmVyVHlwZSkgPT4gbWVtYmVyVHlwZS5uYW1lID09PSBcInNwYW5cIik7XG4gIGlmICghc3BhblR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3BhbiB0eXBlIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgaW5saW5lT2JqZWN0VHlwZXMgPSBvZlR5cGUuZmlsdGVyKChtZW1iZXJUeXBlKSA9PiBtZW1iZXJUeXBlLm5hbWUgIT09IFwic3BhblwiKSB8fCBbXSwgYmxvY2tPYmplY3RUeXBlcyA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbHRlcigoZmllbGQpID0+IGZpZWxkLm5hbWUgIT09IGJsb2NrVHlwZS5uYW1lKSB8fCBbXTtcbiAgcmV0dXJuIHtcbiAgICBzdHlsZXM6IHJlc29sdmVFbmFibGVkU3R5bGVzKGJsb2NrVHlwZSksXG4gICAgZGVjb3JhdG9yczogcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSxcbiAgICBsaXN0czogcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSxcbiAgICBibG9jazogYmxvY2tUeXBlLFxuICAgIHNwYW46IHNwYW5UeXBlLFxuICAgIHBvcnRhYmxlVGV4dDogcG9ydGFibGVUZXh0VHlwZSxcbiAgICBpbmxpbmVPYmplY3RzOiBpbmxpbmVPYmplY3RUeXBlcyxcbiAgICBibG9ja09iamVjdHM6IGJsb2NrT2JqZWN0VHlwZXMsXG4gICAgYW5ub3RhdGlvbnM6IHNwYW5UeXBlLmFubm90YXRpb25zXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRW5hYmxlZFN0eWxlcyhibG9ja1R5cGUpIHtcbiAgY29uc3Qgc3R5bGVGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJzdHlsZVwiKTtcbiAgaWYgKCFzdHlsZUZpZWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkEgZmllbGQgd2l0aCBuYW1lICdzdHlsZScgaXMgbm90IGRlZmluZWQgaW4gdGhlIGJsb2NrIHR5cGUgKHJlcXVpcmVkKS5cIik7XG4gIGNvbnN0IHRleHRTdHlsZXMgPSBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucy5saXN0Py5maWx0ZXIoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSk7XG4gIGlmICghdGV4dFN0eWxlcyB8fCB0ZXh0U3R5bGVzLmxlbmd0aCA9PT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUgZmllbGRzIG5lZWQgYXQgbGVhc3Qgb25lIHN0eWxlIGRlZmluZWQuIEkuZToge3RpdGxlOiAnTm9ybWFsJywgdmFsdWU6ICdub3JtYWwnfS5cIik7XG4gIHJldHVybiB0ZXh0U3R5bGVzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSB7XG4gIHJldHVybiBzcGFuVHlwZS5kZWNvcmF0b3JzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSB7XG4gIGNvbnN0IGxpc3RGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJsaXN0SXRlbVwiKTtcbiAgaWYgKCFsaXN0RmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBmaWVsZCB3aXRoIG5hbWUgJ2xpc3RJdGVtJyBpcyBub3QgZGVmaW5lZCBpbiB0aGUgYmxvY2sgdHlwZSAocmVxdWlyZWQpLlwiKTtcbiAgY29uc3QgbGlzdEl0ZW1zID0gbGlzdEZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBsaXN0RmllbGQudHlwZS5vcHRpb25zLmxpc3QuZmlsdGVyKChsaXN0KSA9PiBsaXN0LnZhbHVlKTtcbiAgaWYgKCFsaXN0SXRlbXMpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGxpc3QgZmllbGQgbmVlZCBhdCBsZWFzdCB0byBiZSBhbiBlbXB0eSBhcnJheVwiKTtcbiAgcmV0dXJuIGxpc3RJdGVtcztcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja1R5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZS50eXBlID8gZmluZEJsb2NrVHlwZSh0eXBlLnR5cGUpIDogdHlwZS5uYW1lID09PSBcImJsb2NrXCIgPyB0eXBlIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShkZWZpbml0aW9uKSB7XG4gIHJldHVybiBkZWZpbml0aW9uO1xufVxuZnVuY3Rpb24gY29tcGlsZVNjaGVtYURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBibG9ja09iamVjdHMgPSBkZWZpbml0aW9uPy5ibG9ja09iamVjdHM/Lm1hcCgoYmxvY2tPYmplY3QpID0+IGRlZmluZVR5cGUoe1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgLy8gVmVyeSBuYWl2ZSB3YXkgdG8gd29yayBhcm91bmQgYFNhbml0eVNjaGVtYS5jb21waWxlYCBhZGRpbmcgZGVmYXVsdFxuICAgIC8vIGZpZWxkcyB0byBvYmplY3RzIHdpdGggdGhlIG5hbWUgYGltYWdlYFxuICAgIG5hbWU6IGJsb2NrT2JqZWN0Lm5hbWUgPT09IFwiaW1hZ2VcIiA/IFwidG1wLWltYWdlXCIgOiBibG9ja09iamVjdC5uYW1lLFxuICAgIHRpdGxlOiBibG9ja09iamVjdC50aXRsZSxcbiAgICBmaWVsZHM6IFtdXG4gIH0pKSA/PyBbXSwgaW5saW5lT2JqZWN0cyA9IGRlZmluaXRpb24/LmlubGluZU9iamVjdHM/Lm1hcCgoaW5saW5lT2JqZWN0KSA9PiBkZWZpbmVUeXBlKHtcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIG5hbWU6IGlubGluZU9iamVjdC5uYW1lLFxuICAgIHRpdGxlOiBpbmxpbmVPYmplY3QudGl0bGUsXG4gICAgZmllbGRzOiBbXVxuICB9KSkgPz8gW10sIHBvcnRhYmxlVGV4dFNjaGVtYSA9IGRlZmluZUZpZWxkKHtcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgbmFtZTogXCJwb3J0YWJsZS10ZXh0XCIsXG4gICAgb2Y6IFsuLi5ibG9ja09iamVjdHMubWFwKChibG9ja09iamVjdCkgPT4gKHtcbiAgICAgIHR5cGU6IGJsb2NrT2JqZWN0Lm5hbWVcbiAgICB9KSksIHtcbiAgICAgIHR5cGU6IFwiYmxvY2tcIixcbiAgICAgIG5hbWU6IFwiYmxvY2tcIixcbiAgICAgIG9mOiBpbmxpbmVPYmplY3RzLm1hcCgoaW5saW5lT2JqZWN0KSA9PiAoe1xuICAgICAgICB0eXBlOiBpbmxpbmVPYmplY3QubmFtZVxuICAgICAgfSkpLFxuICAgICAgbWFya3M6IHtcbiAgICAgICAgZGVjb3JhdG9yczogZGVmaW5pdGlvbj8uZGVjb3JhdG9ycz8ubWFwKChkZWNvcmF0b3IpID0+ICh7XG4gICAgICAgICAgdGl0bGU6IGRlY29yYXRvci50aXRsZSA/PyBzdGFydENhc2UoZGVjb3JhdG9yLm5hbWUpLFxuICAgICAgICAgIHZhbHVlOiBkZWNvcmF0b3IubmFtZVxuICAgICAgICB9KSkgPz8gW10sXG4gICAgICAgIGFubm90YXRpb25zOiBkZWZpbml0aW9uPy5hbm5vdGF0aW9ucz8ubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgICAgICAgIG5hbWU6IGFubm90YXRpb24ubmFtZSxcbiAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHRpdGxlOiBhbm5vdGF0aW9uLnRpdGxlXG4gICAgICAgIH0pKSA/PyBbXVxuICAgICAgfSxcbiAgICAgIGxpc3RzOiBkZWZpbml0aW9uPy5saXN0cz8ubWFwKChsaXN0KSA9PiAoe1xuICAgICAgICB2YWx1ZTogbGlzdC5uYW1lLFxuICAgICAgICB0aXRsZTogbGlzdC50aXRsZSA/PyBzdGFydENhc2UobGlzdC5uYW1lKVxuICAgICAgfSkpID8/IFtdLFxuICAgICAgc3R5bGVzOiBkZWZpbml0aW9uPy5zdHlsZXM/Lm1hcCgoc3R5bGUpID0+ICh7XG4gICAgICAgIHZhbHVlOiBzdHlsZS5uYW1lLFxuICAgICAgICB0aXRsZTogc3R5bGUudGl0bGUgPz8gc3RhcnRDYXNlKHN0eWxlLm5hbWUpXG4gICAgICB9KSkgPz8gW11cbiAgICB9XVxuICB9KSwgc2NoZW1hID0gU2NoZW1hLmNvbXBpbGUoe1xuICAgIHR5cGVzOiBbcG9ydGFibGVUZXh0U2NoZW1hLCAuLi5ibG9ja09iamVjdHMsIC4uLmlubGluZU9iamVjdHNdXG4gIH0pLmdldChcInBvcnRhYmxlLXRleHRcIiksIHB0ZVNjaGVtYSA9IGNyZWF0ZUVkaXRvclNjaGVtYShzY2hlbWEpO1xuICByZXR1cm4ge1xuICAgIC4uLnB0ZVNjaGVtYSxcbiAgICBibG9ja09iamVjdHM6IHB0ZVNjaGVtYS5ibG9ja09iamVjdHMubWFwKChibG9ja09iamVjdCkgPT4gYmxvY2tPYmplY3QubmFtZSA9PT0gXCJ0bXAtaW1hZ2VcIiA/IHtcbiAgICAgIC4uLmJsb2NrT2JqZWN0LFxuICAgICAgbmFtZTogXCJpbWFnZVwiLFxuICAgICAgdHlwZToge1xuICAgICAgICAuLi5ibG9ja09iamVjdC50eXBlLFxuICAgICAgICBuYW1lOiBcImltYWdlXCJcbiAgICAgIH1cbiAgICB9IDogYmxvY2tPYmplY3QpXG4gIH07XG59XG5jb25zdCByb290TmFtZSA9IFwic2FuaXR5LXB0ZTpcIjtcbmRlYnVnJGsocm9vdE5hbWUpO1xuZnVuY3Rpb24gZGVidWdXaXRoTmFtZShuYW1lKSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IGAke3Jvb3ROYW1lfSR7bmFtZX1gO1xuICByZXR1cm4gZGVidWckayAmJiBkZWJ1ZyRrLmVuYWJsZWQobmFtZXNwYWNlKSA/IGRlYnVnJGsobmFtZXNwYWNlKSA6IGRlYnVnJGsocm9vdE5hbWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlS2V5ZWRQYXRoKHBvaW50LCB2YWx1ZSwgdHlwZXMpIHtcbiAgY29uc3QgYmxvY2tQYXRoID0gW3BvaW50LnBhdGhbMF1dO1xuICBpZiAoIXZhbHVlKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBibG9jayA9IHZhbHVlW2Jsb2NrUGF0aFswXV07XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGtleWVkQmxvY2tQYXRoID0gW3tcbiAgICBfa2V5OiBibG9jay5fa2V5XG4gIH1dO1xuICBpZiAoYmxvY2suX3R5cGUgIT09IHR5cGVzLmJsb2NrLm5hbWUpXG4gICAgcmV0dXJuIGtleWVkQmxvY2tQYXRoO1xuICBsZXQga2V5ZWRDaGlsZFBhdGg7XG4gIGNvbnN0IGNoaWxkUGF0aCA9IHBvaW50LnBhdGguc2xpY2UoMCwgMiksIGNoaWxkID0gQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgJiYgYmxvY2suY2hpbGRyZW5bY2hpbGRQYXRoWzFdXTtcbiAgcmV0dXJuIGNoaWxkICYmIChrZXllZENoaWxkUGF0aCA9IFtcImNoaWxkcmVuXCIsIHtcbiAgICBfa2V5OiBjaGlsZC5fa2V5XG4gIH1dKSwga2V5ZWRDaGlsZFBhdGggPyBbLi4ua2V5ZWRCbG9ja1BhdGgsIC4uLmtleWVkQ2hpbGRQYXRoXSA6IGtleWVkQmxvY2tQYXRoO1xufVxuZnVuY3Rpb24gdG9TbGF0ZVBhdGgocGF0aCwgZWRpdG9yKSB7XG4gIGlmICghZWRpdG9yKVxuICAgIHJldHVybiBbXTtcbiAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IFtdLFxuICAgIG1hdGNoOiAobikgPT4gaXNLZXlTZWdtZW50KHBhdGhbMF0pICYmIG4uX2tleSA9PT0gcGF0aFswXS5fa2V5XG4gIH0pKVswXSB8fCBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWJsb2NrIHx8ICFFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSlcbiAgICByZXR1cm4gW107XG4gIGlmIChlZGl0b3IuaXNWb2lkKGJsb2NrKSlcbiAgICByZXR1cm4gW2Jsb2NrUGF0aFswXSwgMF07XG4gIGNvbnN0IGNoaWxkUGF0aCA9IFtwYXRoWzJdXSwgY2hpbGRJbmRleCA9IGJsb2NrLmNoaWxkcmVuLmZpbmRJbmRleCgoY2hpbGQpID0+IGlzRXF1YWwoW3tcbiAgICBfa2V5OiBjaGlsZC5fa2V5XG4gIH1dLCBjaGlsZFBhdGgpKTtcbiAgaWYgKGNoaWxkSW5kZXggPj0gMCAmJiBibG9jay5jaGlsZHJlbltjaGlsZEluZGV4XSkge1xuICAgIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW5bY2hpbGRJbmRleF07XG4gICAgcmV0dXJuIEVsZW1lbnQkMS5pc0VsZW1lbnQoY2hpbGQpICYmIGVkaXRvci5pc1ZvaWQoY2hpbGQpID8gYmxvY2tQYXRoLmNvbmNhdChjaGlsZEluZGV4KS5jb25jYXQoMCkgOiBibG9ja1BhdGguY29uY2F0KGNoaWxkSW5kZXgpO1xuICB9XG4gIHJldHVybiBbYmxvY2tQYXRoWzBdLCAwXTtcbn1cbmZ1bmN0aW9uIHRvUG9ydGFibGVUZXh0UmFuZ2UodmFsdWUsIHJhbmdlLCB0eXBlcykge1xuICBpZiAoIXJhbmdlKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgYW5jaG9yID0gbnVsbCwgZm9jdXMgPSBudWxsO1xuICBjb25zdCBhbmNob3JQYXRoID0gcmFuZ2UuYW5jaG9yICYmIGNyZWF0ZUtleWVkUGF0aChyYW5nZS5hbmNob3IsIHZhbHVlLCB0eXBlcyk7XG4gIGFuY2hvclBhdGggJiYgcmFuZ2UuYW5jaG9yICYmIChhbmNob3IgPSB7XG4gICAgcGF0aDogYW5jaG9yUGF0aCxcbiAgICBvZmZzZXQ6IHJhbmdlLmFuY2hvci5vZmZzZXRcbiAgfSk7XG4gIGNvbnN0IGZvY3VzUGF0aCA9IHJhbmdlLmZvY3VzICYmIGNyZWF0ZUtleWVkUGF0aChyYW5nZS5mb2N1cywgdmFsdWUsIHR5cGVzKTtcbiAgZm9jdXNQYXRoICYmIHJhbmdlLmZvY3VzICYmIChmb2N1cyA9IHtcbiAgICBwYXRoOiBmb2N1c1BhdGgsXG4gICAgb2Zmc2V0OiByYW5nZS5mb2N1cy5vZmZzZXRcbiAgfSk7XG4gIGNvbnN0IGJhY2t3YXJkID0gISEoUmFuZ2UuaXNSYW5nZShyYW5nZSkgJiYgUmFuZ2UuaXNCYWNrd2FyZChyYW5nZSkpO1xuICByZXR1cm4gYW5jaG9yICYmIGZvY3VzID8ge1xuICAgIGFuY2hvcixcbiAgICBmb2N1cyxcbiAgICBiYWNrd2FyZFxuICB9IDogbnVsbDtcbn1cbmZ1bmN0aW9uIHRvU2xhdGVSYW5nZShzZWxlY3Rpb24sIGVkaXRvcikge1xuICBpZiAoIXNlbGVjdGlvbiB8fCAhZWRpdG9yKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBhbmNob3IgPSB7XG4gICAgcGF0aDogdG9TbGF0ZVBhdGgoc2VsZWN0aW9uLmFuY2hvci5wYXRoLCBlZGl0b3IpLFxuICAgIG9mZnNldDogc2VsZWN0aW9uLmFuY2hvci5vZmZzZXRcbiAgfSwgZm9jdXMgPSB7XG4gICAgcGF0aDogdG9TbGF0ZVBhdGgoc2VsZWN0aW9uLmZvY3VzLnBhdGgsIGVkaXRvciksXG4gICAgb2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXMub2Zmc2V0XG4gIH07XG4gIHJldHVybiBmb2N1cy5wYXRoLmxlbmd0aCA9PT0gMCB8fCBhbmNob3IucGF0aC5sZW5ndGggPT09IDAgPyBudWxsIDogZm9jdXMgPyB7XG4gICAgYW5jaG9yLFxuICAgIGZvY3VzXG4gIH0gOiBudWxsO1xufVxuZnVuY3Rpb24gbW92ZVJhbmdlQnlPcGVyYXRpb24ocmFuZ2UsIG9wZXJhdGlvbikge1xuICBjb25zdCBhbmNob3IgPSBQb2ludC50cmFuc2Zvcm0ocmFuZ2UuYW5jaG9yLCBvcGVyYXRpb24pLCBmb2N1cyA9IFBvaW50LnRyYW5zZm9ybShyYW5nZS5mb2N1cywgb3BlcmF0aW9uKTtcbiAgcmV0dXJuIGFuY2hvciA9PT0gbnVsbCB8fCBmb2N1cyA9PT0gbnVsbCA/IG51bGwgOiBQb2ludC5lcXVhbHMoYW5jaG9yLCByYW5nZS5hbmNob3IpICYmIFBvaW50LmVxdWFscyhmb2N1cywgcmFuZ2UuZm9jdXMpID8gcmFuZ2UgOiB7XG4gICAgYW5jaG9yLFxuICAgIGZvY3VzXG4gIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVQb2ludChwb2ludCwgdmFsdWUpIHtcbiAgaWYgKCFwb2ludCB8fCAhdmFsdWUpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IG5ld1BhdGggPSBbXTtcbiAgbGV0IG5ld09mZnNldCA9IHBvaW50Lm9mZnNldCB8fCAwO1xuICBjb25zdCBibG9ja0tleSA9IHR5cGVvZiBwb2ludC5wYXRoWzBdID09IFwib2JqZWN0XCIgJiYgXCJfa2V5XCIgaW4gcG9pbnQucGF0aFswXSAmJiBwb2ludC5wYXRoWzBdLl9rZXksIGNoaWxkS2V5ID0gdHlwZW9mIHBvaW50LnBhdGhbMl0gPT0gXCJvYmplY3RcIiAmJiBcIl9rZXlcIiBpbiBwb2ludC5wYXRoWzJdICYmIHBvaW50LnBhdGhbMl0uX2tleSwgYmxvY2sgPSB2YWx1ZS5maW5kKChibGspID0+IGJsay5fa2V5ID09PSBibG9ja0tleSk7XG4gIGlmIChibG9jaylcbiAgICBuZXdQYXRoLnB1c2goe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH0pO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChibG9jayAmJiBwb2ludC5wYXRoWzFdID09PSBcImNoaWxkcmVuXCIpIHtcbiAgICBpZiAoIWJsb2NrLmNoaWxkcmVuIHx8IEFycmF5LmlzQXJyYXkoYmxvY2suY2hpbGRyZW4pICYmIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGNoaWxkID0gQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgJiYgYmxvY2suY2hpbGRyZW4uZmluZCgoY2xkKSA9PiBjbGQuX2tleSA9PT0gY2hpbGRLZXkpO1xuICAgIGlmIChjaGlsZClcbiAgICAgIG5ld1BhdGgucHVzaChcImNoaWxkcmVuXCIpLCBuZXdQYXRoLnB1c2goe1xuICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICB9KSwgbmV3T2Zmc2V0ID0gY2hpbGQudGV4dCAmJiBjaGlsZC50ZXh0Lmxlbmd0aCA+PSBwb2ludC5vZmZzZXQgPyBwb2ludC5vZmZzZXQgOiBjaGlsZC50ZXh0ICYmIGNoaWxkLnRleHQubGVuZ3RoIHx8IDA7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBuZXdQYXRoLFxuICAgIG9mZnNldDogbmV3T2Zmc2V0XG4gIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWxlY3Rpb24oc2VsZWN0aW9uLCB2YWx1ZSkge1xuICBpZiAoIXNlbGVjdGlvbiB8fCAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgbmV3QW5jaG9yID0gbnVsbCwgbmV3Rm9jdXMgPSBudWxsO1xuICBjb25zdCB7XG4gICAgYW5jaG9yLFxuICAgIGZvY3VzXG4gIH0gPSBzZWxlY3Rpb247XG4gIHJldHVybiBhbmNob3IgJiYgdmFsdWUuZmluZCgoYmxrKSA9PiBpc0VxdWFsKHtcbiAgICBfa2V5OiBibGsuX2tleVxuICB9LCBhbmNob3IucGF0aFswXSkpICYmIChuZXdBbmNob3IgPSBub3JtYWxpemVQb2ludChhbmNob3IsIHZhbHVlKSksIGZvY3VzICYmIHZhbHVlLmZpbmQoKGJsaykgPT4gaXNFcXVhbCh7XG4gICAgX2tleTogYmxrLl9rZXlcbiAgfSwgZm9jdXMucGF0aFswXSkpICYmIChuZXdGb2N1cyA9IG5vcm1hbGl6ZVBvaW50KGZvY3VzLCB2YWx1ZSkpLCBuZXdBbmNob3IgJiYgbmV3Rm9jdXMgPyB7XG4gICAgYW5jaG9yOiBuZXdBbmNob3IsXG4gICAgZm9jdXM6IG5ld0ZvY3VzLFxuICAgIGJhY2t3YXJkOiBzZWxlY3Rpb24uYmFja3dhcmRcbiAgfSA6IG51bGw7XG59XG5jb25zdCBWT0lEX0NISUxEX0tFWSA9IFwidm9pZC1jaGlsZFwiO1xuZnVuY3Rpb24ga2VlcE9iamVjdEVxdWFsaXR5KG9iamVjdCwga2V5TWFwKSB7XG4gIGNvbnN0IHZhbHVlID0ga2V5TWFwW29iamVjdC5fa2V5XTtcbiAgcmV0dXJuIHZhbHVlICYmIGlzRXF1YWwob2JqZWN0LCB2YWx1ZSkgPyB2YWx1ZSA6IChrZXlNYXBbb2JqZWN0Ll9rZXldID0gb2JqZWN0LCBvYmplY3QpO1xufVxuZnVuY3Rpb24gdG9TbGF0ZVZhbHVlKHZhbHVlLCB7XG4gIHNjaGVtYVR5cGVzXG59LCBrZXlNYXAgPSB7fSkge1xuICByZXR1cm4gdmFsdWUgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKGJsb2NrKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgX3R5cGUsXG4gICAgICBfa2V5LFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSBibG9jaywgdm9pZENoaWxkcmVuID0gW3tcbiAgICAgIF9rZXk6IFZPSURfQ0hJTERfS0VZLFxuICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgdGV4dDogXCJcIixcbiAgICAgIG1hcmtzOiBbXVxuICAgIH1dO1xuICAgIGlmIChibG9jayAmJiBibG9jay5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuYmxvY2submFtZSkge1xuICAgICAgY29uc3QgdGV4dEJsb2NrID0gYmxvY2s7XG4gICAgICBsZXQgaGFzSW5saW5lcyA9ICExO1xuICAgICAgY29uc3QgaGFzTWlzc2luZ1N0eWxlID0gdHlwZW9mIHRleHRCbG9jay5zdHlsZSA+IFwidVwiLCBoYXNNaXNzaW5nTWFya0RlZnMgPSB0eXBlb2YgdGV4dEJsb2NrLm1hcmtEZWZzID4gXCJ1XCIsIGhhc01pc3NpbmdDaGlsZHJlbiA9IHR5cGVvZiB0ZXh0QmxvY2suY2hpbGRyZW4gPiBcInVcIiwgY2hpbGRyZW4gPSAodGV4dEJsb2NrLmNoaWxkcmVuIHx8IFtdKS5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBfdHlwZTogY1R5cGUsXG4gICAgICAgICAgX2tleTogY0tleSxcbiAgICAgICAgICAuLi5jUmVzdFxuICAgICAgICB9ID0gY2hpbGQ7XG4gICAgICAgIHJldHVybiBjVHlwZSAhPT0gXCJzcGFuXCIgPyAoaGFzSW5saW5lcyA9ICEwLCBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgICAgIF90eXBlOiBjVHlwZSxcbiAgICAgICAgICBfa2V5OiBjS2V5LFxuICAgICAgICAgIGNoaWxkcmVuOiB2b2lkQ2hpbGRyZW4sXG4gICAgICAgICAgdmFsdWU6IGNSZXN0LFxuICAgICAgICAgIF9faW5saW5lOiAhMFxuICAgICAgICB9LCBrZXlNYXApKSA6IGNoaWxkO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gIWhhc01pc3NpbmdTdHlsZSAmJiAhaGFzTWlzc2luZ01hcmtEZWZzICYmICFoYXNNaXNzaW5nQ2hpbGRyZW4gJiYgIWhhc0lubGluZXMgJiYgRWxlbWVudCQxLmlzRWxlbWVudChibG9jaykgPyBibG9jayA6IChoYXNNaXNzaW5nU3R5bGUgJiYgKHJlc3Quc3R5bGUgPSBzY2hlbWFUeXBlcy5zdHlsZXNbMF0udmFsdWUpLCBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgICBfdHlwZSxcbiAgICAgICAgX2tleSxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIH0sIGtleU1hcCkpO1xuICAgIH1cbiAgICByZXR1cm4ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgIF90eXBlLFxuICAgICAgX2tleSxcbiAgICAgIGNoaWxkcmVuOiB2b2lkQ2hpbGRyZW4sXG4gICAgICB2YWx1ZTogcmVzdFxuICAgIH0sIGtleU1hcCk7XG4gIH0pIDogW107XG59XG5mdW5jdGlvbiBmcm9tU2xhdGVWYWx1ZSh2YWx1ZSwgdGV4dEJsb2NrVHlwZSwga2V5TWFwID0ge30pIHtcbiAgcmV0dXJuIHZhbHVlLm1hcCgoYmxvY2spID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBfa2V5LFxuICAgICAgX3R5cGVcbiAgICB9ID0gYmxvY2s7XG4gICAgaWYgKCFfa2V5IHx8ICFfdHlwZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIHZhbGlkIGJsb2NrXCIpO1xuICAgIGlmIChfdHlwZSA9PT0gdGV4dEJsb2NrVHlwZSAmJiBcImNoaWxkcmVuXCIgaW4gYmxvY2sgJiYgQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgJiYgX2tleSkge1xuICAgICAgbGV0IGhhc0lubGluZXMgPSAhMTtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gYmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgX3R5cGU6IF9jVHlwZVxuICAgICAgICB9ID0gY2hpbGQ7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gY2hpbGQgJiYgX2NUeXBlICE9PSBcInNwYW5cIikge1xuICAgICAgICAgIGhhc0lubGluZXMgPSAhMDtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICAgIF9rZXk6IGssXG4gICAgICAgICAgICBfdHlwZTogdCxcbiAgICAgICAgICAgIF9faW5saW5lOiBfaSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBfYyxcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICB9ID0gY2hpbGQ7XG4gICAgICAgICAgcmV0dXJuIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgLi4udixcbiAgICAgICAgICAgIF9rZXk6IGssXG4gICAgICAgICAgICBfdHlwZTogdFxuICAgICAgICAgIH0sIGtleU1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaGFzSW5saW5lcyA/IGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgIC4uLmJsb2NrLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgX2tleSxcbiAgICAgICAgX3R5cGVcbiAgICAgIH0sIGtleU1hcCkgOiBibG9jaztcbiAgICB9XG4gICAgY29uc3QgYmxvY2tWYWx1ZSA9IFwidmFsdWVcIiBpbiBibG9jayAmJiBibG9jay52YWx1ZTtcbiAgICByZXR1cm4ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgIF9rZXksXG4gICAgICBfdHlwZSxcbiAgICAgIC4uLnR5cGVvZiBibG9ja1ZhbHVlID09IFwib2JqZWN0XCIgPyBibG9ja1ZhbHVlIDoge31cbiAgICB9LCBrZXlNYXApO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzRXF1YWxUb0VtcHR5RWRpdG9yKGNoaWxkcmVuLCBzY2hlbWFUeXBlcykge1xuICByZXR1cm4gY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBjaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgY2hpbGRyZW4gJiYgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIEVsZW1lbnQkMS5pc0VsZW1lbnQoY2hpbGRyZW5bMF0pICYmIGNoaWxkcmVuWzBdLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lICYmIFwic3R5bGVcIiBpbiBjaGlsZHJlblswXSAmJiBjaGlsZHJlblswXS5zdHlsZSA9PT0gc2NoZW1hVHlwZXMuc3R5bGVzWzBdLnZhbHVlICYmICEoXCJsaXN0SXRlbVwiIGluIGNoaWxkcmVuWzBdKSAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuWzBdLmNoaWxkcmVuKSAmJiBjaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgVGV4dC5pc1RleHQoY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0pICYmIGNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLl90eXBlID09PSBcInNwYW5cIiAmJiAhY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ubWFya3M/LmpvaW4oXCJcIikgJiYgY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIjtcbn1cbmNvbnN0IElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgSVNfRFJBR0dJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lOR19CTE9DS19UQVJHRVRfUE9TSVRJT04gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBEZWZhdWx0T2JqZWN0ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0ICQgPSBjKDQpO1xuICBsZXQgdDA7XG4gICRbMF0gPT09IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpID8gKHQwID0ge1xuICAgIHVzZXJTZWxlY3Q6IFwibm9uZVwiXG4gIH0sICRbMF0gPSB0MCkgOiB0MCA9ICRbMF07XG4gIGxldCB0MTtcbiAgcmV0dXJuICRbMV0gIT09IHByb3BzLnZhbHVlLl9rZXkgfHwgJFsyXSAhPT0gcHJvcHMudmFsdWUuX3R5cGUgPyAodDEgPSAvKiBAX19QVVJFX18gKi8ganN4cyhcImRpdlwiLCB7IHN0eWxlOiB0MCwgY2hpbGRyZW46IFtcbiAgICBcIltcIixcbiAgICBwcm9wcy52YWx1ZS5fdHlwZSxcbiAgICBcIjogXCIsXG4gICAgcHJvcHMudmFsdWUuX2tleSxcbiAgICBcIl1cIlxuICBdIH0pLCAkWzFdID0gcHJvcHMudmFsdWUuX2tleSwgJFsyXSA9IHByb3BzLnZhbHVlLl90eXBlLCAkWzNdID0gdDEpIDogdDEgPSAkWzNdLCB0MTtcbn07XG5EZWZhdWx0T2JqZWN0LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0T2JqZWN0XCI7XG5jb25zdCBkZWJ1ZyRqID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudHM6RHJhZ2dhYmxlQmxvY2tcIiksIERyYWdnYWJsZUJsb2NrID0gKHQwKSA9PiB7XG4gIGNvbnN0ICQgPSBjKDUxKSwge1xuICAgIGNoaWxkcmVuLFxuICAgIGVsZW1lbnQsXG4gICAgcmVhZE9ubHksXG4gICAgYmxvY2tSZWZcbiAgfSA9IHQwLCBlZGl0b3IgPSB1c2VTbGF0ZVN0YXRpYygpLCBkcmFnR2hvc3RSZWYgPSB1c2VSZWYodm9pZCAwKSwgW2lzRHJhZ092ZXIsIHNldElzRHJhZ092ZXJdID0gdXNlU3RhdGUoITEpO1xuICBsZXQgdDEsIHQyO1xuICAkWzBdICE9PSBlZGl0b3IgfHwgJFsxXSAhPT0gZWxlbWVudCA/ICh0MiA9IEVkaXRvci5pc1ZvaWQoZWRpdG9yLCBlbGVtZW50KSwgJFswXSA9IGVkaXRvciwgJFsxXSA9IGVsZW1lbnQsICRbMl0gPSB0MikgOiB0MiA9ICRbMl0sIHQxID0gdDI7XG4gIGNvbnN0IGlzVm9pZCA9IHQxO1xuICBsZXQgdDMsIHQ0O1xuICAkWzNdICE9PSBlZGl0b3IgfHwgJFs0XSAhPT0gZWxlbWVudCA/ICh0NCA9IEVkaXRvci5pc0lubGluZShlZGl0b3IsIGVsZW1lbnQpLCAkWzNdID0gZWRpdG9yLCAkWzRdID0gZWxlbWVudCwgJFs1XSA9IHQ0KSA6IHQ0ID0gJFs1XSwgdDMgPSB0NDtcbiAgY29uc3QgaXNJbmxpbmUgPSB0MywgW2Jsb2NrRWxlbWVudCwgc2V0QmxvY2tFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xuICBsZXQgdDUsIHQ2O1xuICAkWzZdICE9PSBibG9ja1JlZiB8fCAkWzddICE9PSBlZGl0b3IgfHwgJFs4XSAhPT0gZWxlbWVudCA/ICh0NSA9ICgpID0+IHNldEJsb2NrRWxlbWVudChibG9ja1JlZiA/IGJsb2NrUmVmLmN1cnJlbnQgOiBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBlbGVtZW50KSksIHQ2ID0gW2VkaXRvciwgZWxlbWVudCwgYmxvY2tSZWZdLCAkWzZdID0gYmxvY2tSZWYsICRbN10gPSBlZGl0b3IsICRbOF0gPSBlbGVtZW50LCAkWzldID0gdDUsICRbMTBdID0gdDYpIDogKHQ1ID0gJFs5XSwgdDYgPSAkWzEwXSksIHVzZUVmZmVjdCh0NSwgdDYpO1xuICBsZXQgdDc7XG4gICRbMTFdICE9PSBibG9ja0VsZW1lbnQgfHwgJFsxMl0gIT09IGVkaXRvciB8fCAkWzEzXSAhPT0gZWxlbWVudCA/ICh0NyA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGlzTXlEcmFnT3ZlciA9IElTX0RSQUdHSU5HX0JMT0NLX0VMRU1FTlQuZ2V0KGVkaXRvcik7XG4gICAgaWYgKCFpc015RHJhZ092ZXIgfHwgIWJsb2NrRWxlbWVudClcbiAgICAgIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpLCBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibW92ZVwiLCBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVC5zZXQoZWRpdG9yLCBlbGVtZW50KTtcbiAgICBjb25zdCBlbGVtZW50UmVjdCA9IGJsb2NrRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgb2Zmc2V0ID0gZWxlbWVudFJlY3QudG9wLCBoZWlnaHQgPSBlbGVtZW50UmVjdC5oZWlnaHQsIFkgPSBldmVudC5wYWdlWSwgbG9jID0gTWF0aC5hYnMob2Zmc2V0IC0gWSk7XG4gICAgaWYgKGVsZW1lbnQgPT09IGVkaXRvci5jaGlsZHJlblswXSB8fCAobG9jIDwgaGVpZ2h0IC8gMiA/IElTX0RSQUdHSU5HX0JMT0NLX1RBUkdFVF9QT1NJVElPTi5zZXQoZWRpdG9yLCBcInRvcFwiKSA6IElTX0RSQUdHSU5HX0JMT0NLX1RBUkdFVF9QT1NJVElPTi5zZXQoZWRpdG9yLCBcImJvdHRvbVwiKSksIGlzTXlEcmFnT3ZlciA9PT0gZWxlbWVudCkge1xuICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSBcIm5vbmVcIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0SXNEcmFnT3ZlcighMCk7XG4gIH0sICRbMTFdID0gYmxvY2tFbGVtZW50LCAkWzEyXSA9IGVkaXRvciwgJFsxM10gPSBlbGVtZW50LCAkWzE0XSA9IHQ3KSA6IHQ3ID0gJFsxNF07XG4gIGNvbnN0IGhhbmRsZURyYWdPdmVyID0gdDc7XG4gIGxldCB0ODtcbiAgJFsxNV0gPT09IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpID8gKHQ4ID0gKCkgPT4ge1xuICAgIHNldElzRHJhZ092ZXIoITEpO1xuICB9LCAkWzE1XSA9IHQ4KSA6IHQ4ID0gJFsxNV07XG4gIGNvbnN0IGhhbmRsZURyYWdMZWF2ZSA9IHQ4O1xuICBsZXQgdDk7XG4gICRbMTZdICE9PSBlZGl0b3IgfHwgJFsxN10gIT09IGVsZW1lbnQgPyAodDkgPSAoZXZlbnRfMCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEJsb2NrID0gSVNfRFJBR0dJTkdfRUxFTUVOVF9UQVJHRVQuZ2V0KGVkaXRvcik7XG4gICAgaWYgKHRhcmdldEJsb2NrKSB7XG4gICAgICBJU19EUkFHR0lORy5zZXQoZWRpdG9yLCAhMSksIGV2ZW50XzAucHJldmVudERlZmF1bHQoKSwgZXZlbnRfMC5zdG9wUHJvcGFnYXRpb24oKSwgSVNfRFJBR0dJTkdfRUxFTUVOVF9UQVJHRVQuZGVsZXRlKGVkaXRvciksIGRyYWdHaG9zdFJlZi5jdXJyZW50ICYmIChkZWJ1ZyRqKFwiUmVtb3ZpbmcgZHJhZyBnaG9zdFwiKSwgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkcmFnR2hvc3RSZWYuY3VycmVudCkpO1xuICAgICAgY29uc3QgZHJhZ1Bvc2l0aW9uID0gSVNfRFJBR0dJTkdfQkxPQ0tfVEFSR0VUX1BPU0lUSU9OLmdldChlZGl0b3IpO1xuICAgICAgSVNfRFJBR0dJTkdfQkxPQ0tfVEFSR0VUX1BPU0lUSU9OLmRlbGV0ZShlZGl0b3IpO1xuICAgICAgbGV0IHRhcmdldFBhdGggPSBSZWFjdEVkaXRvci5maW5kUGF0aChlZGl0b3IsIHRhcmdldEJsb2NrKTtcbiAgICAgIGNvbnN0IG15UGF0aCA9IFJlYWN0RWRpdG9yLmZpbmRQYXRoKGVkaXRvciwgZWxlbWVudCksIGlzQmVmb3JlID0gUGF0aC5pc0JlZm9yZShteVBhdGgsIHRhcmdldFBhdGgpO1xuICAgICAgaWYgKGRyYWdQb3NpdGlvbiA9PT0gXCJib3R0b21cIiAmJiAhaXNCZWZvcmUpIHtcbiAgICAgICAgaWYgKHRhcmdldFBhdGhbMF0gPj0gZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBkZWJ1ZyRqKFwidGFyZ2V0IGlzIGFscmVhZHkgYXQgdGhlIGJvdHRvbSwgbm90IG1vdmluZ1wiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxQYXRoID0gdGFyZ2V0UGF0aDtcbiAgICAgICAgdGFyZ2V0UGF0aCA9IFBhdGgubmV4dCh0YXJnZXRQYXRoKSwgZGVidWckaihgQWRqdXN0aW5nIHRhcmdldFBhdGggZnJvbSAke0pTT04uc3RyaW5naWZ5KG9yaWdpbmFsUGF0aCl9IHRvICR7SlNPTi5zdHJpbmdpZnkodGFyZ2V0UGF0aCl9YCk7XG4gICAgICB9XG4gICAgICBpZiAoZHJhZ1Bvc2l0aW9uID09PSBcInRvcFwiICYmIGlzQmVmb3JlICYmIHRhcmdldFBhdGhbMF0gIT09IGVkaXRvci5jaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsUGF0aF8wID0gdGFyZ2V0UGF0aDtcbiAgICAgICAgdGFyZ2V0UGF0aCA9IFBhdGgucHJldmlvdXModGFyZ2V0UGF0aCksIGRlYnVnJGooYEFkanVzdGluZyB0YXJnZXRQYXRoIGZyb20gJHtKU09OLnN0cmluZ2lmeShvcmlnaW5hbFBhdGhfMCl9IHRvICR7SlNPTi5zdHJpbmdpZnkodGFyZ2V0UGF0aCl9YCk7XG4gICAgICB9XG4gICAgICBpZiAoUGF0aC5lcXVhbHModGFyZ2V0UGF0aCwgbXlQYXRoKSkge1xuICAgICAgICBldmVudF8wLnByZXZlbnREZWZhdWx0KCksIGRlYnVnJGooXCJ0YXJnZXRQYXRoIGFuZCBteVBhdGggaXMgdGhlIHNhbWUsIG5vdCBtb3ZpbmdcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlYnVnJGooYE1vdmluZyBlbGVtZW50ICR7ZWxlbWVudC5fa2V5fSBmcm9tIHBhdGggJHtKU09OLnN0cmluZ2lmeShteVBhdGgpfSB0byAke0pTT04uc3RyaW5naWZ5KHRhcmdldFBhdGgpfSAoJHtkcmFnUG9zaXRpb259KWApLCBUcmFuc2Zvcm1zLm1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IG15UGF0aCxcbiAgICAgICAgdG86IHRhcmdldFBhdGhcbiAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWckaihcIk5vIHRhcmdldCBlbGVtZW50LCBub3QgZG9pbmcgYW55dGhpbmdcIik7XG4gIH0sICRbMTZdID0gZWRpdG9yLCAkWzE3XSA9IGVsZW1lbnQsICRbMThdID0gdDkpIDogdDkgPSAkWzE4XTtcbiAgY29uc3QgaGFuZGxlRHJhZ0VuZCA9IHQ5O1xuICBsZXQgdDEwO1xuICAkWzE5XSAhPT0gZWRpdG9yIHx8ICRbMjBdICE9PSBlbGVtZW50ID8gKHQxMCA9IChldmVudF8xKSA9PiB7XG4gICAgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVC5nZXQoZWRpdG9yKSAmJiAoZGVidWckaihcIk9uIGRyb3AgKHByZXZlbnRlZClcIiwgZWxlbWVudCksIGV2ZW50XzEucHJldmVudERlZmF1bHQoKSwgZXZlbnRfMS5zdG9wUHJvcGFnYXRpb24oKSwgc2V0SXNEcmFnT3ZlcighMSkpO1xuICB9LCAkWzE5XSA9IGVkaXRvciwgJFsyMF0gPSBlbGVtZW50LCAkWzIxXSA9IHQxMCkgOiB0MTAgPSAkWzIxXTtcbiAgY29uc3QgaGFuZGxlRHJvcCA9IHQxMDtcbiAgbGV0IHQxMTtcbiAgJFsyMl0gIT09IGVkaXRvciB8fCAkWzIzXSAhPT0gZWxlbWVudCB8fCAkWzI0XSAhPT0gaXNWb2lkID8gKHQxMSA9IChldmVudF8yKSA9PiB7XG4gICAgaWYgKCFpc1ZvaWQpIHtcbiAgICAgIElTX0RSQUdHSU5HX0JMT0NLX0VMRU1FTlQuZGVsZXRlKGVkaXRvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIElTX0RSQUdHSU5HLnNldChlZGl0b3IsICEwKSwgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVC5zZXQoZWRpdG9yLCBlbGVtZW50KSwgZXZlbnRfMi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudF8yLnRhcmdldDtcbiAgICB0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAodGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSBcIjFcIik7XG4gIH0sICRbMjJdID0gZWRpdG9yLCAkWzIzXSA9IGVsZW1lbnQsICRbMjRdID0gaXNWb2lkLCAkWzI1XSA9IHQxMSkgOiB0MTEgPSAkWzI1XTtcbiAgY29uc3QgaGFuZGxlRHJhZyA9IHQxMTtcbiAgbGV0IHQxMjtcbiAgJFsyNl0gIT09IGJsb2NrRWxlbWVudCB8fCAkWzI3XSAhPT0gZWRpdG9yIHx8ICRbMjhdICE9PSBoYW5kbGVEcmFnIHx8ICRbMjldICE9PSBpc0lubGluZSB8fCAkWzMwXSAhPT0gaXNWb2lkID8gKHQxMiA9IChldmVudF8zKSA9PiB7XG4gICAgaWYgKCFpc1ZvaWQgfHwgaXNJbmxpbmUpIHtcbiAgICAgIGRlYnVnJGooXCJOb3QgZHJhZ2dpbmcgYmxvY2tcIiksIElTX0RSQUdHSU5HX0JMT0NLX0VMRU1FTlQuZGVsZXRlKGVkaXRvciksIElTX0RSQUdHSU5HLnNldChlZGl0b3IsICExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRlYnVnJGooXCJEcmFnIHN0YXJ0XCIpLCBJU19EUkFHR0lORy5zZXQoZWRpdG9yLCAhMCksIGV2ZW50XzMuZGF0YVRyYW5zZmVyICYmIChldmVudF8zLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwiYXBwbGljYXRpb24vcG9ydGFibGUtdGV4dFwiLCBcInNvbWV0aGluZ1wiKSwgZXZlbnRfMy5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiKSwgYmxvY2tFbGVtZW50ICYmIGJsb2NrRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBsZXQgZHJhZ0dob3N0ID0gYmxvY2tFbGVtZW50LmNsb25lTm9kZSghMCk7XG4gICAgICBjb25zdCBjdXN0b21HaG9zdCA9IGRyYWdHaG9zdC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtcHQtZHJhZy1naG9zdC1lbGVtZW50XVwiKTtcbiAgICAgIGlmIChjdXN0b21HaG9zdCAmJiAoZHJhZ0dob3N0ID0gY3VzdG9tR2hvc3QpLCBkcmFnR2hvc3Quc2V0QXR0cmlidXRlKFwiZGF0YS1kcmFnZ2VkXCIsIFwiXCIpLCBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIGRyYWdHaG9zdFJlZi5jdXJyZW50ID0gZHJhZ0dob3N0LCBkcmFnR2hvc3Quc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGRyYWdHaG9zdC5zdHlsZS5sZWZ0ID0gXCItOTk5OTlweFwiLCBkcmFnR2hvc3Quc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCIsIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHJhZ0dob3N0KTtcbiAgICAgICAgY29uc3QgcmVjdCA9IGJsb2NrRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgeCA9IGV2ZW50XzMuY2xpZW50WCAtIHJlY3QubGVmdCwgeSA9IGV2ZW50XzMuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICBkcmFnR2hvc3Quc3R5bGUud2lkdGggPSBgJHtyZWN0LndpZHRofXB4YCwgZHJhZ0dob3N0LnN0eWxlLmhlaWdodCA9IGAke3JlY3QuaGVpZ2h0fXB4YCwgZXZlbnRfMy5kYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGRyYWdHaG9zdCwgeCwgeSk7XG4gICAgICB9XG4gICAgfVxuICAgIGhhbmRsZURyYWcoZXZlbnRfMyk7XG4gIH0sICRbMjZdID0gYmxvY2tFbGVtZW50LCAkWzI3XSA9IGVkaXRvciwgJFsyOF0gPSBoYW5kbGVEcmFnLCAkWzI5XSA9IGlzSW5saW5lLCAkWzMwXSA9IGlzVm9pZCwgJFszMV0gPSB0MTIpIDogdDEyID0gJFszMV07XG4gIGNvbnN0IGhhbmRsZURyYWdTdGFydCA9IHQxMjtcbiAgbGV0IHQxMztcbiAgJFszMl0gIT09IGVkaXRvciB8fCAkWzMzXSAhPT0gaXNEcmFnT3ZlciA/ICh0MTMgPSBpc0RyYWdPdmVyICYmIGVkaXRvci5jaGlsZHJlblswXSA9PT0gSVNfRFJBR0dJTkdfRUxFTUVOVF9UQVJHRVQuZ2V0KGVkaXRvciksICRbMzJdID0gZWRpdG9yLCAkWzMzXSA9IGlzRHJhZ092ZXIsICRbMzRdID0gdDEzKSA6IHQxMyA9ICRbMzRdO1xuICBjb25zdCBpc0RyYWdnaW5nT3ZlckZpcnN0QmxvY2sgPSB0MTM7XG4gIGxldCB0MTQ7XG4gICRbMzVdICE9PSBlZGl0b3IgfHwgJFszNl0gIT09IGlzRHJhZ092ZXIgPyAodDE0ID0gaXNEcmFnT3ZlciAmJiBlZGl0b3IuY2hpbGRyZW5bZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCAtIDFdID09PSBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVC5nZXQoZWRpdG9yKSwgJFszNV0gPSBlZGl0b3IsICRbMzZdID0gaXNEcmFnT3ZlciwgJFszN10gPSB0MTQpIDogdDE0ID0gJFszN107XG4gIGNvbnN0IGlzRHJhZ2dpbmdPdmVyTGFzdEJsb2NrID0gdDE0LCBkcmFnUG9zaXRpb25fMCA9IElTX0RSQUdHSU5HX0JMT0NLX1RBUkdFVF9QT1NJVElPTi5nZXQoZWRpdG9yKSwgaXNEcmFnZ2luZ092ZXJUb3AgPSBpc0RyYWdnaW5nT3ZlckZpcnN0QmxvY2sgfHwgaXNEcmFnT3ZlciAmJiAhaXNEcmFnZ2luZ092ZXJGaXJzdEJsb2NrICYmICFpc0RyYWdnaW5nT3Zlckxhc3RCbG9jayAmJiBkcmFnUG9zaXRpb25fMCA9PT0gXCJ0b3BcIiwgaXNEcmFnZ2luZ092ZXJCb3R0b20gPSBpc0RyYWdnaW5nT3Zlckxhc3RCbG9jayB8fCBpc0RyYWdPdmVyICYmICFpc0RyYWdnaW5nT3ZlckZpcnN0QmxvY2sgJiYgIWlzRHJhZ2dpbmdPdmVyTGFzdEJsb2NrICYmIGRyYWdQb3NpdGlvbl8wID09PSBcImJvdHRvbVwiO1xuICBsZXQgdDE1LCB0MTY7XG4gICRbMzhdID09PSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSA/ICh0MTYgPSAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInB0LWRyb3AtaW5kaWNhdG9yXCIsIHN0eWxlOiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaGVpZ2h0OiAxLFxuICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgY3VycmVudENvbG9yXCIsXG4gICAgekluZGV4OiA1XG4gIH0gfSksICRbMzhdID0gdDE2KSA6IHQxNiA9ICRbMzhdLCB0MTUgPSB0MTY7XG4gIGNvbnN0IGRyb3BJbmRpY2F0b3IgPSB0MTU7XG4gIGlmIChyZWFkT25seSkge1xuICAgIGxldCB0MTcyO1xuICAgIHJldHVybiAkWzM5XSAhPT0gY2hpbGRyZW4gPyAodDE3MiA9IC8qIEBfX1BVUkVfXyAqLyBqc3goRnJhZ21lbnQsIHsgY2hpbGRyZW4gfSksICRbMzldID0gY2hpbGRyZW4sICRbNDBdID0gdDE3MikgOiB0MTcyID0gJFs0MF0sIHQxNzI7XG4gIH1cbiAgY29uc3QgdDE3ID0gaXNEcmFnZ2luZ092ZXJUb3AgJiYgZHJvcEluZGljYXRvciwgdDE4ID0gaXNEcmFnZ2luZ092ZXJCb3R0b20gJiYgZHJvcEluZGljYXRvcjtcbiAgbGV0IHQxOTtcbiAgcmV0dXJuICRbNDFdICE9PSBjaGlsZHJlbiB8fCAkWzQyXSAhPT0gaGFuZGxlRHJhZyB8fCAkWzQzXSAhPT0gaGFuZGxlRHJhZ0VuZCB8fCAkWzQ0XSAhPT0gaGFuZGxlRHJhZ092ZXIgfHwgJFs0NV0gIT09IGhhbmRsZURyYWdTdGFydCB8fCAkWzQ2XSAhPT0gaGFuZGxlRHJvcCB8fCAkWzQ3XSAhPT0gaXNWb2lkIHx8ICRbNDhdICE9PSB0MTcgfHwgJFs0OV0gIT09IHQxOCA/ICh0MTkgPSAvKiBAX19QVVJFX18gKi8ganN4cyhcImRpdlwiLCB7IGRyYWdnYWJsZTogaXNWb2lkLCBvbkRyYWdTdGFydDogaGFuZGxlRHJhZ1N0YXJ0LCBvbkRyYWc6IGhhbmRsZURyYWcsIG9uRHJhZ092ZXI6IGhhbmRsZURyYWdPdmVyLCBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLCBvbkRyYWdFbmQ6IGhhbmRsZURyYWdFbmQsIG9uRHJvcDogaGFuZGxlRHJvcCwgY2hpbGRyZW46IFtcbiAgICB0MTcsXG4gICAgY2hpbGRyZW4sXG4gICAgdDE4XG4gIF0gfSksICRbNDFdID0gY2hpbGRyZW4sICRbNDJdID0gaGFuZGxlRHJhZywgJFs0M10gPSBoYW5kbGVEcmFnRW5kLCAkWzQ0XSA9IGhhbmRsZURyYWdPdmVyLCAkWzQ1XSA9IGhhbmRsZURyYWdTdGFydCwgJFs0Nl0gPSBoYW5kbGVEcm9wLCAkWzQ3XSA9IGlzVm9pZCwgJFs0OF0gPSB0MTcsICRbNDldID0gdDE4LCAkWzUwXSA9IHQxOSkgOiB0MTkgPSAkWzUwXSwgdDE5O1xufTtcbkRyYWdnYWJsZUJsb2NrLmRpc3BsYXlOYW1lID0gXCJEcmFnZ2FibGVCbG9ja1wiO1xuZGVidWdXaXRoTmFtZShcImNvbXBvbmVudHM6RWxlbWVudFwiKTtcbmNvbnN0IEVNUFRZX0FOTk9UQVRJT05TID0gW10sIGlubGluZUJsb2NrU3R5bGUgPSB7XG4gIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJcbn0sIEVsZW1lbnQgPSAoe1xuICBhdHRyaWJ1dGVzLFxuICBjaGlsZHJlbixcbiAgZWxlbWVudCxcbiAgc2NoZW1hVHlwZXMsXG4gIHJlYWRPbmx5LFxuICByZW5kZXJCbG9jayxcbiAgcmVuZGVyQ2hpbGQsXG4gIHJlbmRlckxpc3RJdGVtLFxuICByZW5kZXJTdHlsZSxcbiAgc3BlbGxDaGVja1xufSkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSB1c2VTbGF0ZVN0YXRpYygpLCBzZWxlY3RlZCA9IHVzZVNlbGVjdGVkKCksIGJsb2NrUmVmID0gdXNlUmVmKG51bGwpLCBpbmxpbmVCbG9ja09iamVjdFJlZiA9IHVzZVJlZihudWxsKSwgZm9jdXNlZCA9IHNlbGVjdGVkICYmIGVkaXRvci5zZWxlY3Rpb24gJiYgUmFuZ2UuaXNDb2xsYXBzZWQoZWRpdG9yLnNlbGVjdGlvbikgfHwgITEsIHZhbHVlID0gdXNlTWVtbygoKSA9PiBmcm9tU2xhdGVWYWx1ZShbZWxlbWVudF0sIHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVswXSwgW2VkaXRvciwgZWxlbWVudCwgc2NoZW1hVHlwZXMuYmxvY2submFtZV0pO1xuICBsZXQgcmVuZGVyZWRCbG9jayA9IGNoaWxkcmVuLCBjbGFzc05hbWU7XG4gIGNvbnN0IGJsb2NrUGF0aCA9IHVzZU1lbW8oKCkgPT4gW3tcbiAgICBfa2V5OiBlbGVtZW50Ll9rZXlcbiAgfV0sIFtlbGVtZW50XSk7XG4gIGlmICh0eXBlb2YgZWxlbWVudC5fdHlwZSAhPSBcInN0cmluZ1wiKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGVsZW1lbnQgdG8gaGF2ZSBhIF90eXBlIHByb3BlcnR5XCIpO1xuICBpZiAodHlwZW9mIGVsZW1lbnQuX2tleSAhPSBcInN0cmluZ1wiKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGVsZW1lbnQgdG8gaGF2ZSBhIF9rZXkgcHJvcGVydHlcIik7XG4gIGlmIChlZGl0b3IuaXNJbmxpbmUoZWxlbWVudCkpIHtcbiAgICBjb25zdCBwYXRoID0gUmVhY3RFZGl0b3IuZmluZFBhdGgoZWRpdG9yLCBlbGVtZW50KSwgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgcGF0aCwge1xuICAgICAgZGVwdGg6IDFcbiAgICB9KSwgc2NoZW1hVHlwZSA9IHNjaGVtYVR5cGVzLmlubGluZU9iamVjdHMuZmluZCgoX3R5cGUpID0+IF90eXBlLm5hbWUgPT09IGVsZW1lbnQuX3R5cGUpO1xuICAgIGlmICghc2NoZW1hVHlwZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIHR5cGUgZm9yIGlubGluZSBibG9jayBlbGVtZW50XCIpO1xuICAgIGlmIChFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSkge1xuICAgICAgY29uc3QgZWxtUGF0aCA9IFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBlbGVtZW50Ll9rZXlcbiAgICAgIH1dO1xuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwic3BhblwiLCB7IC4uLmF0dHJpYnV0ZXMsIGNoaWxkcmVuOiBbXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4cyhcInNwYW5cIiwgeyBkcmFnZ2FibGU6ICFyZWFkT25seSwgY2xhc3NOYW1lOiBcInB0LWlubGluZS1vYmplY3RcIiwgXCJkYXRhLXRlc3RpZFwiOiBcInB0LWlubGluZS1vYmplY3RcIiwgcmVmOiBpbmxpbmVCbG9ja09iamVjdFJlZiwgc3R5bGU6IGlubGluZUJsb2NrU3R5bGUsIGNvbnRlbnRFZGl0YWJsZTogITEsIGNoaWxkcmVuOiBbXG4gICAgICAgICAgcmVuZGVyQ2hpbGQgJiYgcmVuZGVyQ2hpbGQoe1xuICAgICAgICAgICAgYW5ub3RhdGlvbnM6IEVNUFRZX0FOTk9UQVRJT05TLFxuICAgICAgICAgICAgLy8gVGhlc2UgaW5saW5lIG9iamVjdHMgY3VycmVudGx5IGRvZXNuJ3Qgc3VwcG9ydCBhbm5vdGF0aW9ucy4gVGhpcyBpcyBhIGxpbWl0YXRpb24gb2YgdGhlIGN1cnJlbnQgUFQgc3BlYy9tb2RlbC5cbiAgICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KERlZmF1bHRPYmplY3QsIHsgdmFsdWUgfSksXG4gICAgICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBpbmxpbmVCbG9ja09iamVjdFJlZixcbiAgICAgICAgICAgIGZvY3VzZWQsXG4gICAgICAgICAgICBwYXRoOiBlbG1QYXRoLFxuICAgICAgICAgICAgc2NoZW1hVHlwZSxcbiAgICAgICAgICAgIHNlbGVjdGVkLFxuICAgICAgICAgICAgdHlwZTogc2NoZW1hVHlwZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgIXJlbmRlckNoaWxkICYmIC8qIEBfX1BVUkVfXyAqLyBqc3goRGVmYXVsdE9iamVjdCwgeyB2YWx1ZSB9KVxuICAgICAgICBdIH0sIGVsZW1lbnQuX2tleSlcbiAgICAgIF0gfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJsb2NrIG5vdCBmb3VuZCFcIik7XG4gIH1cbiAgaWYgKGVsZW1lbnQuX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUpIHtcbiAgICBjbGFzc05hbWUgPSBcInB0LWJsb2NrIHB0LXRleHQtYmxvY2tcIjtcbiAgICBjb25zdCBpc0xpc3RJdGVtID0gXCJsaXN0SXRlbVwiIGluIGVsZW1lbnQsIHN0eWxlID0gXCJzdHlsZVwiIGluIGVsZW1lbnQgJiYgZWxlbWVudC5zdHlsZSB8fCBcIm5vcm1hbFwiO1xuICAgIGNsYXNzTmFtZSA9IGBwdC1ibG9jayBwdC10ZXh0LWJsb2NrIHB0LXRleHQtYmxvY2stc3R5bGUtJHtzdHlsZX1gO1xuICAgIGNvbnN0IGJsb2NrU3R5bGVUeXBlID0gc2NoZW1hVHlwZXMuc3R5bGVzLmZpbmQoKGl0ZW0pID0+IGl0ZW0udmFsdWUgPT09IHN0eWxlKTtcbiAgICByZW5kZXJTdHlsZSAmJiBibG9ja1N0eWxlVHlwZSAmJiAocmVuZGVyZWRCbG9jayA9IHJlbmRlclN0eWxlKHtcbiAgICAgIGJsb2NrOiBlbGVtZW50LFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBmb2N1c2VkLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogc3R5bGUsXG4gICAgICBwYXRoOiBibG9ja1BhdGgsXG4gICAgICBzY2hlbWFUeXBlOiBibG9ja1N0eWxlVHlwZSxcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGJsb2NrUmVmXG4gICAgfSkpO1xuICAgIGxldCBsZXZlbDtcbiAgICBpZiAoaXNMaXN0SXRlbSAmJiAodHlwZW9mIGVsZW1lbnQubGV2ZWwgPT0gXCJudW1iZXJcIiAmJiAobGV2ZWwgPSBlbGVtZW50LmxldmVsKSwgY2xhc3NOYW1lICs9IGAgcHQtbGlzdC1pdGVtIHB0LWxpc3QtaXRlbS0ke2VsZW1lbnQubGlzdEl0ZW19IHB0LWxpc3QtaXRlbS1sZXZlbC0ke2xldmVsIHx8IDF9YCksIGVkaXRvci5pc0xpc3RCbG9jayh2YWx1ZSkgJiYgaXNMaXN0SXRlbSAmJiBlbGVtZW50Lmxpc3RJdGVtKSB7XG4gICAgICBjb25zdCBsaXN0VHlwZSA9IHNjaGVtYVR5cGVzLmxpc3RzLmZpbmQoKGl0ZW1fMCkgPT4gaXRlbV8wLnZhbHVlID09PSBlbGVtZW50Lmxpc3RJdGVtKTtcbiAgICAgIHJlbmRlckxpc3RJdGVtICYmIGxpc3RUeXBlICYmIChyZW5kZXJlZEJsb2NrID0gcmVuZGVyTGlzdEl0ZW0oe1xuICAgICAgICBibG9jazogdmFsdWUsXG4gICAgICAgIGNoaWxkcmVuOiByZW5kZXJlZEJsb2NrLFxuICAgICAgICBmb2N1c2VkLFxuICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQubGlzdEl0ZW0sXG4gICAgICAgIHBhdGg6IGJsb2NrUGF0aCxcbiAgICAgICAgc2NoZW1hVHlwZTogbGlzdFR5cGUsXG4gICAgICAgIGxldmVsOiB2YWx1ZS5sZXZlbCB8fCAxLFxuICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBibG9ja1JlZlxuICAgICAgfSkpO1xuICAgIH1cbiAgICBjb25zdCByZW5kZXJQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICBjaGlsZHJlbjogcmVuZGVyZWRCbG9jayxcbiAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGJsb2NrUmVmLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIGxldmVsLFxuICAgICAgbGlzdEl0ZW06IGlzTGlzdEl0ZW0gPyBlbGVtZW50Lmxpc3RJdGVtIDogdm9pZCAwLFxuICAgICAgcGF0aDogYmxvY2tQYXRoLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICBzdHlsZSxcbiAgICAgIHNjaGVtYVR5cGU6IHNjaGVtYVR5cGVzLmJsb2NrLFxuICAgICAgdmFsdWVcbiAgICB9LCBcInR5cGVcIiwge1xuICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXCJQcm9wZXJ0eSAndHlwZScgaXMgZGVwcmVjYXRlZCwgdXNlICdzY2hlbWFUeXBlJyBpbnN0ZWFkLlwiKSwgc2NoZW1hVHlwZXMuYmxvY2s7XG4gICAgICB9XG4gICAgfSksIHByb3BzT3JEZWZhdWx0UmVuZGVyZWQgPSByZW5kZXJCbG9jayA/IHJlbmRlckJsb2NrKHJlbmRlclByb3BzKSA6IGNoaWxkcmVuO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHsgLi4uYXR0cmlidXRlcywgY2xhc3NOYW1lLCBzcGVsbENoZWNrLCBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChEcmFnZ2FibGVCbG9jaywgeyBlbGVtZW50LCByZWFkT25seSwgYmxvY2tSZWYsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHsgcmVmOiBibG9ja1JlZiwgY2hpbGRyZW46IHByb3BzT3JEZWZhdWx0UmVuZGVyZWQgfSkgfSkgfSwgZWxlbWVudC5fa2V5KTtcbiAgfVxuICBjb25zdCBzY2hlbWFUeXBlXzAgPSBzY2hlbWFUeXBlcy5ibG9ja09iamVjdHMuZmluZCgoX3R5cGVfMCkgPT4gX3R5cGVfMC5uYW1lID09PSBlbGVtZW50Ll90eXBlKTtcbiAgaWYgKCFzY2hlbWFUeXBlXzApXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBzY2hlbWEgdHlwZSBmb3IgYmxvY2sgZWxlbWVudCBvZiBfdHlwZSAke2VsZW1lbnQuX3R5cGV9YCk7XG4gIGNsYXNzTmFtZSA9IFwicHQtYmxvY2sgcHQtb2JqZWN0LWJsb2NrXCI7XG4gIGNvbnN0IGJsb2NrXzAgPSBmcm9tU2xhdGVWYWx1ZShbZWxlbWVudF0sIHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVswXTtcbiAgbGV0IHJlbmRlcmVkQmxvY2tGcm9tUHJvcHM7XG4gIGlmIChyZW5kZXJCbG9jaykge1xuICAgIGNvbnN0IF9wcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChEZWZhdWx0T2JqZWN0LCB7IHZhbHVlIH0pLFxuICAgICAgZWRpdG9yRWxlbWVudFJlZjogYmxvY2tSZWYsXG4gICAgICBmb2N1c2VkLFxuICAgICAgcGF0aDogYmxvY2tQYXRoLFxuICAgICAgc2NoZW1hVHlwZTogc2NoZW1hVHlwZV8wLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogYmxvY2tfMFxuICAgIH0sIFwidHlwZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcIlByb3BlcnR5ICd0eXBlJyBpcyBkZXByZWNhdGVkLCB1c2UgJ3NjaGVtYVR5cGUnIGluc3RlYWQuXCIpLCBzY2hlbWFUeXBlXzA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVuZGVyZWRCbG9ja0Zyb21Qcm9wcyA9IHJlbmRlckJsb2NrKF9wcm9wcyk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgLi4uYXR0cmlidXRlcywgY2xhc3NOYW1lLCBjaGlsZHJlbjogW1xuICAgIGNoaWxkcmVuLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goRHJhZ2dhYmxlQmxvY2ssIHsgZWxlbWVudCwgcmVhZE9ubHksIGJsb2NrUmVmLCBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChcImRpdlwiLCB7IHJlZjogYmxvY2tSZWYsIGNvbnRlbnRFZGl0YWJsZTogITEsIGNoaWxkcmVuOiByZW5kZXJlZEJsb2NrRnJvbVByb3BzIHx8IC8qIEBfX1BVUkVfXyAqLyBqc3goRGVmYXVsdE9iamVjdCwgeyB2YWx1ZSB9KSB9KSB9KVxuICBdIH0sIGVsZW1lbnQuX2tleSk7XG59O1xuRWxlbWVudC5kaXNwbGF5TmFtZSA9IFwiRWxlbWVudFwiO1xuY29uc3QgUG9ydGFibGVUZXh0RWRpdG9yQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCksIHVzZVBvcnRhYmxlVGV4dEVkaXRvciA9ICgpID0+IHtcbiAgY29uc3QgZWRpdG9yID0gdXNlQ29udGV4dChQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0KTtcbiAgaWYgKCFlZGl0b3IpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGB1c2VQb3J0YWJsZVRleHRFZGl0b3JgIGhvb2sgbXVzdCBiZSB1c2VkIGluc2lkZSB0aGUgPFBvcnRhYmxlVGV4dEVkaXRvcj4gY29tcG9uZW50J3MgY29udGV4dC5cIik7XG4gIHJldHVybiBlZGl0b3I7XG59O1xuZnVuY3Rpb24gRGVmYXVsdEFubm90YXRpb24ocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNik7XG4gIGxldCB0MDtcbiAgJFswXSAhPT0gcHJvcHMuYW5ub3RhdGlvbiA/ICh0MCA9ICgpID0+IGFsZXJ0KEpTT04uc3RyaW5naWZ5KHByb3BzLmFubm90YXRpb24pKSwgJFswXSA9IHByb3BzLmFubm90YXRpb24sICRbMV0gPSB0MCkgOiB0MCA9ICRbMV07XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gdDA7XG4gIGxldCB0MTtcbiAgJFsyXSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikgPyAodDEgPSB7XG4gICAgY29sb3I6IFwiYmx1ZVwiXG4gIH0sICRbMl0gPSB0MSkgOiB0MSA9ICRbMl07XG4gIGxldCB0MjtcbiAgcmV0dXJuICRbM10gIT09IGhhbmRsZUNsaWNrIHx8ICRbNF0gIT09IHByb3BzLmNoaWxkcmVuID8gKHQyID0gLyogQF9fUFVSRV9fICovIGpzeChcInNwYW5cIiwgeyBzdHlsZTogdDEsIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLCBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4gfSksICRbM10gPSBoYW5kbGVDbGljaywgJFs0XSA9IHByb3BzLmNoaWxkcmVuLCAkWzVdID0gdDIpIDogdDIgPSAkWzVdLCB0Mjtcbn1cbkRlZmF1bHRBbm5vdGF0aW9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0QW5ub3RhdGlvblwiO1xuZnVuY3Rpb24gY29tcGlsZVR5cGUocmF3VHlwZSkge1xuICByZXR1cm4gU2NoZW1hLmNvbXBpbGUoe1xuICAgIG5hbWU6IFwiYmxvY2tUeXBlU2NoZW1hXCIsXG4gICAgdHlwZXM6IFtyYXdUeXBlXVxuICB9KS5nZXQocmF3VHlwZS5uYW1lKTtcbn1cbmNvbnN0IEZMVVNIX1BBVENIRVNfVEhST1RUTEVEX01TID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiID8gNTAwIDogMWUzLCBtdXRhdGlvbk1hY2hpbmUgPSBzZXR1cCh7XG4gIHR5cGVzOiB7XG4gICAgY29udGV4dDoge30sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBpbnB1dDoge30sXG4gICAgZW1pdHRlZDoge31cbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIFwiZW1pdCBoYXMgcGVuZGluZyBwYXRjaGVzXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJoYXMgcGVuZGluZyBwYXRjaGVzXCJcbiAgICB9KSxcbiAgICBcImVtaXQgbXV0YXRpb25cIjogZW1pdCgoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+ICh7XG4gICAgICB0eXBlOiBcIm11dGF0aW9uXCIsXG4gICAgICBwYXRjaGVzOiBjb250ZXh0LnBlbmRpbmdQYXRjaGVzLFxuICAgICAgc25hcHNob3Q6IGZyb21TbGF0ZVZhbHVlKGNvbnRleHQuc2xhdGVFZGl0b3IuY2hpbGRyZW4sIGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChjb250ZXh0LnNsYXRlRWRpdG9yKSlcbiAgICB9KSksXG4gICAgXCJjbGVhciBwZW5kaW5nIHBhdGNoZXNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdQYXRjaGVzOiBbXVxuICAgIH0pLFxuICAgIFwiZGVmZXIgcGF0Y2hcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdQYXRjaGVzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gWy4uLmNvbnRleHQucGVuZGluZ1BhdGNoZXMsIGV2ZW50LnBhdGNoXVxuICAgIH0pXG4gIH0sXG4gIGd1YXJkczoge1xuICAgIFwic2xhdGUgaXMgbm9ybWFsaXppbmdcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiBFZGl0b3IuaXNOb3JtYWxpemluZyhjb250ZXh0LnNsYXRlRWRpdG9yKVxuICB9XG59KS5jcmVhdGVNYWNoaW5lKHtcbiAgaWQ6IFwibXV0YXRpb25cIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIHBlbmRpbmdQYXRjaGVzOiBbXSxcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3JcbiAgfSksXG4gIGluaXRpYWw6IFwiaWRsZVwiLFxuICBzdGF0ZXM6IHtcbiAgICBpZGxlOiB7XG4gICAgICBvbjoge1xuICAgICAgICBwYXRjaDoge1xuICAgICAgICAgIGFjdGlvbnM6IFtcImRlZmVyIHBhdGNoXCIsIFwiZW1pdCBoYXMgcGVuZGluZyBwYXRjaGVzXCJdLFxuICAgICAgICAgIHRhcmdldDogXCJoYXMgcGVuZGluZyBwYXRjaGVzXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJoYXMgcGVuZGluZyBwYXRjaGVzXCI6IHtcbiAgICAgIGFmdGVyOiB7XG4gICAgICAgIFtGTFVTSF9QQVRDSEVTX1RIUk9UVExFRF9NU106IFt7XG4gICAgICAgICAgZ3VhcmQ6IFwic2xhdGUgaXMgbm9ybWFsaXppbmdcIixcbiAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgbXV0YXRpb25cIiwgXCJjbGVhciBwZW5kaW5nIHBhdGNoZXNcIl1cbiAgICAgICAgfSwge1xuICAgICAgICAgIHJlZW50ZXI6ICEwXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICBhY3Rpb25zOiBbXCJkZWZlciBwYXRjaFwiXSxcbiAgICAgICAgICByZWVudGVyOiAhMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbmZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsdWUsIHR5cGVzLCBrZXlHZW5lcmF0b3IpIHtcbiAgbGV0IHJlc29sdXRpb24gPSBudWxsLCB2YWxpZCA9ICEwO1xuICBjb25zdCB2YWxpZENoaWxkVHlwZXMgPSBbdHlwZXMuc3Bhbi5uYW1lLCAuLi50eXBlcy5pbmxpbmVPYmplY3RzLm1hcCgodCkgPT4gdC5uYW1lKV0sIHZhbGlkQmxvY2tUeXBlcyA9IFt0eXBlcy5ibG9jay5uYW1lLCAuLi50eXBlcy5ibG9ja09iamVjdHMubWFwKCh0KSA9PiB0Lm5hbWUpXTtcbiAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB7XG4gICAgdmFsaWQ6ICEwLFxuICAgIHJlc29sdXRpb246IG51bGwsXG4gICAgdmFsdWVcbiAgfSA6ICFBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IDAgPyB7XG4gICAgdmFsaWQ6ICExLFxuICAgIHJlc29sdXRpb246IHtcbiAgICAgIHBhdGNoZXM6IFt1bnNldChbXSldLFxuICAgICAgZGVzY3JpcHRpb246IFwiRWRpdG9yIHZhbHVlIG11c3QgYmUgYW4gYXJyYXkgb2YgUG9ydGFibGUgVGV4dCBibG9ja3MsIG9yIHVuZGVmaW5lZC5cIixcbiAgICAgIGFjdGlvbjogXCJVbnNldCB0aGUgdmFsdWVcIixcbiAgICAgIGl0ZW06IHZhbHVlLFxuICAgICAgaTE4bjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1hcnJheS5kZXNjcmlwdGlvblwiLFxuICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tYXJyYXkuYWN0aW9uXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlXG4gIH0gOiAodmFsdWUuc29tZSgoYmxrLCBpbmRleCkgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChibGspKVxuICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFt1bnNldChbaW5kZXhdKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgbXVzdCBiZSBhbiBvYmplY3QsIGdvdCAke1N0cmluZyhibGspfWAsXG4gICAgICAgIGFjdGlvbjogXCJVbnNldCBpbnZhbGlkIGl0ZW1cIixcbiAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tb2JqZWN0LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm90LWFuLW9iamVjdC5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMDtcbiAgICBpZiAoIWJsay5fa2V5IHx8IHR5cGVvZiBibGsuX2tleSAhPSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgIC4uLmJsayxcbiAgICAgICAgICBfa2V5OiBrZXlHZW5lcmF0b3IoKVxuICAgICAgICB9LCBbaW5kZXhdKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgYXQgaW5kZXggJHtpbmRleH0gaXMgbWlzc2luZyByZXF1aXJlZCBfa2V5LmAsXG4gICAgICAgIGFjdGlvbjogXCJTZXQgdGhlIGJsb2NrIHdpdGggYSByYW5kb20gX2tleSB2YWx1ZVwiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3Npbmcta2V5LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1rZXkuYWN0aW9uXCIsXG4gICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgITA7XG4gICAgaWYgKCFibGsuX3R5cGUgfHwgIXZhbGlkQmxvY2tUeXBlcy5pbmNsdWRlcyhibGsuX3R5cGUpKSB7XG4gICAgICBpZiAoYmxrLl90eXBlID09PSBcImJsb2NrXCIpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrVHlwZU5hbWUgPSB0eXBlcy5ibG9jay5uYW1lO1xuICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIC4uLmJsayxcbiAgICAgICAgICAgIF90eXBlOiBjdXJyZW50QmxvY2tUeXBlTmFtZVxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCB0eXBlIG5hbWUgJyR7YmxrLl90eXBlfScuIEFjY29yZGluZyB0byB0aGUgc2NoZW1hLCB0aGUgYmxvY2sgdHlwZSBuYW1lIGlzICcke2N1cnJlbnRCbG9ja1R5cGVOYW1lfSdgLFxuICAgICAgICAgIGFjdGlvbjogYFVzZSB0eXBlICcke2N1cnJlbnRCbG9ja1R5cGVOYW1lfSdgLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmluY29ycmVjdC1ibG9jay10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5pbmNvcnJlY3QtYmxvY2stdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBleHBlY3RlZFR5cGVOYW1lOiBjdXJyZW50QmxvY2tUeXBlTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITA7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWJsay5fdHlwZSAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayh7XG4gICAgICAgIC4uLmJsayxcbiAgICAgICAgX3R5cGU6IHR5cGVzLmJsb2NrLm5hbWVcbiAgICAgIH0pID8gKHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgIC4uLmJsayxcbiAgICAgICAgICBfdHlwZTogdHlwZXMuYmxvY2submFtZVxuICAgICAgICB9LCBbe1xuICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgIH1dKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgd2l0aCBfa2V5ICcke2Jsay5fa2V5fScgaXMgbWlzc2luZyBhIHR5cGUgbmFtZS4gQWNjb3JkaW5nIHRvIHRoZSBzY2hlbWEsIHRoZSBibG9jayB0eXBlIG5hbWUgaXMgJyR7dHlwZXMuYmxvY2submFtZX0nYCxcbiAgICAgICAgYWN0aW9uOiBgVXNlIHR5cGUgJyR7dHlwZXMuYmxvY2submFtZX0nYCxcbiAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWJsb2NrLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWJsb2NrLXR5cGUuYWN0aW9uXCIsXG4gICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlTmFtZTogdHlwZXMuYmxvY2submFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgITApIDogYmxrLl90eXBlID8gKHJlc29sdXRpb24gPSB7XG4gICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgIH1dKV0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgd2l0aCBfa2V5ICcke2Jsay5fa2V5fScgaGFzIGludmFsaWQgX3R5cGUgJyR7YmxrLl90eXBlfSdgLFxuICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBibG9ja1wiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmRpc2FsbG93ZWQtdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmRpc2FsbG93ZWQtdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICB0eXBlTmFtZTogYmxrLl90eXBlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMCkgOiAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nIGFuIF90eXBlIHByb3BlcnR5YCxcbiAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB0aGUgYmxvY2tcIixcbiAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLXR5cGUuYWN0aW9uXCIsXG4gICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICBrZXk6IGJsay5fa2V5XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMCk7XG4gICAgfVxuICAgIGlmIChibGsuX3R5cGUgPT09IHR5cGVzLmJsb2NrLm5hbWUpIHtcbiAgICAgIGNvbnN0IHRleHRCbG9jayA9IGJsaztcbiAgICAgIGlmICh0ZXh0QmxvY2suY2hpbGRyZW4gJiYgIUFycmF5LmlzQXJyYXkodGV4dEJsb2NrLmNoaWxkcmVuKSlcbiAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICB9LCBbe1xuICAgICAgICAgICAgX2tleTogdGV4dEJsb2NrLl9rZXlcbiAgICAgICAgICB9XSldLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgVGV4dCBibG9jayB3aXRoIF9rZXkgJyR7dGV4dEJsb2NrLl9rZXl9JyBoYXMgYSBpbnZhbGlkIHJlcXVpcmVkIHByb3BlcnR5ICdjaGlsZHJlbicuYCxcbiAgICAgICAgICBhY3Rpb246IFwiUmVzZXQgdGhlIGNoaWxkcmVuIHByb3BlcnR5XCIsXG4gICAgICAgICAgaXRlbTogdGV4dEJsb2NrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1vci1pbnZhbGlkLWNoaWxkcmVuLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLW9yLWludmFsaWQtY2hpbGRyZW4uYWN0aW9uXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAga2V5OiB0ZXh0QmxvY2suX2tleVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITA7XG4gICAgICBpZiAodGV4dEJsb2NrLmNoaWxkcmVuID09PSB2b2lkIDAgfHwgQXJyYXkuaXNBcnJheSh0ZXh0QmxvY2suY2hpbGRyZW4pICYmIHRleHRCbG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgbmV3U3BhbiA9IHtcbiAgICAgICAgICBfdHlwZTogdHlwZXMuc3Bhbi5uYW1lLFxuICAgICAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpLFxuICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgbWFya3M6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgIGF1dG9SZXNvbHZlOiAhMCxcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0SWZNaXNzaW5nKFtdLCBbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCJdKSwgaW5zZXJ0KFtuZXdTcGFuXSwgXCJhZnRlclwiLCBbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIDBdKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZHJlbiBmb3IgdGV4dCBibG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBpcyBlbXB0eS5gLFxuICAgICAgICAgIGFjdGlvbjogXCJJbnNlcnQgYW4gZW1wdHkgdGV4dFwiLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmVtcHR5LWNoaWxkcmVuLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5lbXB0eS1jaGlsZHJlbi5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFsbFVzZWRNYXJrcyA9IHVuaXEoZmxhdHRlbih0ZXh0QmxvY2suY2hpbGRyZW4uZmlsdGVyKChjbGQpID0+IGNsZC5fdHlwZSA9PT0gdHlwZXMuc3Bhbi5uYW1lKS5tYXAoKGNsZCkgPT4gY2xkLm1hcmtzIHx8IFtdKSkpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYmxrLm1hcmtEZWZzKSAmJiBibGsubWFya0RlZnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB1bnVzZWRNYXJrRGVmcyA9IHVuaXEoYmxrLm1hcmtEZWZzLm1hcCgoZGVmKSA9PiBkZWYuX2tleSkuZmlsdGVyKChrZXkpID0+ICFhbGxVc2VkTWFya3MuaW5jbHVkZXMoa2V5KSkpO1xuICAgICAgICBpZiAodW51c2VkTWFya0RlZnMubGVuZ3RoID4gMClcbiAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIGF1dG9SZXNvbHZlOiAhMCxcbiAgICAgICAgICAgIHBhdGNoZXM6IHVudXNlZE1hcmtEZWZzLm1hcCgobWFya0RlZktleSkgPT4gdW5zZXQoW3tcbiAgICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH0sIFwibWFya0RlZnNcIiwge1xuICAgICAgICAgICAgICBfa2V5OiBtYXJrRGVmS2V5XG4gICAgICAgICAgICB9XSkpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayBjb250YWlucyBvcnBoYW5lZCBkYXRhICh1bnVzZWQgbWFyayBkZWZpbml0aW9ucyk6ICR7dW51c2VkTWFya0RlZnMuam9pbihcIiwgXCIpfS5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB1bnVzZWQgbWFyayBkZWZpbml0aW9uIGl0ZW1cIixcbiAgICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrLWRlZnMuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUub3JwaGFuZWQtbWFyay1kZWZzLmFjdGlvblwiLFxuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICAgIHVudXNlZE1hcmtEZWZzOiB1bnVzZWRNYXJrRGVmcy5tYXAoKG0pID0+IG0udG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sICEwO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3JwaGFuZWRNYXJrcyA9IGFsbFVzZWRNYXJrcy5maWx0ZXIoKG1hcmspID0+ICF0eXBlcy5kZWNvcmF0b3JzLm1hcCgoZGVjKSA9PiBkZWMudmFsdWUpLmluY2x1ZGVzKG1hcmspKS5maWx0ZXIoKG1hcmspID0+IHRleHRCbG9jay5tYXJrRGVmcyA9PT0gdm9pZCAwIHx8ICF0ZXh0QmxvY2subWFya0RlZnMuZmluZCgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFyaykpO1xuICAgICAgaWYgKG9ycGhhbmVkTWFya3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzcGFuQ2hpbGRyZW4gPSB0ZXh0QmxvY2suY2hpbGRyZW4uZmlsdGVyKChjbGQpID0+IGNsZC5fdHlwZSA9PT0gdHlwZXMuc3Bhbi5uYW1lICYmIEFycmF5LmlzQXJyYXkoY2xkLm1hcmtzKSAmJiBjbGQubWFya3Muc29tZSgobWFyaykgPT4gb3JwaGFuZWRNYXJrcy5pbmNsdWRlcyhtYXJrKSkpO1xuICAgICAgICBpZiAoc3BhbkNoaWxkcmVuKSB7XG4gICAgICAgICAgY29uc3Qgb3JwaGFuZWQgPSBvcnBoYW5lZE1hcmtzLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIGF1dG9SZXNvbHZlOiAhMCxcbiAgICAgICAgICAgIHBhdGNoZXM6IHNwYW5DaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBzZXQoKGNoaWxkLm1hcmtzIHx8IFtdKS5maWx0ZXIoKGNNcmspID0+ICFvcnBoYW5lZE1hcmtzLmluY2x1ZGVzKGNNcmspKSwgW3tcbiAgICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgICB9LCBcIm1hcmtzXCJdKSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGNvbnRhaW5zIG1hcmtzICgke29ycGhhbmVkfSkgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBjb250ZW50IG1vZGVsLmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIGludmFsaWQgbWFya3NcIixcbiAgICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrcy5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrcy5hY3Rpb25cIixcbiAgICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgICBvcnBoYW5lZE1hcmtzOiBvcnBoYW5lZE1hcmtzLm1hcCgobSkgPT4gbS50b1N0cmluZygpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRleHRCbG9jay5jaGlsZHJlbi5zb21lKChjaGlsZCwgY0luZGV4KSA9PiB7XG4gICAgICAgIGlmICghaXNQbGFpbk9iamVjdChjaGlsZCkpXG4gICAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgY0luZGV4XSldLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCBhdCBpbmRleCAnJHtjSW5kZXh9JyBpbiBibG9jayB3aXRoIGtleSAnJHtibGsuX2tleX0nIGlzIG5vdCBhbiBvYmplY3QuYCxcbiAgICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIGl0ZW1cIixcbiAgICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub24tb2JqZWN0LWNoaWxkLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vbi1vYmplY3QtY2hpbGQuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGNJbmRleFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICAgIGlmICghY2hpbGQuX2tleSB8fCB0eXBlb2YgY2hpbGQuX2tleSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgY29uc3QgbmV3Q2hpbGQgPSB7XG4gICAgICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIGF1dG9SZXNvbHZlOiAhMCxcbiAgICAgICAgICAgIHBhdGNoZXM6IFtzZXQobmV3Q2hpbGQsIFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIGNJbmRleF0pXSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgYXQgaW5kZXggJHtjSW5kZXh9IGlzIG1pc3NpbmcgcmVxdWlyZWQgX2tleSBpbiBibG9jayB3aXRoIF9rZXkgJHtibGsuX2tleX0uYCxcbiAgICAgICAgICAgIGFjdGlvbjogXCJTZXQgYSBuZXcgcmFuZG9tIF9rZXkgb24gdGhlIG9iamVjdFwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctY2hpbGQta2V5LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctY2hpbGQta2V5LmFjdGlvblwiLFxuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICAgIGluZGV4OiBjSW5kZXhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZC5fdHlwZSA/IHZhbGlkQ2hpbGRUeXBlcy5pbmNsdWRlcyhjaGlsZC5fdHlwZSkgPyBjaGlsZC5fdHlwZSA9PT0gdHlwZXMuc3Bhbi5uYW1lICYmIHR5cGVvZiBjaGlsZC50ZXh0ICE9IFwic3RyaW5nXCIgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgdGV4dDogXCJcIlxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCB3aXRoIF9rZXkgJyR7Y2hpbGQuX2tleX0nIGluIGJsb2NrIHdpdGgga2V5ICcke2Jsay5fa2V5fScgaGFzIG1pc3Npbmcgb3IgaW52YWxpZCB0ZXh0IHByb3BlcnR5IWAsXG4gICAgICAgICAgYWN0aW9uOiBcIldyaXRlIGFuIGVtcHR5IHRleHQgcHJvcGVydHkgdG8gdGhlIG9iamVjdFwiLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmludmFsaWQtc3Bhbi10ZXh0LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5pbnZhbGlkLXNwYW4tdGV4dC5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZEtleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITApIDogITEgOiAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIHdpdGggX2tleSAnJHtjaGlsZC5fa2V5fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCAnX3R5cGUnIHByb3BlcnR5ICgke2NoaWxkLl90eXBlfSkuYCxcbiAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBvYmplY3RcIixcbiAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5kaXNhbGxvd2VkLWNoaWxkLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmRpc2FsbG93ZWQtY2hpbGQtdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZEtleTogY2hpbGQuX2tleSxcbiAgICAgICAgICAgICAgY2hpbGRUeXBlOiBjaGlsZC5fdHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITApIDogKHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCB3aXRoIF9rZXkgJyR7Y2hpbGQuX2tleX0nIGluIGJsb2NrIHdpdGgga2V5ICcke2Jsay5fa2V5fScgaXMgbWlzc2luZyAnX3R5cGUnIHByb3BlcnR5LmAsXG4gICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWNoaWxkLXR5cGUuYWN0aW9uXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgY2hpbGRLZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwKTtcbiAgICAgIH0pICYmICh2YWxpZCA9ICExKTtcbiAgICB9XG4gICAgcmV0dXJuICExO1xuICB9KSAmJiAodmFsaWQgPSAhMSksIHtcbiAgICB2YWxpZCxcbiAgICByZXNvbHV0aW9uLFxuICAgIHZhbHVlXG4gIH0pO1xufVxuZnVuY3Rpb24gd2l0aFJlbW90ZUNoYW5nZXMoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikgfHwgITE7XG4gIElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikge1xuICByZXR1cm4gSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUy5nZXQoZWRpdG9yKTtcbn1cbmNvbnN0IFBBVENISU5HID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB3aXRob3V0UGF0Y2hpbmcoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNQYXRjaGluZyhlZGl0b3IpO1xuICBQQVRDSElORy5zZXQoZWRpdG9yLCAhMSksIGZuKCksIFBBVENISU5HLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNQYXRjaGluZyhlZGl0b3IpIHtcbiAgcmV0dXJuIFBBVENISU5HLmdldChlZGl0b3IpO1xufVxuZnVuY3Rpb24gY2xvbmVEaWZmKGRpZmYyKSB7XG4gIGNvbnN0IFt0eXBlLCBwYXRjaF0gPSBkaWZmMjtcbiAgcmV0dXJuIFt0eXBlLCBwYXRjaF07XG59XG5mdW5jdGlvbiBnZXRDb21tb25PdmVybGFwKHRleHRBLCB0ZXh0Qikge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgY29uc3QgdGV4dDFMZW5ndGggPSB0ZXh0MS5sZW5ndGgsIHRleHQyTGVuZ3RoID0gdGV4dDIubGVuZ3RoO1xuICBpZiAodGV4dDFMZW5ndGggPT09IDAgfHwgdGV4dDJMZW5ndGggPT09IDApIHJldHVybiAwO1xuICB0ZXh0MUxlbmd0aCA+IHRleHQyTGVuZ3RoID8gdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDFMZW5ndGggLSB0ZXh0Mkxlbmd0aCkgOiB0ZXh0MUxlbmd0aCA8IHRleHQyTGVuZ3RoICYmICh0ZXh0MiA9IHRleHQyLnN1YnN0cmluZygwLCB0ZXh0MUxlbmd0aCkpO1xuICBjb25zdCB0ZXh0TGVuZ3RoID0gTWF0aC5taW4odGV4dDFMZW5ndGgsIHRleHQyTGVuZ3RoKTtcbiAgaWYgKHRleHQxID09PSB0ZXh0MikgcmV0dXJuIHRleHRMZW5ndGg7XG4gIGxldCBiZXN0ID0gMCwgbGVuZ3RoID0gMTtcbiAgZm9yIChsZXQgZm91bmQgPSAwOyBmb3VuZCAhPT0gLTE7ICkge1xuICAgIGNvbnN0IHBhdHRlcm4gPSB0ZXh0MS5zdWJzdHJpbmcodGV4dExlbmd0aCAtIGxlbmd0aCk7XG4gICAgaWYgKGZvdW5kID0gdGV4dDIuaW5kZXhPZihwYXR0ZXJuKSwgZm91bmQgPT09IC0xKSByZXR1cm4gYmVzdDtcbiAgICBsZW5ndGggKz0gZm91bmQsIChmb3VuZCA9PT0gMCB8fCB0ZXh0MS5zdWJzdHJpbmcodGV4dExlbmd0aCAtIGxlbmd0aCkgPT09IHRleHQyLnN1YnN0cmluZygwLCBsZW5ndGgpKSAmJiAoYmVzdCA9IGxlbmd0aCwgbGVuZ3RoKyspO1xuICB9XG4gIHJldHVybiBiZXN0O1xufVxuZnVuY3Rpb24gZ2V0Q29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MVswXSAhPT0gdGV4dDJbMF0pIHJldHVybiAwO1xuICBsZXQgcG9pbnRlck1pbiA9IDAsIHBvaW50ZXJNYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCksIHBvaW50ZXJNaWQgPSBwb2ludGVyTWF4LCBwb2ludGVyU3RhcnQgPSAwO1xuICBmb3IgKDsgcG9pbnRlck1pbiA8IHBvaW50ZXJNaWQ7ICkgdGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJTdGFydCwgcG9pbnRlck1pZCkgPT09IHRleHQyLnN1YnN0cmluZyhwb2ludGVyU3RhcnQsIHBvaW50ZXJNaWQpID8gKHBvaW50ZXJNaW4gPSBwb2ludGVyTWlkLCBwb2ludGVyU3RhcnQgPSBwb2ludGVyTWluKSA6IHBvaW50ZXJNYXggPSBwb2ludGVyTWlkLCBwb2ludGVyTWlkID0gTWF0aC5mbG9vcigocG9pbnRlck1heCAtIHBvaW50ZXJNaW4pIC8gMiArIHBvaW50ZXJNaW4pO1xuICByZXR1cm4gcG9pbnRlck1pZDtcbn1cbmZ1bmN0aW9uIGdldENvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgaWYgKCF0ZXh0MSB8fCAhdGV4dDIgfHwgdGV4dDFbdGV4dDEubGVuZ3RoIC0gMV0gIT09IHRleHQyW3RleHQyLmxlbmd0aCAtIDFdKSByZXR1cm4gMDtcbiAgbGV0IHBvaW50ZXJNaW4gPSAwLCBwb2ludGVyTWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpLCBwb2ludGVyTWlkID0gcG9pbnRlck1heCwgcG9pbnRlckVuZCA9IDA7XG4gIGZvciAoOyBwb2ludGVyTWluIDwgcG9pbnRlck1pZDsgKSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlck1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlckVuZCkgPT09IHRleHQyLnN1YnN0cmluZyh0ZXh0Mi5sZW5ndGggLSBwb2ludGVyTWlkLCB0ZXh0Mi5sZW5ndGggLSBwb2ludGVyRW5kKSA/IChwb2ludGVyTWluID0gcG9pbnRlck1pZCwgcG9pbnRlckVuZCA9IHBvaW50ZXJNaW4pIDogcG9pbnRlck1heCA9IHBvaW50ZXJNaWQsIHBvaW50ZXJNaWQgPSBNYXRoLmZsb29yKChwb2ludGVyTWF4IC0gcG9pbnRlck1pbikgLyAyICsgcG9pbnRlck1pbik7XG4gIHJldHVybiBwb2ludGVyTWlkO1xufVxuZnVuY3Rpb24gaXNIaWdoU3Vycm9nYXRlKGNoYXIpIHtcbiAgY29uc3QgY2hhckNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjaGFyQ29kZSA+PSA1NTI5NiAmJiBjaGFyQ29kZSA8PSA1NjMxOTtcbn1cbmZ1bmN0aW9uIGlzTG93U3Vycm9nYXRlKGNoYXIpIHtcbiAgY29uc3QgY2hhckNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjaGFyQ29kZSA+PSA1NjMyMCAmJiBjaGFyQ29kZSA8PSA1NzM0Mztcbn1cbmZ1bmN0aW9uIGJpc2VjdCh0ZXh0MSwgdGV4dDIsIGRlYWRsaW5lKSB7XG4gIGNvbnN0IHRleHQxTGVuZ3RoID0gdGV4dDEubGVuZ3RoLCB0ZXh0Mkxlbmd0aCA9IHRleHQyLmxlbmd0aCwgbWF4RCA9IE1hdGguY2VpbCgodGV4dDFMZW5ndGggKyB0ZXh0Mkxlbmd0aCkgLyAyKSwgdk9mZnNldCA9IG1heEQsIHZMZW5ndGggPSAyICogbWF4RCwgdjEgPSBuZXcgQXJyYXkodkxlbmd0aCksIHYyID0gbmV3IEFycmF5KHZMZW5ndGgpO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHZMZW5ndGg7IHgrKykgdjFbeF0gPSAtMSwgdjJbeF0gPSAtMTtcbiAgdjFbdk9mZnNldCArIDFdID0gMCwgdjJbdk9mZnNldCArIDFdID0gMDtcbiAgY29uc3QgZGVsdGEgPSB0ZXh0MUxlbmd0aCAtIHRleHQyTGVuZ3RoLCBmcm9udCA9IGRlbHRhICUgMiAhPT0gMDtcbiAgbGV0IGsxc3RhcnQgPSAwLCBrMWVuZCA9IDAsIGsyc3RhcnQgPSAwLCBrMmVuZCA9IDA7XG4gIGZvciAobGV0IGQgPSAwOyBkIDwgbWF4RCAmJiAhKERhdGUubm93KCkgPiBkZWFkbGluZSk7IGQrKykge1xuICAgIGZvciAobGV0IGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIGNvbnN0IGsxT2Zmc2V0ID0gdk9mZnNldCArIGsxO1xuICAgICAgbGV0IHgxO1xuICAgICAgazEgPT09IC1kIHx8IGsxICE9PSBkICYmIHYxW2sxT2Zmc2V0IC0gMV0gPCB2MVtrMU9mZnNldCArIDFdID8geDEgPSB2MVtrMU9mZnNldCArIDFdIDogeDEgPSB2MVtrMU9mZnNldCAtIDFdICsgMTtcbiAgICAgIGxldCB5MSA9IHgxIC0gazE7XG4gICAgICBmb3IgKDsgeDEgPCB0ZXh0MUxlbmd0aCAmJiB5MSA8IHRleHQyTGVuZ3RoICYmIHRleHQxLmNoYXJBdCh4MSkgPT09IHRleHQyLmNoYXJBdCh5MSk7ICkgeDErKywgeTErKztcbiAgICAgIGlmICh2MVtrMU9mZnNldF0gPSB4MSwgeDEgPiB0ZXh0MUxlbmd0aCkgazFlbmQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKHkxID4gdGV4dDJMZW5ndGgpIGsxc3RhcnQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKGZyb250KSB7XG4gICAgICAgIGNvbnN0IGsyT2Zmc2V0ID0gdk9mZnNldCArIGRlbHRhIC0gazE7XG4gICAgICAgIGlmIChrMk9mZnNldCA+PSAwICYmIGsyT2Zmc2V0IDwgdkxlbmd0aCAmJiB2MltrMk9mZnNldF0gIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgeDIgPSB0ZXh0MUxlbmd0aCAtIHYyW2syT2Zmc2V0XTtcbiAgICAgICAgICBpZiAoeDEgPj0geDIpIHJldHVybiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgxLCB5MSwgZGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIGNvbnN0IGsyT2Zmc2V0ID0gdk9mZnNldCArIGsyO1xuICAgICAgbGV0IHgyO1xuICAgICAgazIgPT09IC1kIHx8IGsyICE9PSBkICYmIHYyW2syT2Zmc2V0IC0gMV0gPCB2MltrMk9mZnNldCArIDFdID8geDIgPSB2MltrMk9mZnNldCArIDFdIDogeDIgPSB2MltrMk9mZnNldCAtIDFdICsgMTtcbiAgICAgIGxldCB5MiA9IHgyIC0gazI7XG4gICAgICBmb3IgKDsgeDIgPCB0ZXh0MUxlbmd0aCAmJiB5MiA8IHRleHQyTGVuZ3RoICYmIHRleHQxLmNoYXJBdCh0ZXh0MUxlbmd0aCAtIHgyIC0gMSkgPT09IHRleHQyLmNoYXJBdCh0ZXh0Mkxlbmd0aCAtIHkyIC0gMSk7ICkgeDIrKywgeTIrKztcbiAgICAgIGlmICh2MltrMk9mZnNldF0gPSB4MiwgeDIgPiB0ZXh0MUxlbmd0aCkgazJlbmQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKHkyID4gdGV4dDJMZW5ndGgpIGsyc3RhcnQgKz0gMjtcbiAgICAgIGVsc2UgaWYgKCFmcm9udCkge1xuICAgICAgICBjb25zdCBrMU9mZnNldCA9IHZPZmZzZXQgKyBkZWx0YSAtIGsyO1xuICAgICAgICBpZiAoazFPZmZzZXQgPj0gMCAmJiBrMU9mZnNldCA8IHZMZW5ndGggJiYgdjFbazFPZmZzZXRdICE9PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHgxID0gdjFbazFPZmZzZXRdLCB5MSA9IHZPZmZzZXQgKyB4MSAtIGsxT2Zmc2V0O1xuICAgICAgICAgIGlmICh4MiA9IHRleHQxTGVuZ3RoIC0geDIsIHgxID49IHgyKSByZXR1cm4gYmlzZWN0U3BsaXQodGV4dDEsIHRleHQyLCB4MSwgeTEsIGRlYWRsaW5lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdLCBbRElGRl9JTlNFUlQsIHRleHQyXV07XG59XG5mdW5jdGlvbiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgsIHksIGRlYWRsaW5lKSB7XG4gIGNvbnN0IHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KSwgdGV4dDJhID0gdGV4dDIuc3Vic3RyaW5nKDAsIHkpLCB0ZXh0MWIgPSB0ZXh0MS5zdWJzdHJpbmcoeCksIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KSwgZGlmZnMgPSBkb0RpZmYodGV4dDFhLCB0ZXh0MmEsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZVxuICB9KSwgZGlmZnNiID0gZG9EaWZmKHRleHQxYiwgdGV4dDJiLCB7XG4gICAgY2hlY2tMaW5lczogITEsXG4gICAgZGVhZGxpbmVcbiAgfSk7XG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn1cbmZ1bmN0aW9uIGZpbmRIYWxmTWF0Y2godGV4dDEsIHRleHQyLCB0aW1lb3V0ID0gMSkge1xuICBpZiAodGltZW91dCA8PSAwKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgbG9uZ1RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyLCBzaG9ydFRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICBpZiAobG9uZ1RleHQubGVuZ3RoIDwgNCB8fCBzaG9ydFRleHQubGVuZ3RoICogMiA8IGxvbmdUZXh0Lmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGhhbGZNYXRjaDEgPSBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIE1hdGguY2VpbChsb25nVGV4dC5sZW5ndGggLyA0KSksIGhhbGZNYXRjaDIgPSBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIE1hdGguY2VpbChsb25nVGV4dC5sZW5ndGggLyAyKSk7XG4gIGxldCBoYWxmTWF0Y2g7XG4gIGlmIChoYWxmTWF0Y2gxICYmIGhhbGZNYXRjaDIpIGhhbGZNYXRjaCA9IGhhbGZNYXRjaDFbNF0ubGVuZ3RoID4gaGFsZk1hdGNoMls0XS5sZW5ndGggPyBoYWxmTWF0Y2gxIDogaGFsZk1hdGNoMjtcbiAgZWxzZSB7XG4gICAgaWYgKCFoYWxmTWF0Y2gxICYmICFoYWxmTWF0Y2gyKSByZXR1cm4gbnVsbDtcbiAgICBoYWxmTWF0Y2gyID8gaGFsZk1hdGNoMSB8fCAoaGFsZk1hdGNoID0gaGFsZk1hdGNoMikgOiBoYWxmTWF0Y2ggPSBoYWxmTWF0Y2gxO1xuICB9XG4gIGlmICghaGFsZk1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhIGhhbGYgbWF0Y2guXCIpO1xuICBsZXQgdGV4dDFBLCB0ZXh0MUIsIHRleHQyQSwgdGV4dDJCO1xuICB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyAodGV4dDFBID0gaGFsZk1hdGNoWzBdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbMV0sIHRleHQyQSA9IGhhbGZNYXRjaFsyXSwgdGV4dDJCID0gaGFsZk1hdGNoWzNdKSA6ICh0ZXh0MkEgPSBoYWxmTWF0Y2hbMF0sIHRleHQyQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDFBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbM10pO1xuICBjb25zdCBtaWRDb21tb24gPSBoYWxmTWF0Y2hbNF07XG4gIHJldHVybiBbdGV4dDFBLCB0ZXh0MUIsIHRleHQyQSwgdGV4dDJCLCBtaWRDb21tb25dO1xufVxuZnVuY3Rpb24gaGFsZk1hdGNoSShsb25nVGV4dCwgc2hvcnRUZXh0LCBpKSB7XG4gIGNvbnN0IHNlZWQgPSBsb25nVGV4dC5zbGljZShpLCBpICsgTWF0aC5mbG9vcihsb25nVGV4dC5sZW5ndGggLyA0KSk7XG4gIGxldCBqID0gLTEsIGJlc3RDb21tb24gPSBcIlwiLCBiZXN0TG9uZ1RleHRBLCBiZXN0TG9uZ1RleHRCLCBiZXN0U2hvcnRUZXh0QSwgYmVzdFNob3J0VGV4dEI7XG4gIGZvciAoOyAoaiA9IHNob3J0VGV4dC5pbmRleE9mKHNlZWQsIGogKyAxKSkgIT09IC0xOyApIHtcbiAgICBjb25zdCBwcmVmaXhMZW5ndGggPSBnZXRDb21tb25QcmVmaXgobG9uZ1RleHQuc2xpY2UoaSksIHNob3J0VGV4dC5zbGljZShqKSksIHN1ZmZpeExlbmd0aCA9IGdldENvbW1vblN1ZmZpeChsb25nVGV4dC5zbGljZSgwLCBpKSwgc2hvcnRUZXh0LnNsaWNlKDAsIGopKTtcbiAgICBiZXN0Q29tbW9uLmxlbmd0aCA8IHN1ZmZpeExlbmd0aCArIHByZWZpeExlbmd0aCAmJiAoYmVzdENvbW1vbiA9IHNob3J0VGV4dC5zbGljZShqIC0gc3VmZml4TGVuZ3RoLCBqKSArIHNob3J0VGV4dC5zbGljZShqLCBqICsgcHJlZml4TGVuZ3RoKSwgYmVzdExvbmdUZXh0QSA9IGxvbmdUZXh0LnNsaWNlKDAsIGkgLSBzdWZmaXhMZW5ndGgpLCBiZXN0TG9uZ1RleHRCID0gbG9uZ1RleHQuc2xpY2UoaSArIHByZWZpeExlbmd0aCksIGJlc3RTaG9ydFRleHRBID0gc2hvcnRUZXh0LnNsaWNlKDAsIGogLSBzdWZmaXhMZW5ndGgpLCBiZXN0U2hvcnRUZXh0QiA9IHNob3J0VGV4dC5zbGljZShqICsgcHJlZml4TGVuZ3RoKSk7XG4gIH1cbiAgcmV0dXJuIGJlc3RDb21tb24ubGVuZ3RoICogMiA+PSBsb25nVGV4dC5sZW5ndGggPyBbYmVzdExvbmdUZXh0QSB8fCBcIlwiLCBiZXN0TG9uZ1RleHRCIHx8IFwiXCIsIGJlc3RTaG9ydFRleHRBIHx8IFwiXCIsIGJlc3RTaG9ydFRleHRCIHx8IFwiXCIsIGJlc3RDb21tb24gfHwgXCJcIl0gOiBudWxsO1xufVxuZnVuY3Rpb24gY2hhcnNUb0xpbmVzKGRpZmZzLCBsaW5lQXJyYXkpIHtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBkaWZmcy5sZW5ndGg7IHgrKykge1xuICAgIGNvbnN0IGNoYXJzID0gZGlmZnNbeF1bMV0sIHRleHQgPSBbXTtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNoYXJzLmxlbmd0aDsgeSsrKSB0ZXh0W3ldID0gbGluZUFycmF5W2NoYXJzLmNoYXJDb2RlQXQoeSldO1xuICAgIGRpZmZzW3hdWzFdID0gdGV4dC5qb2luKFwiXCIpO1xuICB9XG59XG5mdW5jdGlvbiBsaW5lc1RvQ2hhcnModGV4dEEsIHRleHRCKSB7XG4gIGNvbnN0IGxpbmVBcnJheSA9IFtdLCBsaW5lSGFzaCA9IHt9O1xuICBsaW5lQXJyYXlbMF0gPSBcIlwiO1xuICBmdW5jdGlvbiBkaWZmTGluZXNUb011bmdlKHRleHQpIHtcbiAgICBsZXQgY2hhcnMgPSBcIlwiLCBsaW5lU3RhcnQgPSAwLCBsaW5lRW5kID0gLTEsIGxpbmVBcnJheUxlbmd0aCA9IGxpbmVBcnJheS5sZW5ndGg7XG4gICAgZm9yICg7IGxpbmVFbmQgPCB0ZXh0Lmxlbmd0aCAtIDE7ICkge1xuICAgICAgbGluZUVuZCA9IHRleHQuaW5kZXhPZihgXG5gLCBsaW5lU3RhcnQpLCBsaW5lRW5kID09PSAtMSAmJiAobGluZUVuZCA9IHRleHQubGVuZ3RoIC0gMSk7XG4gICAgICBsZXQgbGluZSA9IHRleHQuc2xpY2UobGluZVN0YXJ0LCBsaW5lRW5kICsgMSk7XG4gICAgICAobGluZUhhc2guaGFzT3duUHJvcGVydHkgPyBsaW5lSGFzaC5oYXNPd25Qcm9wZXJ0eShsaW5lKSA6IGxpbmVIYXNoW2xpbmVdICE9PSB2b2lkIDApID8gY2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsaW5lSGFzaFtsaW5lXSkgOiAobGluZUFycmF5TGVuZ3RoID09PSBtYXhMaW5lcyAmJiAobGluZSA9IHRleHQuc2xpY2UobGluZVN0YXJ0KSwgbGluZUVuZCA9IHRleHQubGVuZ3RoKSwgY2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsaW5lQXJyYXlMZW5ndGgpLCBsaW5lSGFzaFtsaW5lXSA9IGxpbmVBcnJheUxlbmd0aCwgbGluZUFycmF5W2xpbmVBcnJheUxlbmd0aCsrXSA9IGxpbmUpLCBsaW5lU3RhcnQgPSBsaW5lRW5kICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzO1xuICB9XG4gIGxldCBtYXhMaW5lcyA9IDRlNDtcbiAgY29uc3QgY2hhcnMxID0gZGlmZkxpbmVzVG9NdW5nZSh0ZXh0QSk7XG4gIG1heExpbmVzID0gNjU1MzU7XG4gIGNvbnN0IGNoYXJzMiA9IGRpZmZMaW5lc1RvTXVuZ2UodGV4dEIpO1xuICByZXR1cm4ge1xuICAgIGNoYXJzMSxcbiAgICBjaGFyczIsXG4gICAgbGluZUFycmF5XG4gIH07XG59XG5mdW5jdGlvbiBkb0xpbmVNb2RlRGlmZih0ZXh0QSwgdGV4dEIsIG9wdHMpIHtcbiAgbGV0IHRleHQxID0gdGV4dEEsIHRleHQyID0gdGV4dEI7XG4gIGNvbnN0IGEgPSBsaW5lc1RvQ2hhcnModGV4dDEsIHRleHQyKTtcbiAgdGV4dDEgPSBhLmNoYXJzMSwgdGV4dDIgPSBhLmNoYXJzMjtcbiAgY29uc3QgbGluZWFycmF5ID0gYS5saW5lQXJyYXk7XG4gIGxldCBkaWZmcyA9IGRvRGlmZih0ZXh0MSwgdGV4dDIsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZTogb3B0cy5kZWFkbGluZVxuICB9KTtcbiAgY2hhcnNUb0xpbmVzKGRpZmZzLCBsaW5lYXJyYXkpLCBkaWZmcyA9IGNsZWFudXBTZW1hbnRpYyhkaWZmcyksIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIFwiXCJdKTtcbiAgbGV0IHBvaW50ZXIgPSAwLCBjb3VudERlbGV0ZSA9IDAsIGNvdW50SW5zZXJ0ID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSB7XG4gICAgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgICAgY2FzZSBESUZGX0lOU0VSVDpcbiAgICAgICAgY291bnRJbnNlcnQrKywgdGV4dEluc2VydCArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudERlbGV0ZSsrLCB0ZXh0RGVsZXRlICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgaWYgKGNvdW50RGVsZXRlID49IDEgJiYgY291bnRJbnNlcnQgPj0gMSkge1xuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCwgY291bnREZWxldGUgKyBjb3VudEluc2VydCksIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydDtcbiAgICAgICAgICBjb25zdCBhYSA9IGRvRGlmZih0ZXh0RGVsZXRlLCB0ZXh0SW5zZXJ0LCB7XG4gICAgICAgICAgICBjaGVja0xpbmVzOiAhMSxcbiAgICAgICAgICAgIGRlYWRsaW5lOiBvcHRzLmRlYWRsaW5lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGFhLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSBkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgYWFbal0pO1xuICAgICAgICAgIHBvaW50ZXIgKz0gYWEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50SW5zZXJ0ID0gMCwgY291bnREZWxldGUgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvbi5cIik7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnMucG9wKCksIGRpZmZzO1xufVxuZnVuY3Rpb24gY29tcHV0ZURpZmYodGV4dDEsIHRleHQyLCBvcHRzKSB7XG4gIGxldCBkaWZmcztcbiAgaWYgKCF0ZXh0MSkgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIGlmICghdGV4dDIpIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV1dO1xuICBjb25zdCBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDIsIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDEsIGkgPSBsb25ndGV4dC5pbmRleE9mKHNob3J0dGV4dCk7XG4gIGlmIChpICE9PSAtMSkgcmV0dXJuIGRpZmZzID0gW1tESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpXSwgW0RJRkZfRVFVQUwsIHNob3J0dGV4dF0sIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dLCB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggJiYgKGRpZmZzWzBdWzBdID0gRElGRl9ERUxFVEUsIGRpZmZzWzJdWzBdID0gRElGRl9ERUxFVEUpLCBkaWZmcztcbiAgaWYgKHNob3J0dGV4dC5sZW5ndGggPT09IDEpIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgY29uc3QgaGFsZk1hdGNoID0gZmluZEhhbGZNYXRjaCh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaGFsZk1hdGNoKSB7XG4gICAgY29uc3QgdGV4dDFBID0gaGFsZk1hdGNoWzBdLCB0ZXh0MUIgPSBoYWxmTWF0Y2hbMV0sIHRleHQyQSA9IGhhbGZNYXRjaFsyXSwgdGV4dDJCID0gaGFsZk1hdGNoWzNdLCBtaWRDb21tb24gPSBoYWxmTWF0Y2hbNF0sIGRpZmZzQSA9IGRvRGlmZih0ZXh0MUEsIHRleHQyQSwgb3B0cyksIGRpZmZzQiA9IGRvRGlmZih0ZXh0MUIsIHRleHQyQiwgb3B0cyk7XG4gICAgcmV0dXJuIGRpZmZzQS5jb25jYXQoW1tESUZGX0VRVUFMLCBtaWRDb21tb25dXSwgZGlmZnNCKTtcbiAgfVxuICByZXR1cm4gb3B0cy5jaGVja0xpbmVzICYmIHRleHQxLmxlbmd0aCA+IDEwMCAmJiB0ZXh0Mi5sZW5ndGggPiAxMDAgPyBkb0xpbmVNb2RlRGlmZih0ZXh0MSwgdGV4dDIsIG9wdHMpIDogYmlzZWN0KHRleHQxLCB0ZXh0Miwgb3B0cy5kZWFkbGluZSk7XG59XG52YXIgX19kZWZQcm9wJDIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIF9fZ2V0T3duUHJvcFN5bWJvbHMkMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsIF9faGFzT3duUHJvcCQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgX19wcm9wSXNFbnVtJDIgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLCBfX2RlZk5vcm1hbFByb3AkMiA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3AkMihvYmosIGtleSwge1xuICBlbnVtZXJhYmxlOiAhMCxcbiAgY29uZmlndXJhYmxlOiAhMCxcbiAgd3JpdGFibGU6ICEwLFxuICB2YWx1ZVxufSkgOiBvYmpba2V5XSA9IHZhbHVlLCBfX3NwcmVhZFZhbHVlcyQyID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKSBfX2hhc093blByb3AkMi5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQyKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scyQyKSBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMkMihiKSkgX19wcm9wSXNFbnVtJDIuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMihhLCBwcm9wLCBiW3Byb3BdKTtcbiAgcmV0dXJuIGE7XG59O1xuY29uc3QgRElGRl9ERUxFVEUgPSAtMSwgRElGRl9JTlNFUlQgPSAxLCBESUZGX0VRVUFMID0gMDtcbmZ1bmN0aW9uIGRpZmYodGV4dEEsIHRleHRCLCBvcHRzKSB7XG4gIGlmICh0ZXh0QSA9PT0gbnVsbCB8fCB0ZXh0QiA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTnVsbCBpbnB1dC4gKGRpZmYpXCIpO1xuICBjb25zdCBkaWZmcyA9IGRvRGlmZih0ZXh0QSwgdGV4dEIsIGNyZWF0ZUludGVybmFsT3B0cyhvcHRzIHx8IHt9KSk7XG4gIHJldHVybiBhZGp1c3REaWZmRm9yU3Vycm9nYXRlUGFpcnMoZGlmZnMpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIGRvRGlmZih0ZXh0QSwgdGV4dEIsIG9wdGlvbnMpIHtcbiAgbGV0IHRleHQxID0gdGV4dEEsIHRleHQyID0gdGV4dEI7XG4gIGlmICh0ZXh0MSA9PT0gdGV4dDIpIHJldHVybiB0ZXh0MSA/IFtbRElGRl9FUVVBTCwgdGV4dDFdXSA6IFtdO1xuICBsZXQgY29tbW9ubGVuZ3RoID0gZ2V0Q29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mik7XG4gIGNvbnN0IGNvbW1vbnByZWZpeCA9IHRleHQxLnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCBjb21tb25sZW5ndGggPSBnZXRDb21tb25TdWZmaXgodGV4dDEsIHRleHQyKTtcbiAgY29uc3QgY29tbW9uc3VmZml4ID0gdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKDAsIHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCksIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQyLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIGxldCBkaWZmcyA9IGNvbXB1dGVEaWZmKHRleHQxLCB0ZXh0Miwgb3B0aW9ucyk7XG4gIHJldHVybiBjb21tb25wcmVmaXggJiYgZGlmZnMudW5zaGlmdChbRElGRl9FUVVBTCwgY29tbW9ucHJlZml4XSksIGNvbW1vbnN1ZmZpeCAmJiBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKSwgZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlYWRMaW5lKHRpbWVvdXQpIHtcbiAgbGV0IHQgPSAxO1xuICByZXR1cm4gdHlwZW9mIHRpbWVvdXQgPCBcInVcIiAmJiAodCA9IHRpbWVvdXQgPD0gMCA/IE51bWJlci5NQVhfVkFMVUUgOiB0aW1lb3V0KSwgRGF0ZS5ub3coKSArIHQgKiAxZTM7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbE9wdHMob3B0cykge1xuICByZXR1cm4gX19zcHJlYWRWYWx1ZXMkMih7XG4gICAgY2hlY2tMaW5lczogITAsXG4gICAgZGVhZGxpbmU6IGNyZWF0ZURlYWRMaW5lKG9wdHMudGltZW91dCB8fCAxKVxuICB9LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVDaGFyKGRhdGEsIGNoYXIsIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gZGF0YSArIGNoYXIgOiBjaGFyICsgZGF0YTtcbn1cbmZ1bmN0aW9uIHNwbGl0Q2hhcihkYXRhLCBkaXIpIHtcbiAgcmV0dXJuIGRpciA9PT0gMSA/IFtkYXRhLnN1YnN0cmluZygwLCBkYXRhLmxlbmd0aCAtIDEpLCBkYXRhW2RhdGEubGVuZ3RoIC0gMV1dIDogW2RhdGEuc3Vic3RyaW5nKDEpLCBkYXRhWzBdXTtcbn1cbmZ1bmN0aW9uIGhhc1NoYXJlZENoYXIoZGlmZnMsIGksIGosIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gZGlmZnNbaV1bMV1bZGlmZnNbaV1bMV0ubGVuZ3RoIC0gMV0gPT09IGRpZmZzW2pdWzFdW2RpZmZzW2pdWzFdLmxlbmd0aCAtIDFdIDogZGlmZnNbaV1bMV1bMF0gPT09IGRpZmZzW2pdWzFdWzBdO1xufVxuZnVuY3Rpb24gZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgZGlyKSB7XG4gIGNvbnN0IGludiA9IGRpciA9PT0gMSA/IC0xIDogMTtcbiAgbGV0IGluc2VydElkeCA9IG51bGwsIGRlbGV0ZUlkeCA9IG51bGwsIGogPSBpICsgZGlyO1xuICBmb3IgKDsgaiA+PSAwICYmIGogPCBkaWZmcy5sZW5ndGggJiYgKGluc2VydElkeCA9PT0gbnVsbCB8fCBkZWxldGVJZHggPT09IG51bGwpOyBqICs9IGRpcikge1xuICAgIGNvbnN0IFtvcCwgdGV4dDJdID0gZGlmZnNbal07XG4gICAgaWYgKHRleHQyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgaWYgKG9wID09PSBESUZGX0lOU0VSVCkge1xuICAgICAgICBpbnNlcnRJZHggPT09IG51bGwgJiYgKGluc2VydElkeCA9IGopO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3AgPT09IERJRkZfREVMRVRFKSB7XG4gICAgICAgIGRlbGV0ZUlkeCA9PT0gbnVsbCAmJiAoZGVsZXRlSWR4ID0gaik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChvcCA9PT0gRElGRl9FUVVBTCkge1xuICAgICAgICBpZiAoaW5zZXJ0SWR4ID09PSBudWxsICYmIGRlbGV0ZUlkeCA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IFtyZXN0LCBjaGFyMl0gPSBzcGxpdENoYXIoZGlmZnNbaV1bMV0sIGRpcik7XG4gICAgICAgICAgZGlmZnNbaV1bMV0gPSByZXN0LCBkaWZmc1tqXVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2pdWzFdLCBjaGFyMiwgaW52KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbnNlcnRJZHggIT09IG51bGwgJiYgZGVsZXRlSWR4ICE9PSBudWxsICYmIGhhc1NoYXJlZENoYXIoZGlmZnMsIGluc2VydElkeCwgZGVsZXRlSWR4LCBkaXIpKSB7XG4gICAgY29uc3QgW2luc2VydFRleHQyLCBpbnNlcnRDaGFyXSA9IHNwbGl0Q2hhcihkaWZmc1tpbnNlcnRJZHhdWzFdLCBpbnYpLCBbZGVsZXRlVGV4dF0gPSBzcGxpdENoYXIoZGlmZnNbZGVsZXRlSWR4XVsxXSwgaW52KTtcbiAgICBkaWZmc1tpbnNlcnRJZHhdWzFdID0gaW5zZXJ0VGV4dDIsIGRpZmZzW2RlbGV0ZUlkeF1bMV0gPSBkZWxldGVUZXh0LCBkaWZmc1tpXVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2ldWzFdLCBpbnNlcnRDaGFyLCBkaXIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBbdGV4dCwgY2hhcl0gPSBzcGxpdENoYXIoZGlmZnNbaV1bMV0sIGRpcik7XG4gIGRpZmZzW2ldWzFdID0gdGV4dCwgaW5zZXJ0SWR4ID09PSBudWxsID8gKGRpZmZzLnNwbGljZShqLCAwLCBbRElGRl9JTlNFUlQsIGNoYXJdKSwgZGVsZXRlSWR4ICE9PSBudWxsICYmIGRlbGV0ZUlkeCA+PSBqICYmIGRlbGV0ZUlkeCsrKSA6IGRpZmZzW2luc2VydElkeF1bMV0gPSBjb21iaW5lQ2hhcihkaWZmc1tpbnNlcnRJZHhdWzFdLCBjaGFyLCBpbnYpLCBkZWxldGVJZHggPT09IG51bGwgPyBkaWZmcy5zcGxpY2UoaiwgMCwgW0RJRkZfREVMRVRFLCBjaGFyXSkgOiBkaWZmc1tkZWxldGVJZHhdWzFdID0gY29tYmluZUNoYXIoZGlmZnNbZGVsZXRlSWR4XVsxXSwgY2hhciwgaW52KTtcbn1cbmZ1bmN0aW9uIGFkanVzdERpZmZGb3JTdXJyb2dhdGVQYWlycyhkaWZmcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW2RpZmZUeXBlLCBkaWZmVGV4dF0gPSBkaWZmc1tpXTtcbiAgICBpZiAoZGlmZlRleHQubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICBjb25zdCBmaXJzdENoYXIgPSBkaWZmVGV4dFswXSwgbGFzdENoYXIgPSBkaWZmVGV4dFtkaWZmVGV4dC5sZW5ndGggLSAxXTtcbiAgICBpc0hpZ2hTdXJyb2dhdGUobGFzdENoYXIpICYmIGRpZmZUeXBlID09PSBESUZGX0VRVUFMICYmIGRlaXNvbGF0ZUNoYXIoZGlmZnMsIGksIDEpLCBpc0xvd1N1cnJvZ2F0ZShmaXJzdENoYXIpICYmIGRpZmZUeXBlID09PSBESUZGX0VRVUFMICYmIGRlaXNvbGF0ZUNoYXIoZGlmZnMsIGksIC0xKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSsrKSBkaWZmc1tpXVsxXS5sZW5ndGggPT09IDAgJiYgZGlmZnMuc3BsaWNlKGksIDEpO1xufVxuZnVuY3Rpb24gY2xlYW51cFNlbWFudGljKHJhd0RpZmZzKSB7XG4gIGxldCBkaWZmcyA9IHJhd0RpZmZzLm1hcCgoZGlmZjIpID0+IGNsb25lRGlmZihkaWZmMikpLCBoYXNDaGFuZ2VzID0gITE7XG4gIGNvbnN0IGVxdWFsaXRpZXMgPSBbXTtcbiAgbGV0IGVxdWFsaXRpZXNMZW5ndGggPSAwLCBsYXN0RXF1YWxpdHkgPSBudWxsLCBwb2ludGVyID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczEgPSAwLCBsZW5ndGhEZWxldGlvbnMxID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMDtcbiAgZm9yICg7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkgZGlmZnNbcG9pbnRlcl1bMF0gPT09IERJRkZfRVFVQUwgPyAoZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoKytdID0gcG9pbnRlciwgbGVuZ3RoSW5zZXJ0aW9uczEgPSBsZW5ndGhJbnNlcnRpb25zMiwgbGVuZ3RoRGVsZXRpb25zMSA9IGxlbmd0aERlbGV0aW9uczIsIGxlbmd0aEluc2VydGlvbnMyID0gMCwgbGVuZ3RoRGVsZXRpb25zMiA9IDAsIGxhc3RFcXVhbGl0eSA9IGRpZmZzW3BvaW50ZXJdWzFdKSA6IChkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9JTlNFUlQgPyBsZW5ndGhJbnNlcnRpb25zMiArPSBkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggOiBsZW5ndGhEZWxldGlvbnMyICs9IGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCwgbGFzdEVxdWFsaXR5ICYmIGxhc3RFcXVhbGl0eS5sZW5ndGggPD0gTWF0aC5tYXgobGVuZ3RoSW5zZXJ0aW9uczEsIGxlbmd0aERlbGV0aW9uczEpICYmIGxhc3RFcXVhbGl0eS5sZW5ndGggPD0gTWF0aC5tYXgobGVuZ3RoSW5zZXJ0aW9uczIsIGxlbmd0aERlbGV0aW9uczIpICYmIChkaWZmcy5zcGxpY2UoZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0sIDAsIFtESUZGX0RFTEVURSwgbGFzdEVxdWFsaXR5XSksIGRpZmZzW2VxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdICsgMV1bMF0gPSBESUZGX0lOU0VSVCwgZXF1YWxpdGllc0xlbmd0aC0tLCBlcXVhbGl0aWVzTGVuZ3RoLS0sIHBvaW50ZXIgPSBlcXVhbGl0aWVzTGVuZ3RoID4gMCA/IGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdIDogLTEsIGxlbmd0aEluc2VydGlvbnMxID0gMCwgbGVuZ3RoRGVsZXRpb25zMSA9IDAsIGxlbmd0aEluc2VydGlvbnMyID0gMCwgbGVuZ3RoRGVsZXRpb25zMiA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIGhhc0NoYW5nZXMgPSAhMCkpLCBwb2ludGVyKys7XG4gIGZvciAoaGFzQ2hhbmdlcyAmJiAoZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpKSwgZGlmZnMgPSBjbGVhbnVwU2VtYW50aWNMb3NzbGVzcyhkaWZmcyksIHBvaW50ZXIgPSAxOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09PSBESUZGX0RFTEVURSAmJiBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9JTlNFUlQpIHtcbiAgICAgIGNvbnN0IGRlbGV0aW9uID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLCBpbnNlcnRpb24gPSBkaWZmc1twb2ludGVyXVsxXSwgb3ZlcmxhcExlbmd0aDEgPSBnZXRDb21tb25PdmVybGFwKGRlbGV0aW9uLCBpbnNlcnRpb24pLCBvdmVybGFwTGVuZ3RoMiA9IGdldENvbW1vbk92ZXJsYXAoaW5zZXJ0aW9uLCBkZWxldGlvbik7XG4gICAgICBvdmVybGFwTGVuZ3RoMSA+PSBvdmVybGFwTGVuZ3RoMiA/IChvdmVybGFwTGVuZ3RoMSA+PSBkZWxldGlvbi5sZW5ndGggLyAyIHx8IG92ZXJsYXBMZW5ndGgxID49IGluc2VydGlvbi5sZW5ndGggLyAyKSAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0VRVUFMLCBpbnNlcnRpb24uc3Vic3RyaW5nKDAsIG92ZXJsYXBMZW5ndGgxKV0pLCBkaWZmc1twb2ludGVyIC0gMV1bMV0gPSBkZWxldGlvbi5zdWJzdHJpbmcoMCwgZGVsZXRpb24ubGVuZ3RoIC0gb3ZlcmxhcExlbmd0aDEpLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBpbnNlcnRpb24uc3Vic3RyaW5nKG92ZXJsYXBMZW5ndGgxKSwgcG9pbnRlcisrKSA6IChvdmVybGFwTGVuZ3RoMiA+PSBkZWxldGlvbi5sZW5ndGggLyAyIHx8IG92ZXJsYXBMZW5ndGgyID49IGluc2VydGlvbi5sZW5ndGggLyAyKSAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0VRVUFMLCBkZWxldGlvbi5zdWJzdHJpbmcoMCwgb3ZlcmxhcExlbmd0aDIpXSksIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9IERJRkZfSU5TRVJULCBkaWZmc1twb2ludGVyIC0gMV1bMV0gPSBpbnNlcnRpb24uc3Vic3RyaW5nKDAsIGluc2VydGlvbi5sZW5ndGggLSBvdmVybGFwTGVuZ3RoMiksIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9IERJRkZfREVMRVRFLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBkZWxldGlvbi5zdWJzdHJpbmcob3ZlcmxhcExlbmd0aDIpLCBwb2ludGVyKyspLCBwb2ludGVyKys7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnM7XG59XG5jb25zdCBub25BbHBoYU51bWVyaWNSZWdleCA9IC9bXmEtekEtWjAtOV0vLCB3aGl0ZXNwYWNlUmVnZXggPSAvXFxzLywgbGluZWJyZWFrUmVnZXggPSAvW1xcclxcbl0vLCBibGFua2xpbmVFbmRSZWdleCA9IC9cXG5cXHI/XFxuJC8sIGJsYW5rbGluZVN0YXJ0UmVnZXggPSAvXlxccj9cXG5cXHI/XFxuLztcbmZ1bmN0aW9uIGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKHJhd0RpZmZzKSB7XG4gIGNvbnN0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSk7XG4gIGZ1bmN0aW9uIGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShvbmUsIHR3bykge1xuICAgIGlmICghb25lIHx8ICF0d28pIHJldHVybiA2O1xuICAgIGNvbnN0IGNoYXIxID0gb25lLmNoYXJBdChvbmUubGVuZ3RoIC0gMSksIGNoYXIyID0gdHdvLmNoYXJBdCgwKSwgbm9uQWxwaGFOdW1lcmljMSA9IGNoYXIxLm1hdGNoKG5vbkFscGhhTnVtZXJpY1JlZ2V4KSwgbm9uQWxwaGFOdW1lcmljMiA9IGNoYXIyLm1hdGNoKG5vbkFscGhhTnVtZXJpY1JlZ2V4KSwgd2hpdGVzcGFjZTEgPSBub25BbHBoYU51bWVyaWMxICYmIGNoYXIxLm1hdGNoKHdoaXRlc3BhY2VSZWdleCksIHdoaXRlc3BhY2UyID0gbm9uQWxwaGFOdW1lcmljMiAmJiBjaGFyMi5tYXRjaCh3aGl0ZXNwYWNlUmVnZXgpLCBsaW5lQnJlYWsxID0gd2hpdGVzcGFjZTEgJiYgY2hhcjEubWF0Y2gobGluZWJyZWFrUmVnZXgpLCBsaW5lQnJlYWsyID0gd2hpdGVzcGFjZTIgJiYgY2hhcjIubWF0Y2gobGluZWJyZWFrUmVnZXgpLCBibGFua0xpbmUxID0gbGluZUJyZWFrMSAmJiBvbmUubWF0Y2goYmxhbmtsaW5lRW5kUmVnZXgpLCBibGFua0xpbmUyID0gbGluZUJyZWFrMiAmJiB0d28ubWF0Y2goYmxhbmtsaW5lU3RhcnRSZWdleCk7XG4gICAgcmV0dXJuIGJsYW5rTGluZTEgfHwgYmxhbmtMaW5lMiA/IDUgOiBsaW5lQnJlYWsxIHx8IGxpbmVCcmVhazIgPyA0IDogbm9uQWxwaGFOdW1lcmljMSAmJiAhd2hpdGVzcGFjZTEgJiYgd2hpdGVzcGFjZTIgPyAzIDogd2hpdGVzcGFjZTEgfHwgd2hpdGVzcGFjZTIgPyAyIDogbm9uQWxwaGFOdW1lcmljMSB8fCBub25BbHBoYU51bWVyaWMyID8gMSA6IDA7XG4gIH1cbiAgbGV0IHBvaW50ZXIgPSAxO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDE7ICkge1xuICAgIGlmIChkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfRVFVQUwgJiYgZGlmZnNbcG9pbnRlciArIDFdWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICBsZXQgZXF1YWxpdHkxID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLCBlZGl0ID0gZGlmZnNbcG9pbnRlcl1bMV0sIGVxdWFsaXR5MiA9IGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgIGNvbnN0IGNvbW1vbk9mZnNldCA9IGdldENvbW1vblN1ZmZpeChlcXVhbGl0eTEsIGVkaXQpO1xuICAgICAgaWYgKGNvbW1vbk9mZnNldCkge1xuICAgICAgICBjb25zdCBjb21tb25TdHJpbmcgPSBlZGl0LnN1YnN0cmluZyhlZGl0Lmxlbmd0aCAtIGNvbW1vbk9mZnNldCk7XG4gICAgICAgIGVxdWFsaXR5MSA9IGVxdWFsaXR5MS5zdWJzdHJpbmcoMCwgZXF1YWxpdHkxLmxlbmd0aCAtIGNvbW1vbk9mZnNldCksIGVkaXQgPSBjb21tb25TdHJpbmcgKyBlZGl0LnN1YnN0cmluZygwLCBlZGl0Lmxlbmd0aCAtIGNvbW1vbk9mZnNldCksIGVxdWFsaXR5MiA9IGNvbW1vblN0cmluZyArIGVxdWFsaXR5MjtcbiAgICAgIH1cbiAgICAgIGxldCBiZXN0RXF1YWxpdHkxID0gZXF1YWxpdHkxLCBiZXN0RWRpdCA9IGVkaXQsIGJlc3RFcXVhbGl0eTIgPSBlcXVhbGl0eTIsIGJlc3RTY29yZSA9IGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShlcXVhbGl0eTEsIGVkaXQpICsgZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVkaXQsIGVxdWFsaXR5Mik7XG4gICAgICBmb3IgKDsgZWRpdC5jaGFyQXQoMCkgPT09IGVxdWFsaXR5Mi5jaGFyQXQoMCk7ICkge1xuICAgICAgICBlcXVhbGl0eTEgKz0gZWRpdC5jaGFyQXQoMCksIGVkaXQgPSBlZGl0LnN1YnN0cmluZygxKSArIGVxdWFsaXR5Mi5jaGFyQXQoMCksIGVxdWFsaXR5MiA9IGVxdWFsaXR5Mi5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGNvbnN0IHNjb3JlID0gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVxdWFsaXR5MSwgZWRpdCkgKyBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZWRpdCwgZXF1YWxpdHkyKTtcbiAgICAgICAgc2NvcmUgPj0gYmVzdFNjb3JlICYmIChiZXN0U2NvcmUgPSBzY29yZSwgYmVzdEVxdWFsaXR5MSA9IGVxdWFsaXR5MSwgYmVzdEVkaXQgPSBlZGl0LCBiZXN0RXF1YWxpdHkyID0gZXF1YWxpdHkyKTtcbiAgICAgIH1cbiAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSAhPT0gYmVzdEVxdWFsaXR5MSAmJiAoYmVzdEVxdWFsaXR5MSA/IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGJlc3RFcXVhbGl0eTEgOiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKSwgcG9pbnRlci0tKSwgZGlmZnNbcG9pbnRlcl1bMV0gPSBiZXN0RWRpdCwgYmVzdEVxdWFsaXR5MiA/IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGJlc3RFcXVhbGl0eTIgOiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIgKyAxLCAxKSwgcG9pbnRlci0tKSk7XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICByZXR1cm4gZGlmZnM7XG59XG5mdW5jdGlvbiBjbGVhbnVwTWVyZ2UocmF3RGlmZnMpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSk7XG4gIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIFwiXCJdKTtcbiAgbGV0IHBvaW50ZXIgPSAwLCBjb3VudERlbGV0ZSA9IDAsIGNvdW50SW5zZXJ0ID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiLCBjb21tb25sZW5ndGg7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHN3aXRjaCAoZGlmZnNbcG9pbnRlcl1bMF0pIHtcbiAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgY291bnRJbnNlcnQrKywgdGV4dEluc2VydCArPSBkaWZmc1twb2ludGVyXVsxXSwgcG9pbnRlcisrO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgIGNvdW50RGVsZXRlKyssIHRleHREZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV0sIHBvaW50ZXIrKztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgIGNvdW50RGVsZXRlICsgY291bnRJbnNlcnQgPiAxID8gKGNvdW50RGVsZXRlICE9PSAwICYmIGNvdW50SW5zZXJ0ICE9PSAwICYmIChjb21tb25sZW5ndGggPSBnZXRDb21tb25QcmVmaXgodGV4dEluc2VydCwgdGV4dERlbGV0ZSksIGNvbW1vbmxlbmd0aCAhPT0gMCAmJiAocG9pbnRlciAtIGNvdW50RGVsZXRlIC0gY291bnRJbnNlcnQgPiAwICYmIGRpZmZzW3BvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0IC0gMV1bMF0gPT09IERJRkZfRVFVQUwgPyBkaWZmc1twb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCAtIDFdWzFdICs9IHRleHRJbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCkgOiAoZGlmZnMuc3BsaWNlKDAsIDAsIFtESUZGX0VRVUFMLCB0ZXh0SW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSksIHBvaW50ZXIrKyksIHRleHRJbnNlcnQgPSB0ZXh0SW5zZXJ0LnN1YnN0cmluZyhjb21tb25sZW5ndGgpLCB0ZXh0RGVsZXRlID0gdGV4dERlbGV0ZS5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKSksIGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblN1ZmZpeCh0ZXh0SW5zZXJ0LCB0ZXh0RGVsZXRlKSwgY29tbW9ubGVuZ3RoICE9PSAwICYmIChkaWZmc1twb2ludGVyXVsxXSA9IHRleHRJbnNlcnQuc3Vic3RyaW5nKHRleHRJbnNlcnQubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXJdWzFdLCB0ZXh0SW5zZXJ0ID0gdGV4dEluc2VydC5zdWJzdHJpbmcoMCwgdGV4dEluc2VydC5sZW5ndGggLSBjb21tb25sZW5ndGgpLCB0ZXh0RGVsZXRlID0gdGV4dERlbGV0ZS5zdWJzdHJpbmcoMCwgdGV4dERlbGV0ZS5sZW5ndGggLSBjb21tb25sZW5ndGgpKSksIHBvaW50ZXIgLT0gY291bnREZWxldGUgKyBjb3VudEluc2VydCwgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIGNvdW50RGVsZXRlICsgY291bnRJbnNlcnQpLCB0ZXh0RGVsZXRlLmxlbmd0aCAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0RFTEVURSwgdGV4dERlbGV0ZV0pLCBwb2ludGVyKyspLCB0ZXh0SW5zZXJ0Lmxlbmd0aCAmJiAoZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDAsIFtESUZGX0lOU0VSVCwgdGV4dEluc2VydF0pLCBwb2ludGVyKyspLCBwb2ludGVyKyspIDogcG9pbnRlciAhPT0gMCAmJiBkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfRVFVQUwgPyAoZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXJdWzFdLCBkaWZmcy5zcGxpY2UocG9pbnRlciwgMSkpIDogcG9pbnRlcisrLCBjb3VudEluc2VydCA9IDAsIGNvdW50RGVsZXRlID0gMCwgdGV4dERlbGV0ZSA9IFwiXCIsIHRleHRJbnNlcnQgPSBcIlwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGlmZiBvcGVyYXRpb25cIik7XG4gIH1cbiAgZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0gPT09IFwiXCIgJiYgZGlmZnMucG9wKCk7XG4gIGxldCBoYXNDaGFuZ2VzID0gITE7XG4gIGZvciAocG9pbnRlciA9IDE7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGggLSAxOyApIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiBkaWZmc1twb2ludGVyICsgMV1bMF0gPT09IERJRkZfRVFVQUwgJiYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLSBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKSA9PT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdID8gKGRpZmZzW3BvaW50ZXJdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpLCBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gKyBkaWZmc1twb2ludGVyICsgMV1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyIC0gMSwgMSksIGhhc0NoYW5nZXMgPSAhMCkgOiBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgPT09IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSAmJiAoZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgKyBkaWZmc1twb2ludGVyICsgMV1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSksIGhhc0NoYW5nZXMgPSAhMCkpLCBwb2ludGVyKys7XG4gIHJldHVybiBoYXNDaGFuZ2VzICYmIChkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcykpLCBkaWZmcztcbn1cbmZ1bmN0aW9uIHRydWVDb3VudCguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzLnJlZHVjZSgobiwgYm9vbCkgPT4gbiArIChib29sID8gMSA6IDApLCAwKTtcbn1cbmZ1bmN0aW9uIGNsZWFudXBFZmZpY2llbmN5KHJhd0RpZmZzLCBlZGl0Q29zdCA9IDQpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSksIGhhc0NoYW5nZXMgPSAhMTtcbiAgY29uc3QgZXF1YWxpdGllcyA9IFtdO1xuICBsZXQgZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIHBvaW50ZXIgPSAwLCBwcmVJbnMgPSAhMSwgcHJlRGVsID0gITEsIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9FUVVBTCA/IChkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggPCBlZGl0Q29zdCAmJiAocG9zdElucyB8fCBwb3N0RGVsKSA/IChlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGgrK10gPSBwb2ludGVyLCBwcmVJbnMgPSBwb3N0SW5zLCBwcmVEZWwgPSBwb3N0RGVsLCBsYXN0RXF1YWxpdHkgPSBkaWZmc1twb2ludGVyXVsxXSkgOiAoZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwpLCBwb3N0SW5zID0gITEsIHBvc3REZWwgPSAhMSkgOiAoZGlmZnNbcG9pbnRlcl1bMF0gPT09IERJRkZfREVMRVRFID8gcG9zdERlbCA9ICEwIDogcG9zdElucyA9ICEwLCBsYXN0RXF1YWxpdHkgJiYgKHByZUlucyAmJiBwcmVEZWwgJiYgcG9zdElucyAmJiBwb3N0RGVsIHx8IGxhc3RFcXVhbGl0eS5sZW5ndGggPCBlZGl0Q29zdCAvIDIgJiYgdHJ1ZUNvdW50KHByZUlucywgcHJlRGVsLCBwb3N0SW5zLCBwb3N0RGVsKSA9PT0gMykgJiYgKGRpZmZzLnNwbGljZShlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSwgMCwgW0RJRkZfREVMRVRFLCBsYXN0RXF1YWxpdHldKSwgZGlmZnNbZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gKyAxXVswXSA9IERJRkZfSU5TRVJULCBlcXVhbGl0aWVzTGVuZ3RoLS0sIGxhc3RFcXVhbGl0eSA9IG51bGwsIHByZUlucyAmJiBwcmVEZWwgPyAocG9zdElucyA9ICEwLCBwb3N0RGVsID0gITAsIGVxdWFsaXRpZXNMZW5ndGggPSAwKSA6IChlcXVhbGl0aWVzTGVuZ3RoLS0sIHBvaW50ZXIgPSBlcXVhbGl0aWVzTGVuZ3RoID4gMCA/IGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdIDogLTEsIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExKSwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgcmV0dXJuIGhhc0NoYW5nZXMgJiYgKGRpZmZzID0gY2xlYW51cE1lcmdlKGRpZmZzKSksIGRpZmZzO1xufVxudmFyIF9fZGVmUHJvcCQxID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBfX2dldE93blByb3BTeW1ib2xzJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLCBfX2hhc093blByb3AkMSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksIF9fcHJvcElzRW51bSQxID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSwgX19kZWZOb3JtYWxQcm9wJDEgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wJDEob2JqLCBrZXksIHtcbiAgZW51bWVyYWJsZTogITAsXG4gIGNvbmZpZ3VyYWJsZTogITAsXG4gIHdyaXRhYmxlOiAhMCxcbiAgdmFsdWVcbn0pIDogb2JqW2tleV0gPSB2YWx1ZSwgX19zcHJlYWRWYWx1ZXMkMSA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSkgX19oYXNPd25Qcm9wJDEuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMShhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMkMSkgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzJDEoYikpIF9fcHJvcElzRW51bSQxLmNhbGwoYiwgcHJvcCkgJiYgX19kZWZOb3JtYWxQcm9wJDEoYSwgcHJvcCwgYltwcm9wXSk7XG4gIHJldHVybiBhO1xufTtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgLyoqXG4gICAqIEF0IHdoYXQgcG9pbnQgaXMgbm8gbWF0Y2ggZGVjbGFyZWQgKDAuMCA9IHBlcmZlY3Rpb24sIDEuMCA9IHZlcnkgbG9vc2UpLlxuICAgKi9cbiAgdGhyZXNob2xkOiAwLjUsXG4gIC8qKlxuICAgKiBIb3cgZmFyIHRvIHNlYXJjaCBmb3IgYSBtYXRjaCAoMCA9IGV4YWN0IGxvY2F0aW9uLCAxMDAwKyA9IGJyb2FkIG1hdGNoKS5cbiAgICogQSBtYXRjaCB0aGlzIG1hbnkgY2hhcmFjdGVycyBhd2F5IGZyb20gdGhlIGV4cGVjdGVkIGxvY2F0aW9uIHdpbGwgYWRkXG4gICAqIDEuMCB0byB0aGUgc2NvcmUgKDAuMCBpcyBhIHBlcmZlY3QgbWF0Y2gpLlxuICAgKi9cbiAgZGlzdGFuY2U6IDFlM1xufTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdHMob3B0aW9ucykge1xuICByZXR1cm4gX19zcHJlYWRWYWx1ZXMkMShfX3NwcmVhZFZhbHVlcyQxKHt9LCBERUZBVUxUX09QVElPTlMpLCBvcHRpb25zKTtcbn1cbmNvbnN0IE1BWF9CSVRTJDEgPSAzMjtcbmZ1bmN0aW9uIGJpdGFwKHRleHQsIHBhdHRlcm4sIGxvYywgb3B0cyA9IHt9KSB7XG4gIGlmIChwYXR0ZXJuLmxlbmd0aCA+IE1BWF9CSVRTJDEpIHRocm93IG5ldyBFcnJvcihcIlBhdHRlcm4gdG9vIGxvbmcgZm9yIHRoaXMgYnJvd3Nlci5cIik7XG4gIGNvbnN0IG9wdGlvbnMgPSBhcHBseURlZmF1bHRzKG9wdHMpLCBzID0gZ2V0QWxwaGFiZXRGcm9tUGF0dGVybihwYXR0ZXJuKTtcbiAgZnVuY3Rpb24gZ2V0Qml0YXBTY29yZShlLCB4KSB7XG4gICAgY29uc3QgYWNjdXJhY3kgPSBlIC8gcGF0dGVybi5sZW5ndGgsIHByb3hpbWl0eSA9IE1hdGguYWJzKGxvYyAtIHgpO1xuICAgIHJldHVybiBvcHRpb25zLmRpc3RhbmNlID8gYWNjdXJhY3kgKyBwcm94aW1pdHkgLyBvcHRpb25zLmRpc3RhbmNlIDogcHJveGltaXR5ID8gMSA6IGFjY3VyYWN5O1xuICB9XG4gIGxldCBzY29yZVRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkLCBiZXN0TG9jID0gdGV4dC5pbmRleE9mKHBhdHRlcm4sIGxvYyk7XG4gIGJlc3RMb2MgIT09IC0xICYmIChzY29yZVRocmVzaG9sZCA9IE1hdGgubWluKGdldEJpdGFwU2NvcmUoMCwgYmVzdExvYyksIHNjb3JlVGhyZXNob2xkKSwgYmVzdExvYyA9IHRleHQubGFzdEluZGV4T2YocGF0dGVybiwgbG9jICsgcGF0dGVybi5sZW5ndGgpLCBiZXN0TG9jICE9PSAtMSAmJiAoc2NvcmVUaHJlc2hvbGQgPSBNYXRoLm1pbihnZXRCaXRhcFNjb3JlKDAsIGJlc3RMb2MpLCBzY29yZVRocmVzaG9sZCkpKTtcbiAgY29uc3QgbWF0Y2htYXNrID0gMSA8PCBwYXR0ZXJuLmxlbmd0aCAtIDE7XG4gIGJlc3RMb2MgPSAtMTtcbiAgbGV0IGJpbk1pbiwgYmluTWlkLCBiaW5NYXggPSBwYXR0ZXJuLmxlbmd0aCArIHRleHQubGVuZ3RoLCBsYXN0UmQgPSBbXTtcbiAgZm9yIChsZXQgZCA9IDA7IGQgPCBwYXR0ZXJuLmxlbmd0aDsgZCsrKSB7XG4gICAgZm9yIChiaW5NaW4gPSAwLCBiaW5NaWQgPSBiaW5NYXg7IGJpbk1pbiA8IGJpbk1pZDsgKSBnZXRCaXRhcFNjb3JlKGQsIGxvYyArIGJpbk1pZCkgPD0gc2NvcmVUaHJlc2hvbGQgPyBiaW5NaW4gPSBiaW5NaWQgOiBiaW5NYXggPSBiaW5NaWQsIGJpbk1pZCA9IE1hdGguZmxvb3IoKGJpbk1heCAtIGJpbk1pbikgLyAyICsgYmluTWluKTtcbiAgICBiaW5NYXggPSBiaW5NaWQ7XG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgoMSwgbG9jIC0gYmluTWlkICsgMSk7XG4gICAgY29uc3QgZmluaXNoID0gTWF0aC5taW4obG9jICsgYmluTWlkLCB0ZXh0Lmxlbmd0aCkgKyBwYXR0ZXJuLmxlbmd0aCwgcmQgPSBuZXcgQXJyYXkoZmluaXNoICsgMik7XG4gICAgcmRbZmluaXNoICsgMV0gPSAoMSA8PCBkKSAtIDE7XG4gICAgZm9yIChsZXQgaiA9IGZpbmlzaDsgaiA+PSBzdGFydDsgai0tKSB7XG4gICAgICBjb25zdCBjaGFyTWF0Y2ggPSBzW3RleHQuY2hhckF0KGogLSAxKV07XG4gICAgICBpZiAoZCA9PT0gMCA/IHJkW2pdID0gKHJkW2ogKyAxXSA8PCAxIHwgMSkgJiBjaGFyTWF0Y2ggOiByZFtqXSA9IChyZFtqICsgMV0gPDwgMSB8IDEpICYgY2hhck1hdGNoIHwgKChsYXN0UmRbaiArIDFdIHwgbGFzdFJkW2pdKSA8PCAxIHwgMSkgfCBsYXN0UmRbaiArIDFdLCByZFtqXSAmIG1hdGNobWFzaykge1xuICAgICAgICBjb25zdCBzY29yZSA9IGdldEJpdGFwU2NvcmUoZCwgaiAtIDEpO1xuICAgICAgICBpZiAoc2NvcmUgPD0gc2NvcmVUaHJlc2hvbGQpIGlmIChzY29yZVRocmVzaG9sZCA9IHNjb3JlLCBiZXN0TG9jID0gaiAtIDEsIGJlc3RMb2MgPiBsb2MpIHN0YXJ0ID0gTWF0aC5tYXgoMSwgMiAqIGxvYyAtIGJlc3RMb2MpO1xuICAgICAgICBlbHNlIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2V0Qml0YXBTY29yZShkICsgMSwgbG9jKSA+IHNjb3JlVGhyZXNob2xkKSBicmVhaztcbiAgICBsYXN0UmQgPSByZDtcbiAgfVxuICByZXR1cm4gYmVzdExvYztcbn1cbmZ1bmN0aW9uIGdldEFscGhhYmV0RnJvbVBhdHRlcm4ocGF0dGVybikge1xuICBjb25zdCBzID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykgc1twYXR0ZXJuLmNoYXJBdChpKV0gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHNbcGF0dGVybi5jaGFyQXQoaSldIHw9IDEgPDwgcGF0dGVybi5sZW5ndGggLSBpIC0gMTtcbiAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBtYXRjaCh0ZXh0LCBwYXR0ZXJuLCBzZWFyY2hMb2NhdGlvbikge1xuICBpZiAodGV4dCA9PT0gbnVsbCB8fCBwYXR0ZXJuID09PSBudWxsIHx8IHNlYXJjaExvY2F0aW9uID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJOdWxsIGlucHV0LiAobWF0Y2goKSlcIik7XG4gIGNvbnN0IGxvYyA9IE1hdGgubWF4KDAsIE1hdGgubWluKHNlYXJjaExvY2F0aW9uLCB0ZXh0Lmxlbmd0aCkpO1xuICBpZiAodGV4dCA9PT0gcGF0dGVybikgcmV0dXJuIDA7XG4gIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgIGlmICh0ZXh0LnN1YnN0cmluZyhsb2MsIGxvYyArIHBhdHRlcm4ubGVuZ3RoKSA9PT0gcGF0dGVybikgcmV0dXJuIGxvYztcbiAgfSBlbHNlIHJldHVybiAtMTtcbiAgcmV0dXJuIGJpdGFwKHRleHQsIHBhdHRlcm4sIGxvYyk7XG59XG5mdW5jdGlvbiBkaWZmVGV4dDEoZGlmZnMpIHtcbiAgY29uc3QgdGV4dCA9IFtdO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSBkaWZmc1t4XVswXSAhPT0gRElGRl9JTlNFUlQgJiYgKHRleHRbeF0gPSBkaWZmc1t4XVsxXSk7XG4gIHJldHVybiB0ZXh0LmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBkaWZmVGV4dDIoZGlmZnMpIHtcbiAgY29uc3QgdGV4dCA9IFtdO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSBkaWZmc1t4XVswXSAhPT0gRElGRl9ERUxFVEUgJiYgKHRleHRbeF0gPSBkaWZmc1t4XVsxXSk7XG4gIHJldHVybiB0ZXh0LmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBsZXZlbnNodGVpbihkaWZmcykge1xuICBsZXQgbGV2ZW4gPSAwLCBpbnNlcnRpb25zID0gMCwgZGVsZXRpb25zID0gMDtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBkaWZmcy5sZW5ndGg7IHgrKykge1xuICAgIGNvbnN0IG9wID0gZGlmZnNbeF1bMF0sIGRhdGEgPSBkaWZmc1t4XVsxXTtcbiAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBpbnNlcnRpb25zICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9ERUxFVEU6XG4gICAgICAgIGRlbGV0aW9ucyArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfRVFVQUw6XG4gICAgICAgIGxldmVuICs9IE1hdGgubWF4KGluc2VydGlvbnMsIGRlbGV0aW9ucyksIGluc2VydGlvbnMgPSAwLCBkZWxldGlvbnMgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGlmZiBvcGVyYXRpb24uXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGV2ZW4gKz0gTWF0aC5tYXgoaW5zZXJ0aW9ucywgZGVsZXRpb25zKSwgbGV2ZW47XG59XG5mdW5jdGlvbiB4SW5kZXgoZGlmZnMsIGxvYykge1xuICBsZXQgY2hhcnMxID0gMCwgY2hhcnMyID0gMCwgbGFzdENoYXJzMSA9IDAsIGxhc3RDaGFyczIgPSAwLCB4O1xuICBmb3IgKHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoICYmIChkaWZmc1t4XVswXSAhPT0gRElGRl9JTlNFUlQgJiYgKGNoYXJzMSArPSBkaWZmc1t4XVsxXS5sZW5ndGgpLCBkaWZmc1t4XVswXSAhPT0gRElGRl9ERUxFVEUgJiYgKGNoYXJzMiArPSBkaWZmc1t4XVsxXS5sZW5ndGgpLCAhKGNoYXJzMSA+IGxvYykpOyB4KyspIGxhc3RDaGFyczEgPSBjaGFyczEsIGxhc3RDaGFyczIgPSBjaGFyczI7XG4gIHJldHVybiBkaWZmcy5sZW5ndGggIT09IHggJiYgZGlmZnNbeF1bMF0gPT09IERJRkZfREVMRVRFID8gbGFzdENoYXJzMiA6IGxhc3RDaGFyczIgKyAobG9jIC0gbGFzdENoYXJzMSk7XG59XG5mdW5jdGlvbiBjb3VudFV0ZjhCeXRlcyhzdHIpIHtcbiAgbGV0IGJ5dGVzID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb2RlUG9pbnQgPSBzdHIuY29kZVBvaW50QXQoaSk7XG4gICAgaWYgKHR5cGVvZiBjb2RlUG9pbnQgPiBcInVcIikgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBjb2RlcG9pbnRcIik7XG4gICAgYnl0ZXMgKz0gdXRmOGxlbihjb2RlUG9pbnQpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cbmZ1bmN0aW9uIGFkanVzdEluZGljaWVzVG9VY3MyKHBhdGNoZXMsIGJhc2UsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgYnl0ZU9mZnNldCA9IDAsIGlkeCA9IDA7XG4gIGZ1bmN0aW9uIGFkdmFuY2VUbyh0YXJnZXQpIHtcbiAgICBmb3IgKDsgYnl0ZU9mZnNldCA8IHRhcmdldDsgKSB7XG4gICAgICBjb25zdCBjb2RlUG9pbnQgPSBiYXNlLmNvZGVQb2ludEF0KGlkeCk7XG4gICAgICBpZiAodHlwZW9mIGNvZGVQb2ludCA+IFwidVwiKSByZXR1cm4gaWR4O1xuICAgICAgYnl0ZU9mZnNldCArPSB1dGY4bGVuKGNvZGVQb2ludCksIGNvZGVQb2ludCA+IDY1NTM1ID8gaWR4ICs9IDIgOiBpZHggKz0gMTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmFsbG93RXhjZWVkaW5nSW5kaWNlcyAmJiBieXRlT2Zmc2V0ICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBkZXRlcm1pbmUgYnl0ZSBvZmZzZXRcIik7XG4gICAgcmV0dXJuIGlkeDtcbiAgfVxuICBjb25zdCBhZGp1c3RlZCA9IFtdO1xuICBmb3IgKGNvbnN0IHBhdGNoIG9mIHBhdGNoZXMpIGFkanVzdGVkLnB1c2goe1xuICAgIGRpZmZzOiBwYXRjaC5kaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKSxcbiAgICBzdGFydDE6IGFkdmFuY2VUbyhwYXRjaC5zdGFydDEpLFxuICAgIHN0YXJ0MjogYWR2YW5jZVRvKHBhdGNoLnN0YXJ0MiksXG4gICAgdXRmOFN0YXJ0MTogcGF0Y2gudXRmOFN0YXJ0MSxcbiAgICB1dGY4U3RhcnQyOiBwYXRjaC51dGY4U3RhcnQyLFxuICAgIGxlbmd0aDE6IHBhdGNoLmxlbmd0aDEsXG4gICAgbGVuZ3RoMjogcGF0Y2gubGVuZ3RoMixcbiAgICB1dGY4TGVuZ3RoMTogcGF0Y2gudXRmOExlbmd0aDEsXG4gICAgdXRmOExlbmd0aDI6IHBhdGNoLnV0ZjhMZW5ndGgyXG4gIH0pO1xuICByZXR1cm4gYWRqdXN0ZWQ7XG59XG5mdW5jdGlvbiB1dGY4bGVuKGNvZGVQb2ludCkge1xuICByZXR1cm4gY29kZVBvaW50IDw9IDEyNyA/IDEgOiBjb2RlUG9pbnQgPD0gMjA0NyA/IDIgOiBjb2RlUG9pbnQgPD0gNjU1MzUgPyAzIDogNDtcbn1cbmNvbnN0IE1BWF9CSVRTID0gMzIsIERFRkFVTFRfTUFSR0lOID0gNDtcbmZ1bmN0aW9uIGFkZFBhZGRpbmcocGF0Y2hlcywgbWFyZ2luID0gREVGQVVMVF9NQVJHSU4pIHtcbiAgY29uc3QgcGFkZGluZ0xlbmd0aCA9IG1hcmdpbjtcbiAgbGV0IG51bGxQYWRkaW5nID0gXCJcIjtcbiAgZm9yIChsZXQgeCA9IDE7IHggPD0gcGFkZGluZ0xlbmd0aDsgeCsrKSBudWxsUGFkZGluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpO1xuICBmb3IgKGNvbnN0IHAgb2YgcGF0Y2hlcykgcC5zdGFydDEgKz0gcGFkZGluZ0xlbmd0aCwgcC5zdGFydDIgKz0gcGFkZGluZ0xlbmd0aCwgcC51dGY4U3RhcnQxICs9IHBhZGRpbmdMZW5ndGgsIHAudXRmOFN0YXJ0MiArPSBwYWRkaW5nTGVuZ3RoO1xuICBsZXQgcGF0Y2ggPSBwYXRjaGVzWzBdLCBkaWZmcyA9IHBhdGNoLmRpZmZzO1xuICBpZiAoZGlmZnMubGVuZ3RoID09PSAwIHx8IGRpZmZzWzBdWzBdICE9PSBESUZGX0VRVUFMKSBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBudWxsUGFkZGluZ10pLCBwYXRjaC5zdGFydDEgLT0gcGFkZGluZ0xlbmd0aCwgcGF0Y2guc3RhcnQyIC09IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhTdGFydDEgLT0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MiAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC5sZW5ndGgxICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aDtcbiAgZWxzZSBpZiAocGFkZGluZ0xlbmd0aCA+IGRpZmZzWzBdWzFdLmxlbmd0aCkge1xuICAgIGNvbnN0IGZpcnN0RGlmZkxlbmd0aCA9IGRpZmZzWzBdWzFdLmxlbmd0aCwgZXh0cmFMZW5ndGggPSBwYWRkaW5nTGVuZ3RoIC0gZmlyc3REaWZmTGVuZ3RoO1xuICAgIGRpZmZzWzBdWzFdID0gbnVsbFBhZGRpbmcuc3Vic3RyaW5nKGZpcnN0RGlmZkxlbmd0aCkgKyBkaWZmc1swXVsxXSwgcGF0Y2guc3RhcnQxIC09IGV4dHJhTGVuZ3RoLCBwYXRjaC5zdGFydDIgLT0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhTdGFydDEgLT0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhTdGFydDIgLT0gZXh0cmFMZW5ndGgsIHBhdGNoLmxlbmd0aDEgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBleHRyYUxlbmd0aDtcbiAgfVxuICBpZiAocGF0Y2ggPSBwYXRjaGVzW3BhdGNoZXMubGVuZ3RoIC0gMV0sIGRpZmZzID0gcGF0Y2guZGlmZnMsIGRpZmZzLmxlbmd0aCA9PT0gMCB8fCBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVswXSAhPT0gRElGRl9FUVVBTCkgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgbnVsbFBhZGRpbmddKSwgcGF0Y2gubGVuZ3RoMSArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IHBhZGRpbmdMZW5ndGg7XG4gIGVsc2UgaWYgKHBhZGRpbmdMZW5ndGggPiBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXS5sZW5ndGgpIHtcbiAgICBjb25zdCBleHRyYUxlbmd0aCA9IHBhZGRpbmdMZW5ndGggLSBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXS5sZW5ndGg7XG4gICAgZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0gKz0gbnVsbFBhZGRpbmcuc3Vic3RyaW5nKDAsIGV4dHJhTGVuZ3RoKSwgcGF0Y2gubGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGV4dHJhTGVuZ3RoO1xuICB9XG4gIHJldHVybiBudWxsUGFkZGluZztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoT2JqZWN0KHN0YXJ0MSwgc3RhcnQyKSB7XG4gIHJldHVybiB7XG4gICAgZGlmZnM6IFtdLFxuICAgIHN0YXJ0MSxcbiAgICBzdGFydDIsXG4gICAgdXRmOFN0YXJ0MTogc3RhcnQxLFxuICAgIHV0ZjhTdGFydDI6IHN0YXJ0MixcbiAgICBsZW5ndGgxOiAwLFxuICAgIGxlbmd0aDI6IDAsXG4gICAgdXRmOExlbmd0aDE6IDAsXG4gICAgdXRmOExlbmd0aDI6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0TWF4KHBhdGNoZXMsIG1hcmdpbiA9IERFRkFVTFRfTUFSR0lOKSB7XG4gIGNvbnN0IHBhdGNoU2l6ZSA9IE1BWF9CSVRTO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHBhdGNoZXMubGVuZ3RoOyB4KyspIHtcbiAgICBpZiAocGF0Y2hlc1t4XS5sZW5ndGgxIDw9IHBhdGNoU2l6ZSkgY29udGludWU7XG4gICAgY29uc3QgYmlncGF0Y2ggPSBwYXRjaGVzW3hdO1xuICAgIHBhdGNoZXMuc3BsaWNlKHgtLSwgMSk7XG4gICAgbGV0IHN0YXJ0MSA9IGJpZ3BhdGNoLnN0YXJ0MSwgc3RhcnQyID0gYmlncGF0Y2guc3RhcnQyLCBwcmVDb250ZXh0ID0gXCJcIjtcbiAgICBmb3IgKDsgYmlncGF0Y2guZGlmZnMubGVuZ3RoICE9PSAwOyApIHtcbiAgICAgIGNvbnN0IHBhdGNoID0gY3JlYXRlUGF0Y2hPYmplY3Qoc3RhcnQxIC0gcHJlQ29udGV4dC5sZW5ndGgsIHN0YXJ0MiAtIHByZUNvbnRleHQubGVuZ3RoKTtcbiAgICAgIGxldCBlbXB0eSA9ICEwO1xuICAgICAgaWYgKHByZUNvbnRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgY29uc3QgcHJlY29udGV4dEJ5dGVDb3VudCA9IGNvdW50VXRmOEJ5dGVzKHByZUNvbnRleHQpO1xuICAgICAgICBwYXRjaC5sZW5ndGgxID0gcHJlQ29udGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxID0gcHJlY29udGV4dEJ5dGVDb3VudCwgcGF0Y2gubGVuZ3RoMiA9IHByZUNvbnRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiA9IHByZWNvbnRleHRCeXRlQ291bnQsIHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIHByZUNvbnRleHRdKTtcbiAgICAgIH1cbiAgICAgIGZvciAoOyBiaWdwYXRjaC5kaWZmcy5sZW5ndGggIT09IDAgJiYgcGF0Y2gubGVuZ3RoMSA8IHBhdGNoU2l6ZSAtIG1hcmdpbjsgKSB7XG4gICAgICAgIGNvbnN0IGRpZmZUeXBlID0gYmlncGF0Y2guZGlmZnNbMF1bMF07XG4gICAgICAgIGxldCBkaWZmVGV4dCA9IGJpZ3BhdGNoLmRpZmZzWzBdWzFdLCBkaWZmVGV4dEJ5dGVDb3VudCA9IGNvdW50VXRmOEJ5dGVzKGRpZmZUZXh0KTtcbiAgICAgICAgaWYgKGRpZmZUeXBlID09PSBESUZGX0lOU0VSVCkge1xuICAgICAgICAgIHBhdGNoLmxlbmd0aDIgKz0gZGlmZlRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBkaWZmVGV4dEJ5dGVDb3VudCwgc3RhcnQyICs9IGRpZmZUZXh0Lmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBkaWZmMiA9IGJpZ3BhdGNoLmRpZmZzLnNoaWZ0KCk7XG4gICAgICAgICAgZGlmZjIgJiYgcGF0Y2guZGlmZnMucHVzaChkaWZmMiksIGVtcHR5ID0gITE7XG4gICAgICAgIH0gZWxzZSBkaWZmVHlwZSA9PT0gRElGRl9ERUxFVEUgJiYgcGF0Y2guZGlmZnMubGVuZ3RoID09PSAxICYmIHBhdGNoLmRpZmZzWzBdWzBdID09PSBESUZGX0VRVUFMICYmIGRpZmZUZXh0Lmxlbmd0aCA+IDIgKiBwYXRjaFNpemUgPyAocGF0Y2gubGVuZ3RoMSArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDEgKz0gZGlmZlRleHQubGVuZ3RoLCBlbXB0eSA9ICExLCBwYXRjaC5kaWZmcy5wdXNoKFtkaWZmVHlwZSwgZGlmZlRleHRdKSwgYmlncGF0Y2guZGlmZnMuc2hpZnQoKSkgOiAoZGlmZlRleHQgPSBkaWZmVGV4dC5zdWJzdHJpbmcoMCwgcGF0Y2hTaXplIC0gcGF0Y2gubGVuZ3RoMSAtIG1hcmdpbiksIGRpZmZUZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMoZGlmZlRleHQpLCBwYXRjaC5sZW5ndGgxICs9IGRpZmZUZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZGlmZlRleHRCeXRlQ291bnQsIHN0YXJ0MSArPSBkaWZmVGV4dC5sZW5ndGgsIGRpZmZUeXBlID09PSBESUZGX0VRVUFMID8gKHBhdGNoLmxlbmd0aDIgKz0gZGlmZlRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBkaWZmVGV4dEJ5dGVDb3VudCwgc3RhcnQyICs9IGRpZmZUZXh0Lmxlbmd0aCkgOiBlbXB0eSA9ICExLCBwYXRjaC5kaWZmcy5wdXNoKFtkaWZmVHlwZSwgZGlmZlRleHRdKSwgZGlmZlRleHQgPT09IGJpZ3BhdGNoLmRpZmZzWzBdWzFdID8gYmlncGF0Y2guZGlmZnMuc2hpZnQoKSA6IGJpZ3BhdGNoLmRpZmZzWzBdWzFdID0gYmlncGF0Y2guZGlmZnNbMF1bMV0uc3Vic3RyaW5nKGRpZmZUZXh0Lmxlbmd0aCkpO1xuICAgICAgfVxuICAgICAgcHJlQ29udGV4dCA9IGRpZmZUZXh0MihwYXRjaC5kaWZmcyksIHByZUNvbnRleHQgPSBwcmVDb250ZXh0LnN1YnN0cmluZyhwcmVDb250ZXh0Lmxlbmd0aCAtIG1hcmdpbik7XG4gICAgICBjb25zdCBwb3N0Q29udGV4dCA9IGRpZmZUZXh0MShiaWdwYXRjaC5kaWZmcykuc3Vic3RyaW5nKDAsIG1hcmdpbiksIHBvc3RDb250ZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMocG9zdENvbnRleHQpO1xuICAgICAgcG9zdENvbnRleHQgIT09IFwiXCIgJiYgKHBhdGNoLmxlbmd0aDEgKz0gcG9zdENvbnRleHQubGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IHBvc3RDb250ZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gcG9zdENvbnRleHRCeXRlQ291bnQsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IHBvc3RDb250ZXh0Qnl0ZUNvdW50LCBwYXRjaC5kaWZmcy5sZW5ndGggIT09IDAgJiYgcGF0Y2guZGlmZnNbcGF0Y2guZGlmZnMubGVuZ3RoIC0gMV1bMF0gPT09IERJRkZfRVFVQUwgPyBwYXRjaC5kaWZmc1twYXRjaC5kaWZmcy5sZW5ndGggLSAxXVsxXSArPSBwb3N0Q29udGV4dCA6IHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIHBvc3RDb250ZXh0XSkpLCBlbXB0eSB8fCBwYXRjaGVzLnNwbGljZSgrK3gsIDAsIHBhdGNoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFwcGx5KHBhdGNoZXMsIG9yaWdpbmFsVGV4dCwgb3B0cyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgcGF0Y2hlcyA9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXRjaGVzIG11c3QgYmUgYW4gYXJyYXkgLSBwYXNzIHRoZSBwYXRjaCB0byBgcGFyc2VQYXRjaCgpYCBmaXJzdFwiKTtcbiAgbGV0IHRleHQgPSBvcmlnaW5hbFRleHQ7XG4gIGlmIChwYXRjaGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFt0ZXh0LCBbXV07XG4gIGNvbnN0IHBhcnNlZCA9IGFkanVzdEluZGljaWVzVG9VY3MyKHBhdGNoZXMsIHRleHQsIHtcbiAgICBhbGxvd0V4Y2VlZGluZ0luZGljZXM6IG9wdHMuYWxsb3dFeGNlZWRpbmdJbmRpY2VzXG4gIH0pLCBtYXJnaW4gPSBvcHRzLm1hcmdpbiB8fCBERUZBVUxUX01BUkdJTiwgZGVsZXRlVGhyZXNob2xkID0gb3B0cy5kZWxldGVUaHJlc2hvbGQgfHwgMC40LCBudWxsUGFkZGluZyA9IGFkZFBhZGRpbmcocGFyc2VkLCBtYXJnaW4pO1xuICB0ZXh0ID0gbnVsbFBhZGRpbmcgKyB0ZXh0ICsgbnVsbFBhZGRpbmcsIHNwbGl0TWF4KHBhcnNlZCwgbWFyZ2luKTtcbiAgbGV0IGRlbHRhID0gMDtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHBhcnNlZC5sZW5ndGg7IHgrKykge1xuICAgIGNvbnN0IGV4cGVjdGVkTG9jID0gcGFyc2VkW3hdLnN0YXJ0MiArIGRlbHRhLCB0ZXh0MSA9IGRpZmZUZXh0MShwYXJzZWRbeF0uZGlmZnMpO1xuICAgIGxldCBzdGFydExvYywgZW5kTG9jID0gLTE7XG4gICAgaWYgKHRleHQxLmxlbmd0aCA+IE1BWF9CSVRTID8gKHN0YXJ0TG9jID0gbWF0Y2godGV4dCwgdGV4dDEuc3Vic3RyaW5nKDAsIE1BWF9CSVRTKSwgZXhwZWN0ZWRMb2MpLCBzdGFydExvYyAhPT0gLTEgJiYgKGVuZExvYyA9IG1hdGNoKHRleHQsIHRleHQxLnN1YnN0cmluZyh0ZXh0MS5sZW5ndGggLSBNQVhfQklUUyksIGV4cGVjdGVkTG9jICsgdGV4dDEubGVuZ3RoIC0gTUFYX0JJVFMpLCAoZW5kTG9jID09PSAtMSB8fCBzdGFydExvYyA+PSBlbmRMb2MpICYmIChzdGFydExvYyA9IC0xKSkpIDogc3RhcnRMb2MgPSBtYXRjaCh0ZXh0LCB0ZXh0MSwgZXhwZWN0ZWRMb2MpLCBzdGFydExvYyA9PT0gLTEpIHJlc3VsdHNbeF0gPSAhMSwgZGVsdGEgLT0gcGFyc2VkW3hdLmxlbmd0aDIgLSBwYXJzZWRbeF0ubGVuZ3RoMTtcbiAgICBlbHNlIHtcbiAgICAgIHJlc3VsdHNbeF0gPSAhMCwgZGVsdGEgPSBzdGFydExvYyAtIGV4cGVjdGVkTG9jO1xuICAgICAgbGV0IHRleHQyO1xuICAgICAgaWYgKGVuZExvYyA9PT0gLTEgPyB0ZXh0MiA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jLCBzdGFydExvYyArIHRleHQxLmxlbmd0aCkgOiB0ZXh0MiA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jLCBlbmRMb2MgKyBNQVhfQklUUyksIHRleHQxID09PSB0ZXh0MikgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0TG9jKSArIGRpZmZUZXh0MihwYXJzZWRbeF0uZGlmZnMpICsgdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MgKyB0ZXh0MS5sZW5ndGgpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGxldCBkaWZmcyA9IGRpZmYodGV4dDEsIHRleHQyLCB7XG4gICAgICAgICAgY2hlY2tMaW5lczogITFcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0ZXh0MS5sZW5ndGggPiBNQVhfQklUUyAmJiBsZXZlbnNodGVpbihkaWZmcykgLyB0ZXh0MS5sZW5ndGggPiBkZWxldGVUaHJlc2hvbGQpIHJlc3VsdHNbeF0gPSAhMTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGlmZnMgPSBjbGVhbnVwU2VtYW50aWNMb3NzbGVzcyhkaWZmcyk7XG4gICAgICAgICAgbGV0IGluZGV4MSA9IDAsIGluZGV4MiA9IDA7XG4gICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBwYXJzZWRbeF0uZGlmZnMubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZCA9IHBhcnNlZFt4XS5kaWZmc1t5XTtcbiAgICAgICAgICAgIG1vZFswXSAhPT0gRElGRl9FUVVBTCAmJiAoaW5kZXgyID0geEluZGV4KGRpZmZzLCBpbmRleDEpKSwgbW9kWzBdID09PSBESUZGX0lOU0VSVCA/IHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydExvYyArIGluZGV4MikgKyBtb2RbMV0gKyB0ZXh0LnN1YnN0cmluZyhzdGFydExvYyArIGluZGV4MikgOiBtb2RbMF0gPT09IERJRkZfREVMRVRFICYmICh0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRMb2MgKyBpbmRleDIpICsgdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MgKyB4SW5kZXgoZGlmZnMsIGluZGV4MSArIG1vZFsxXS5sZW5ndGgpKSksIG1vZFswXSAhPT0gRElGRl9ERUxFVEUgJiYgKGluZGV4MSArPSBtb2RbMV0ubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRleHQgPSB0ZXh0LnN1YnN0cmluZyhudWxsUGFkZGluZy5sZW5ndGgsIHRleHQubGVuZ3RoIC0gbnVsbFBhZGRpbmcubGVuZ3RoKSwgW3RleHQsIHJlc3VsdHNdO1xufVxuY29uc3QgcGF0Y2hIZWFkZXIgPSAvXkBAIC0oXFxkKyksPyhcXGQqKSBcXCsoXFxkKyksPyhcXGQqKSBAQCQvO1xuZnVuY3Rpb24gcGFyc2UodGV4dGxpbmUpIHtcbiAgaWYgKCF0ZXh0bGluZSkgcmV0dXJuIFtdO1xuICBjb25zdCBwYXRjaGVzID0gW10sIGxpbmVzID0gdGV4dGxpbmUuc3BsaXQoYFxuYCk7XG4gIGxldCB0ZXh0UG9pbnRlciA9IDA7XG4gIGZvciAoOyB0ZXh0UG9pbnRlciA8IGxpbmVzLmxlbmd0aDsgKSB7XG4gICAgY29uc3QgbSA9IGxpbmVzW3RleHRQb2ludGVyXS5tYXRjaChwYXRjaEhlYWRlcik7XG4gICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGF0Y2ggc3RyaW5nOiAke2xpbmVzW3RleHRQb2ludGVyXX1gKTtcbiAgICBjb25zdCBwYXRjaCA9IGNyZWF0ZVBhdGNoT2JqZWN0KHRvSW50KG1bMV0pLCB0b0ludChtWzNdKSk7XG4gICAgZm9yIChwYXRjaGVzLnB1c2gocGF0Y2gpLCBtWzJdID09PSBcIlwiID8gKHBhdGNoLnN0YXJ0MS0tLCBwYXRjaC51dGY4U3RhcnQxLS0sIHBhdGNoLmxlbmd0aDEgPSAxLCBwYXRjaC51dGY4TGVuZ3RoMSA9IDEpIDogbVsyXSA9PT0gXCIwXCIgPyAocGF0Y2gubGVuZ3RoMSA9IDAsIHBhdGNoLnV0ZjhMZW5ndGgxID0gMCkgOiAocGF0Y2guc3RhcnQxLS0sIHBhdGNoLnV0ZjhTdGFydDEtLSwgcGF0Y2gudXRmOExlbmd0aDEgPSB0b0ludChtWzJdKSwgcGF0Y2gubGVuZ3RoMSA9IHBhdGNoLnV0ZjhMZW5ndGgxKSwgbVs0XSA9PT0gXCJcIiA/IChwYXRjaC5zdGFydDItLSwgcGF0Y2gudXRmOFN0YXJ0Mi0tLCBwYXRjaC5sZW5ndGgyID0gMSwgcGF0Y2gudXRmOExlbmd0aDIgPSAxKSA6IG1bNF0gPT09IFwiMFwiID8gKHBhdGNoLmxlbmd0aDIgPSAwLCBwYXRjaC51dGY4TGVuZ3RoMiA9IDApIDogKHBhdGNoLnN0YXJ0Mi0tLCBwYXRjaC51dGY4U3RhcnQyLS0sIHBhdGNoLnV0ZjhMZW5ndGgyID0gdG9JbnQobVs0XSksIHBhdGNoLmxlbmd0aDIgPSBwYXRjaC51dGY4TGVuZ3RoMiksIHRleHRQb2ludGVyKys7IHRleHRQb2ludGVyIDwgbGluZXMubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gbGluZXNbdGV4dFBvaW50ZXJdLCBzaWduID0gY3VycmVudExpbmUuY2hhckF0KDApO1xuICAgICAgaWYgKHNpZ24gPT09IFwiQFwiKSBicmVhaztcbiAgICAgIGlmIChzaWduID09PSBcIlwiKSB7XG4gICAgICAgIHRleHRQb2ludGVyKys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IGxpbmU7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5lID0gZGVjb2RlVVJJKGN1cnJlbnRMaW5lLnNsaWNlKDEpKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElsbGVnYWwgZXNjYXBlIGluIHBhcnNlOiAke2N1cnJlbnRMaW5lfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgdXRmOERpZmYgPSBjb3VudFV0ZjhCeXRlcyhsaW5lKSAtIGxpbmUubGVuZ3RoO1xuICAgICAgaWYgKHNpZ24gPT09IFwiLVwiKSBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0RFTEVURSwgbGluZV0pLCBwYXRjaC5sZW5ndGgxIC09IHV0ZjhEaWZmO1xuICAgICAgZWxzZSBpZiAoc2lnbiA9PT0gXCIrXCIpIHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfSU5TRVJULCBsaW5lXSksIHBhdGNoLmxlbmd0aDIgLT0gdXRmOERpZmY7XG4gICAgICBlbHNlIGlmIChzaWduID09PSBcIiBcIikgcGF0Y2guZGlmZnMucHVzaChbRElGRl9FUVVBTCwgbGluZV0pLCBwYXRjaC5sZW5ndGgxIC09IHV0ZjhEaWZmLCBwYXRjaC5sZW5ndGgyIC09IHV0ZjhEaWZmO1xuICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGF0Y2ggbW9kZSBcIiR7c2lnbn1cIiBpbjogJHtsaW5lfWApO1xuICAgICAgdGV4dFBvaW50ZXIrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGNoZXM7XG59XG5mdW5jdGlvbiB0b0ludChudW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KG51bSwgMTApO1xufVxuY29uc3QgSVNfVURPSU5HID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIElTX1JFRE9JTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhVbmRvaW5nKGVkaXRvciwgZm4pIHtcbiAgY29uc3QgcHJldiA9IGlzVW5kb2luZyhlZGl0b3IpO1xuICBJU19VRE9JTkcuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19VRE9JTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1VuZG9pbmcoZWRpdG9yKSB7XG4gIHJldHVybiBJU19VRE9JTkcuZ2V0KGVkaXRvcikgPz8gITE7XG59XG5mdW5jdGlvbiBzZXRJc1VuZG9pbmcoZWRpdG9yLCBpc1VuZG9pbmcyKSB7XG4gIElTX1VET0lORy5zZXQoZWRpdG9yLCBpc1VuZG9pbmcyKTtcbn1cbmZ1bmN0aW9uIHdpdGhSZWRvaW5nKGVkaXRvciwgZm4pIHtcbiAgY29uc3QgcHJldiA9IGlzUmVkb2luZyhlZGl0b3IpO1xuICBJU19SRURPSU5HLnNldChlZGl0b3IsICEwKSwgZm4oKSwgSVNfUkVET0lORy5zZXQoZWRpdG9yLCBwcmV2KTtcbn1cbmZ1bmN0aW9uIGlzUmVkb2luZyhlZGl0b3IpIHtcbiAgcmV0dXJuIElTX1JFRE9JTkcuZ2V0KGVkaXRvcikgPz8gITE7XG59XG5mdW5jdGlvbiBzZXRJc1JlZG9pbmcoZWRpdG9yLCBpc1JlZG9pbmcyKSB7XG4gIElTX1JFRE9JTkcuc2V0KGVkaXRvciwgaXNSZWRvaW5nMik7XG59XG5jb25zdCBkZWJ1ZyRpID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoVW5kb1JlZG9cIiksIFNBVklORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBSRU1PVEVfUEFUQ0hFUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBVTkRPX1NURVBfTElNSVQgPSAxZTMsIGlzU2F2aW5nID0gKGVkaXRvcikgPT4ge1xuICBjb25zdCBzdGF0ZSA9IFNBVklORy5nZXQoZWRpdG9yKTtcbiAgcmV0dXJuIHN0YXRlID09PSB2b2lkIDAgPyAhMCA6IHN0YXRlO1xufSwgZ2V0UmVtb3RlUGF0Y2hlcyA9IChlZGl0b3IpID0+IChSRU1PVEVfUEFUQ0hFUy5nZXQoZWRpdG9yKSB8fCBSRU1PVEVfUEFUQ0hFUy5zZXQoZWRpdG9yLCBbXSksIFJFTU9URV9QQVRDSEVTLmdldChlZGl0b3IpIHx8IFtdKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhVbmRvUmVkbyhvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBibG9ja1NjaGVtYVR5cGVcbiAgfSA9IG9wdGlvbnM7XG4gIHJldHVybiAoZWRpdG9yKSA9PiB7XG4gICAgbGV0IHByZXZpb3VzU25hcHNob3QgPSBmcm9tU2xhdGVWYWx1ZShlZGl0b3IuY2hpbGRyZW4sIGJsb2NrU2NoZW1hVHlwZS5uYW1lKTtcbiAgICBjb25zdCByZW1vdGVQYXRjaGVzID0gZ2V0UmVtb3RlUGF0Y2hlcyhlZGl0b3IpO1xuICAgIG9wdGlvbnMuc3Vic2NyaXB0aW9ucy5wdXNoKCgpID0+IHtcbiAgICAgIGRlYnVnJGkoXCJTdWJzY3JpYmluZyB0byBwYXRjaGVzXCIpO1xuICAgICAgY29uc3Qgc3ViID0gZWRpdG9yQWN0b3Iub24oXCJwYXRjaGVzXCIsICh7XG4gICAgICAgIHBhdGNoZXMsXG4gICAgICAgIHNuYXBzaG90XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGxldCByZXNldCA9ICExO1xuICAgICAgICBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNldCAmJiBwYXRjaC5vcmlnaW4gIT09IFwibG9jYWxcIiAmJiByZW1vdGVQYXRjaGVzKSB7XG4gICAgICAgICAgICBpZiAocGF0Y2gudHlwZSA9PT0gXCJ1bnNldFwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGRlYnVnJGkoXCJTb21lb25lIGVsc2UgY2xlYXJlZCB0aGUgY29udGVudCwgcmVzZXR0aW5nIHVuZG8vcmVkbyBoaXN0b3J5XCIpLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgICAgICAgICAgICB1bmRvczogW10sXG4gICAgICAgICAgICAgICAgcmVkb3M6IFtdXG4gICAgICAgICAgICAgIH0sIHJlbW90ZVBhdGNoZXMuc3BsaWNlKDAsIHJlbW90ZVBhdGNoZXMubGVuZ3RoKSwgU0FWSU5HLnNldChlZGl0b3IsICEwKSwgcmVzZXQgPSAhMDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3RlUGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgcGF0Y2gsXG4gICAgICAgICAgICAgIHRpbWU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgICAgICAgcHJldmlvdXNTbmFwc2hvdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgcHJldmlvdXNTbmFwc2hvdCA9IHNuYXBzaG90O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkZWJ1ZyRpKFwiVW5zdWJzY3JpYmluZyB0byBwYXRjaGVzXCIpLCBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSksIGVkaXRvci5oaXN0b3J5ID0ge1xuICAgICAgdW5kb3M6IFtdLFxuICAgICAgcmVkb3M6IFtdXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9wZXJhdGlvbnMsXG4gICAgICAgIGhpc3RvcnlcbiAgICAgIH0gPSBlZGl0b3IsIHtcbiAgICAgICAgdW5kb3NcbiAgICAgIH0gPSBoaXN0b3J5LCBzdGVwID0gdW5kb3NbdW5kb3MubGVuZ3RoIC0gMV0sIGxhc3RPcCA9IHN0ZXAgJiYgc3RlcC5vcGVyYXRpb25zICYmIHN0ZXAub3BlcmF0aW9uc1tzdGVwLm9wZXJhdGlvbnMubGVuZ3RoIC0gMV0sIG92ZXJ3cml0ZSA9IHNob3VsZE92ZXJ3cml0ZShvcCwgbGFzdE9wKSwgc2F2ZSA9IGlzU2F2aW5nKGVkaXRvcik7XG4gICAgICBsZXQgbWVyZ2UgPSAhMDtcbiAgICAgIGlmIChzYXZlKSB7XG4gICAgICAgIGlmIChzdGVwID8gb3BlcmF0aW9ucy5sZW5ndGggPT09IDAgJiYgKG1lcmdlID0gc2hvdWxkTWVyZ2Uob3AsIGxhc3RPcCkgfHwgb3ZlcndyaXRlKSA6IG1lcmdlID0gITEsIHN0ZXAgJiYgbWVyZ2UpXG4gICAgICAgICAgc3RlcC5vcGVyYXRpb25zLnB1c2gob3ApO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zdCBuZXdTdGVwID0ge1xuICAgICAgICAgICAgb3BlcmF0aW9uczogWy4uLmVkaXRvci5zZWxlY3Rpb24gPT09IG51bGwgPyBbXSA6IFtjcmVhdGVTZWxlY3RPcGVyYXRpb24oZWRpdG9yKV0sIG9wXSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKClcbiAgICAgICAgICB9O1xuICAgICAgICAgIHVuZG9zLnB1c2gobmV3U3RlcCksIGRlYnVnJGkoXCJDcmVhdGVkIG5ldyB1bmRvIHN0ZXBcIiwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IHVuZG9zLmxlbmd0aCA+IFVORE9fU1RFUF9MSU1JVDsgKVxuICAgICAgICAgIHVuZG9zLnNoaWZ0KCk7XG4gICAgICAgIHNob3VsZENsZWFyKG9wKSAmJiAoaGlzdG9yeS5yZWRvcyA9IFtdKTtcbiAgICAgIH1cbiAgICAgIGFwcGx5MihvcCk7XG4gICAgfSwgZWRpdG9yLnVuZG8gPSAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdW5kb3NcbiAgICAgIH0gPSBlZGl0b3IuaGlzdG9yeTtcbiAgICAgIGlmICh1bmRvcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSB1bmRvc1t1bmRvcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGRlYnVnJGkoXCJVbmRvaW5nXCIsIHN0ZXApLCBzdGVwLm9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IG90aGVyUGF0Y2hlcyA9IHJlbW90ZVBhdGNoZXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnRpbWUgPj0gc3RlcC50aW1lc3RhbXApO1xuICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBzdGVwLm9wZXJhdGlvbnM7XG4gICAgICAgICAgb3RoZXJQYXRjaGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IGZsYXR0ZW4odHJhbnNmb3JtZWRPcGVyYXRpb25zLm1hcCgob3ApID0+IHRyYW5zZm9ybU9wZXJhdGlvbihlZGl0b3IsIGl0ZW0ucGF0Y2gsIG9wLCBpdGVtLnNuYXBzaG90LCBpdGVtLnByZXZpb3VzU25hcHNob3QpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgcmV2ZXJzZWRPcGVyYXRpb25zID0gdHJhbnNmb3JtZWRPcGVyYXRpb25zLm1hcChPcGVyYXRpb24uaW52ZXJzZSkucmV2ZXJzZSgpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICB3aXRoVW5kb2luZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgICB3aXRob3V0U2F2aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV2ZXJzZWRPcGVyYXRpb25zLmZvckVhY2goKG9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5hcHBseShvcCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSwgZWRpdG9yLm5vcm1hbGl6ZSgpLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnJGkoXCJDb3VsZCBub3QgcGVyZm9ybSB1bmRvIHN0ZXBcIiwgZXJyKSwgcmVtb3RlUGF0Y2hlcy5zcGxpY2UoMCwgcmVtb3RlUGF0Y2hlcy5sZW5ndGgpLCBUcmFuc2Zvcm1zLmRlc2VsZWN0KGVkaXRvciksIGVkaXRvci5oaXN0b3J5ID0ge1xuICAgICAgICAgICAgICB1bmRvczogW10sXG4gICAgICAgICAgICAgIHJlZG9zOiBbXVxuICAgICAgICAgICAgfSwgU0FWSU5HLnNldChlZGl0b3IsICEwKSwgc2V0SXNVbmRvaW5nKGVkaXRvciwgITEpLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWRpdG9yLmhpc3RvcnkucmVkb3MucHVzaChzdGVwKSwgZWRpdG9yLmhpc3RvcnkudW5kb3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBlZGl0b3IucmVkbyA9ICgpID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICByZWRvc1xuICAgICAgfSA9IGVkaXRvci5oaXN0b3J5O1xuICAgICAgaWYgKHJlZG9zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IHJlZG9zW3JlZG9zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZGVidWckaShcIlJlZG9pbmdcIiwgc3RlcCksIHN0ZXAub3BlcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3Qgb3RoZXJQYXRjaGVzID0gcmVtb3RlUGF0Y2hlcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udGltZSA+PSBzdGVwLnRpbWVzdGFtcCk7XG4gICAgICAgICAgbGV0IHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IHN0ZXAub3BlcmF0aW9ucztcbiAgICAgICAgICBvdGhlclBhdGNoZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb25zID0gZmxhdHRlbih0cmFuc2Zvcm1lZE9wZXJhdGlvbnMubWFwKChvcCkgPT4gdHJhbnNmb3JtT3BlcmF0aW9uKGVkaXRvciwgaXRlbS5wYXRjaCwgb3AsIGl0ZW0uc25hcHNob3QsIGl0ZW0ucHJldmlvdXNTbmFwc2hvdCkpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgd2l0aFJlZG9pbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2l0aG91dFNhdmluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5mb3JFYWNoKChvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYXBwbHkob3ApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIGVkaXRvci5ub3JtYWxpemUoKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkZWJ1ZyRpKFwiQ291bGQgbm90IHBlcmZvcm0gcmVkbyBzdGVwXCIsIGVyciksIHJlbW90ZVBhdGNoZXMuc3BsaWNlKDAsIHJlbW90ZVBhdGNoZXMubGVuZ3RoKSwgVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgICAgICAgICAgdW5kb3M6IFtdLFxuICAgICAgICAgICAgICByZWRvczogW11cbiAgICAgICAgICAgIH0sIFNBVklORy5zZXQoZWRpdG9yLCAhMCksIHNldElzUmVkb2luZyhlZGl0b3IsICExKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGVkaXRvci5oaXN0b3J5LnVuZG9zLnB1c2goc3RlcCksIGVkaXRvci5oaXN0b3J5LnJlZG9zLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtT3BlcmF0aW9uKGVkaXRvciwgcGF0Y2gsIG9wZXJhdGlvbiwgc25hcHNob3QsIHByZXZpb3VzU25hcHNob3QpIHtcbiAgY29uc3QgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgLi4ub3BlcmF0aW9uXG4gIH07XG4gIGlmIChwYXRjaC50eXBlID09PSBcImluc2VydFwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgaW5zZXJ0QmxvY2tJbmRleCA9IChzbmFwc2hvdCB8fCBbXSkuZmluZEluZGV4KChibGspID0+IGlzRXF1YWwoe1xuICAgICAgX2tleTogYmxrLl9rZXlcbiAgICB9LCBwYXRjaC5wYXRoWzBdKSk7XG4gICAgcmV0dXJuIGRlYnVnJGkoYEFkanVzdGluZyBibG9jayBwYXRoICgrJHtwYXRjaC5pdGVtcy5sZW5ndGh9KSBmb3IgJyR7dHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZX0nIG9wZXJhdGlvbiBhbmQgcGF0Y2ggJyR7cGF0Y2gudHlwZX0nYCksIFthZGp1c3RCbG9ja1BhdGgodHJhbnNmb3JtZWRPcGVyYXRpb24sIHBhdGNoLml0ZW1zLmxlbmd0aCwgaW5zZXJ0QmxvY2tJbmRleCldO1xuICB9XG4gIGlmIChwYXRjaC50eXBlID09PSBcInVuc2V0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCB1bnNldEJsb2NrSW5kZXggPSAocHJldmlvdXNTbmFwc2hvdCB8fCBbXSkuZmluZEluZGV4KChibGspID0+IGlzRXF1YWwoe1xuICAgICAgX2tleTogYmxrLl9rZXlcbiAgICB9LCBwYXRjaC5wYXRoWzBdKSk7XG4gICAgcmV0dXJuIFwicGF0aFwiIGluIHRyYW5zZm9ybWVkT3BlcmF0aW9uICYmIEFycmF5LmlzQXJyYXkodHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aCkgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSA9PT0gdW5zZXRCbG9ja0luZGV4ID8gKGRlYnVnJGkoXCJTa2lwcGluZyB0cmFuc2Zvcm1hdGlvbiB0aGF0IHRhcmdldGVkIHJlbW92ZWQgYmxvY2tcIiksIFtdKSA6IFthZGp1c3RCbG9ja1BhdGgodHJhbnNmb3JtZWRPcGVyYXRpb24sIC0xLCB1bnNldEJsb2NrSW5kZXgpXTtcbiAgfVxuICBpZiAocGF0Y2gudHlwZSA9PT0gXCJ1bnNldFwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBkZWJ1ZyRpKGBBZGp1c3Rpbmcgc2VsZWN0aW9uIGZvciB1bnNldCBldmVyeXRoaW5nIHBhdGNoIGFuZCAke29wZXJhdGlvbi50eXBlfSBvcGVyYXRpb25gKSwgW107XG4gIGlmIChwYXRjaC50eXBlID09PSBcImRpZmZNYXRjaFBhdGNoXCIpIHtcbiAgICBjb25zdCBvcGVyYXRpb25UYXJnZXRCbG9jayA9IGZpbmRPcGVyYXRpb25UYXJnZXRCbG9jayhlZGl0b3IsIHRyYW5zZm9ybWVkT3BlcmF0aW9uKTtcbiAgICByZXR1cm4gIW9wZXJhdGlvblRhcmdldEJsb2NrIHx8ICFpc0VxdWFsKHtcbiAgICAgIF9rZXk6IG9wZXJhdGlvblRhcmdldEJsb2NrLl9rZXlcbiAgICB9LCBwYXRjaC5wYXRoWzBdKSA/IFt0cmFuc2Zvcm1lZE9wZXJhdGlvbl0gOiAocGFyc2UocGF0Y2gudmFsdWUpLmZvckVhY2goKGRpZmZQYXRjaCkgPT4ge1xuICAgICAgbGV0IGFkanVzdE9mZnNldEJ5ID0gMCwgY2hhbmdlZE9mZnNldCA9IGRpZmZQYXRjaC51dGY4U3RhcnQxO1xuICAgICAgY29uc3Qge1xuICAgICAgICBkaWZmc1xuICAgICAgfSA9IGRpZmZQYXRjaDtcbiAgICAgIGlmIChkaWZmcy5mb3JFYWNoKChkaWZmMiwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgW2RpZmZUeXBlLCB0ZXh0XSA9IGRpZmYyO1xuICAgICAgICBkaWZmVHlwZSA9PT0gRElGRl9JTlNFUlQgPyAoYWRqdXN0T2Zmc2V0QnkgKz0gdGV4dC5sZW5ndGgsIGNoYW5nZWRPZmZzZXQgKz0gdGV4dC5sZW5ndGgpIDogZGlmZlR5cGUgPT09IERJRkZfREVMRVRFID8gKGFkanVzdE9mZnNldEJ5IC09IHRleHQubGVuZ3RoLCBjaGFuZ2VkT2Zmc2V0IC09IHRleHQubGVuZ3RoKSA6IGRpZmZUeXBlID09PSBESUZGX0VRVUFMICYmIChkaWZmcy5zbGljZShpbmRleCkuZXZlcnkoKFtkVHlwZV0pID0+IGRUeXBlID09PSBESUZGX0VRVUFMKSB8fCAoY2hhbmdlZE9mZnNldCArPSB0ZXh0Lmxlbmd0aCkpO1xuICAgICAgfSksIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIiAmJiBjaGFuZ2VkT2Zmc2V0IDwgdHJhbnNmb3JtZWRPcGVyYXRpb24ub2Zmc2V0ICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgKz0gYWRqdXN0T2Zmc2V0QnkpLCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlID09PSBcInJlbW92ZV90ZXh0XCIgJiYgY2hhbmdlZE9mZnNldCA8PSB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgLSB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50ZXh0Lmxlbmd0aCAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ub2Zmc2V0ICs9IGFkanVzdE9mZnNldEJ5KSwgdHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcz8uZm9jdXMgPyB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9IDogdm9pZCAwLCBjdXJyZW50QW5jaG9yID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/LnByb3BlcnRpZXM/LmFuY2hvciA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmFuY2hvclxuICAgICAgICB9IDogdm9pZCAwLCBuZXdGb2N1cyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5uZXdQcm9wZXJ0aWVzPy5mb2N1cyA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmZvY3VzXG4gICAgICAgIH0gOiB2b2lkIDAsIG5ld0FuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5uZXdQcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcy5hbmNob3JcbiAgICAgICAgfSA6IHZvaWQgMDtcbiAgICAgICAgKGN1cnJlbnRGb2N1cyAmJiBjdXJyZW50QW5jaG9yIHx8IG5ld0ZvY3VzICYmIG5ld0FuY2hvcikgJiYgKFtjdXJyZW50Rm9jdXMsIGN1cnJlbnRBbmNob3IsIG5ld0ZvY3VzLCBuZXdBbmNob3JdLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgICAgICAgcG9pbnQgJiYgY2hhbmdlZE9mZnNldCA8IHBvaW50Lm9mZnNldCAmJiAocG9pbnQub2Zmc2V0ICs9IGFkanVzdE9mZnNldEJ5KTtcbiAgICAgICAgfSksIGN1cnJlbnRGb2N1cyAmJiBjdXJyZW50QW5jaG9yICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzID0ge1xuICAgICAgICAgIGZvY3VzOiBjdXJyZW50Rm9jdXMsXG4gICAgICAgICAgYW5jaG9yOiBjdXJyZW50QW5jaG9yXG4gICAgICAgIH0pLCBuZXdGb2N1cyAmJiBuZXdBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMgPSB7XG4gICAgICAgICAgZm9jdXM6IG5ld0ZvY3VzLFxuICAgICAgICAgIGFuY2hvcjogbmV3QW5jaG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KSwgW3RyYW5zZm9ybWVkT3BlcmF0aW9uXSk7XG4gIH1cbiAgcmV0dXJuIFt0cmFuc2Zvcm1lZE9wZXJhdGlvbl07XG59XG5mdW5jdGlvbiBhZGp1c3RCbG9ja1BhdGgob3BlcmF0aW9uLCBsZXZlbCwgYmxvY2tJbmRleCkge1xuICBjb25zdCB0cmFuc2Zvcm1lZE9wZXJhdGlvbiA9IHtcbiAgICAuLi5vcGVyYXRpb25cbiAgfTtcbiAgaWYgKGJsb2NrSW5kZXggPj0gMCAmJiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlICE9PSBcInNldF9zZWxlY3Rpb25cIiAmJiBBcnJheS5pc0FycmF5KHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGgpICYmIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGhbMF0gPj0gYmxvY2tJbmRleCArIGxldmVsICYmIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGhbMF0gKyBsZXZlbCA+IC0xKSB7XG4gICAgY29uc3QgbmV3UGF0aCA9IFt0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoWzBdICsgbGV2ZWwsIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGguc2xpY2UoMSldO1xuICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGggPSBuZXdQYXRoO1xuICB9XG4gIGlmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIikge1xuICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcy5mb2N1c1xuICAgIH0gOiB2b2lkIDAsIGN1cnJlbnRBbmNob3IgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ucHJvcGVydGllcz8uYW5jaG9yID8ge1xuICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcy5hbmNob3JcbiAgICB9IDogdm9pZCAwLCBuZXdGb2N1cyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5uZXdQcm9wZXJ0aWVzPy5mb2N1cyA/IHtcbiAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMuZm9jdXNcbiAgICB9IDogdm9pZCAwLCBuZXdBbmNob3IgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ubmV3UHJvcGVydGllcz8uYW5jaG9yID8ge1xuICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcy5hbmNob3JcbiAgICB9IDogdm9pZCAwO1xuICAgIChjdXJyZW50Rm9jdXMgJiYgY3VycmVudEFuY2hvciB8fCBuZXdGb2N1cyAmJiBuZXdBbmNob3IpICYmIChbY3VycmVudEZvY3VzLCBjdXJyZW50QW5jaG9yLCBuZXdGb2N1cywgbmV3QW5jaG9yXS5mb3JFYWNoKChwb2ludCkgPT4ge1xuICAgICAgcG9pbnQgJiYgcG9pbnQucGF0aFswXSA+PSBibG9ja0luZGV4ICsgbGV2ZWwgJiYgcG9pbnQucGF0aFswXSArIGxldmVsID4gLTEgJiYgKHBvaW50LnBhdGggPSBbcG9pbnQucGF0aFswXSArIGxldmVsLCAuLi5wb2ludC5wYXRoLnNsaWNlKDEpXSk7XG4gICAgfSksIGN1cnJlbnRGb2N1cyAmJiBjdXJyZW50QW5jaG9yICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzID0ge1xuICAgICAgZm9jdXM6IGN1cnJlbnRGb2N1cyxcbiAgICAgIGFuY2hvcjogY3VycmVudEFuY2hvclxuICAgIH0pLCBuZXdGb2N1cyAmJiBuZXdBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMgPSB7XG4gICAgICBmb2N1czogbmV3Rm9jdXMsXG4gICAgICBhbmNob3I6IG5ld0FuY2hvclxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG5jb25zdCBzaG91bGRNZXJnZSA9IChvcCwgcHJldikgPT4gISEob3AudHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIgfHwgcHJldiAmJiBvcC50eXBlID09PSBcImluc2VydF90ZXh0XCIgJiYgcHJldi50eXBlID09PSBcImluc2VydF90ZXh0XCIgJiYgb3Aub2Zmc2V0ID09PSBwcmV2Lm9mZnNldCArIHByZXYudGV4dC5sZW5ndGggJiYgUGF0aC5lcXVhbHMob3AucGF0aCwgcHJldi5wYXRoKSAmJiBvcC50ZXh0ICE9PSBcIiBcIiB8fCBwcmV2ICYmIG9wLnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIiAmJiBwcmV2LnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIiAmJiBvcC5vZmZzZXQgKyBvcC50ZXh0Lmxlbmd0aCA9PT0gcHJldi5vZmZzZXQgJiYgUGF0aC5lcXVhbHMob3AucGF0aCwgcHJldi5wYXRoKSksIHNob3VsZE92ZXJ3cml0ZSA9IChvcCwgcHJldikgPT4gISEocHJldiAmJiBvcC50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiAmJiBwcmV2LnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSwgc2hvdWxkQ2xlYXIgPSAob3ApID0+IG9wLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiO1xuZnVuY3Rpb24gd2l0aG91dFNhdmluZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1NhdmluZyhlZGl0b3IpO1xuICBTQVZJTkcuc2V0KGVkaXRvciwgITEpLCBmbigpLCBTQVZJTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RPcGVyYXRpb24oZWRpdG9yKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJzZXRfc2VsZWN0aW9uXCIsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgLi4uZWRpdG9yLnNlbGVjdGlvblxuICAgIH0sXG4gICAgbmV3UHJvcGVydGllczoge1xuICAgICAgLi4uZWRpdG9yLnNlbGVjdGlvblxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmRPcGVyYXRpb25UYXJnZXRCbG9jayhlZGl0b3IsIG9wZXJhdGlvbikge1xuICBsZXQgYmxvY2s7XG4gIHJldHVybiBvcGVyYXRpb24udHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIgJiYgZWRpdG9yLnNlbGVjdGlvbiA/IGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW2VkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aFswXV0gOiBcInBhdGhcIiBpbiBvcGVyYXRpb24gJiYgKGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSksIGJsb2NrO1xufVxuY29uc3Qgc3luY1ZhbHVlQ2FsbGJhY2sgPSAoe1xuICBzZW5kQmFjayxcbiAgaW5wdXRcbn0pID0+IHtcbiAgdXBkYXRlVmFsdWUoe1xuICAgIGNvbnRleHQ6IGlucHV0LmNvbnRleHQsXG4gICAgc2VuZEJhY2ssXG4gICAgc2xhdGVFZGl0b3I6IGlucHV0LnNsYXRlRWRpdG9yLFxuICAgIHZhbHVlOiBpbnB1dC52YWx1ZSxcbiAgICBzdHJlYW1CbG9ja3M6IGlucHV0LnN0cmVhbUJsb2Nrc1xuICB9KTtcbn0sIHN5bmNWYWx1ZUxvZ2ljID0gZnJvbUNhbGxiYWNrKHN5bmNWYWx1ZUNhbGxiYWNrKSwgc3luY01hY2hpbmUgPSBzZXR1cCh7XG4gIHR5cGVzOiB7XG4gICAgY29udGV4dDoge30sXG4gICAgaW5wdXQ6IHt9LFxuICAgIGV2ZW50czoge30sXG4gICAgZW1pdHRlZDoge31cbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCI6IGFzc2lnbih7XG4gICAgICBpbml0aWFsVmFsdWVTeW5jZWQ6ICEwXG4gICAgfSksXG4gICAgXCJhc3NpZ24gcmVhZE9ubHlcIjogYXNzaWduKHtcbiAgICAgIHJlYWRPbmx5OiAoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcInVwZGF0ZSByZWFkT25seVwiKSwgZXZlbnQucmVhZE9ubHkpXG4gICAgfSksXG4gICAgXCJhc3NpZ24gcGVuZGluZyB2YWx1ZVwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1ZhbHVlOiAoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcInVwZGF0ZSB2YWx1ZVwiKSwgZXZlbnQudmFsdWUpXG4gICAgfSksXG4gICAgXCJjbGVhciBwZW5kaW5nIHZhbHVlXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nVmFsdWU6IHZvaWQgMFxuICAgIH0pLFxuICAgIFwiYXNzaWduIHByZXZpb3VzIHZhbHVlXCI6IGFzc2lnbih7XG4gICAgICBwcmV2aW91c1ZhbHVlOiAoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcImRvbmUgc3luY2luZ1wiKSwgZXZlbnQudmFsdWUpXG4gICAgfSksXG4gICAgXCJlbWl0IGRvbmUgc3luY2luZyBpbml0aWFsIHZhbHVlXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiXG4gICAgfSlcbiAgfSxcbiAgZ3VhcmRzOiB7XG4gICAgXCJpbml0aWFsIHZhbHVlIHN5bmNlZFwiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IGNvbnRleHQuaW5pdGlhbFZhbHVlU3luY2VkLFxuICAgIFwiaXMgYnVzeVwiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+ICFjb250ZXh0LnJlYWRPbmx5ICYmIChjb250ZXh0LmlzUHJvY2Vzc2luZ0xvY2FsQ2hhbmdlcyB8fCAoaXNDaGFuZ2luZ1JlbW90ZWx5KGNvbnRleHQuc2xhdGVFZGl0b3IpID8/ICExKSksXG4gICAgXCJ2YWx1ZSBjaGFuZ2VkIHdoaWxlIHN5bmNpbmdcIjogKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudFxuICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJkb25lIHN5bmNpbmdcIiksIGNvbnRleHQucGVuZGluZ1ZhbHVlICE9PSBldmVudC52YWx1ZSksXG4gICAgXCJwZW5kaW5nIHZhbHVlIGVxdWFscyBwcmV2aW91cyB2YWx1ZVwiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+ICEoY29udGV4dC5wcmV2aW91c1ZhbHVlID09PSB2b2lkIDAgJiYgY29udGV4dC5wZW5kaW5nVmFsdWUgPT09IHZvaWQgMCkgJiYgaXNFcXVhbChjb250ZXh0LnBlbmRpbmdWYWx1ZSwgY29udGV4dC5wcmV2aW91c1ZhbHVlKVxuICB9LFxuICBhY3RvcnM6IHtcbiAgICBcInN5bmMgdmFsdWVcIjogc3luY1ZhbHVlTG9naWNcbiAgfVxufSkuY3JlYXRlTWFjaGluZSh7XG4gIGlkOiBcInN5bmNcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGluaXRpYWxWYWx1ZVN5bmNlZDogITEsXG4gICAgaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzOiAhMSxcbiAgICBrZXlHZW5lcmF0b3I6IGlucHV0LmtleUdlbmVyYXRvcixcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICByZWFkT25seTogaW5wdXQucmVhZE9ubHksXG4gICAgc2xhdGVFZGl0b3I6IGlucHV0LnNsYXRlRWRpdG9yLFxuICAgIHBlbmRpbmdWYWx1ZTogdm9pZCAwLFxuICAgIHByZXZpb3VzVmFsdWU6IHZvaWQgMFxuICB9KSxcbiAgb246IHtcbiAgICBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIjoge1xuICAgICAgYWN0aW9uczogYXNzaWduKHtcbiAgICAgICAgaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzOiAhMFxuICAgICAgfSlcbiAgICB9LFxuICAgIG11dGF0aW9uOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICExXG4gICAgICB9KVxuICAgIH0sXG4gICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgYWN0aW9uczogW1wiYXNzaWduIHJlYWRPbmx5XCJdXG4gICAgfVxuICB9LFxuICB0eXBlOiBcInBhcmFsbGVsXCIsXG4gIHN0YXRlczoge1xuICAgIFwic2V0dGluZyB1cFwiOiB7XG4gICAgICBpbml0aWFsOiBcInN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiLFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIFwic3luY2luZyBpbml0aWFsIHZhbHVlXCI6IHtcbiAgICAgICAgICBhbHdheXM6IHtcbiAgICAgICAgICAgIGd1YXJkOiBcImluaXRpYWwgdmFsdWUgc3luY2VkXCIsXG4gICAgICAgICAgICB0YXJnZXQ6IFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiOiB7XG4gICAgICAgICAgZW50cnk6IFtcImVtaXQgZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIl0sXG4gICAgICAgICAgdHlwZTogXCJmaW5hbFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHN5bmNpbmc6IHtcbiAgICAgIGluaXRpYWw6IFwiaWRsZVwiLFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIGlkbGU6IHtcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJ1cGRhdGUgdmFsdWVcIjogW3tcbiAgICAgICAgICAgICAgZ3VhcmQ6IFwiaXMgYnVzeVwiLFxuICAgICAgICAgICAgICB0YXJnZXQ6IFwiYnVzeVwiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcGVuZGluZyB2YWx1ZVwiXVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwic3luY2luZ1wiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcGVuZGluZyB2YWx1ZVwiXVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGJ1c3k6IHtcbiAgICAgICAgICBhZnRlcjoge1xuICAgICAgICAgICAgMWUzOiBbe1xuICAgICAgICAgICAgICBndWFyZDogXCJpcyBidXN5XCIsXG4gICAgICAgICAgICAgIHJlZW50ZXI6ICEwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHRhcmdldDogXCJzeW5jaW5nXCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJ1cGRhdGUgdmFsdWVcIjogW3tcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHBlbmRpbmcgdmFsdWVcIl1cbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzeW5jaW5nOiB7XG4gICAgICAgICAgYWx3YXlzOiB7XG4gICAgICAgICAgICBndWFyZDogXCJwZW5kaW5nIHZhbHVlIGVxdWFscyBwcmV2aW91cyB2YWx1ZVwiLFxuICAgICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImNsZWFyIHBlbmRpbmcgdmFsdWVcIiwgXCJhc3NpZ24gaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGludm9rZToge1xuICAgICAgICAgICAgc3JjOiBcInN5bmMgdmFsdWVcIixcbiAgICAgICAgICAgIGlkOiBcInN5bmMgdmFsdWVcIixcbiAgICAgICAgICAgIGlucHV0OiAoe1xuICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICB9KSA9PiAoe1xuICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAga2V5R2VuZXJhdG9yOiBjb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlOiBjb250ZXh0LnByZXZpb3VzVmFsdWUsXG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6IGNvbnRleHQucmVhZE9ubHksXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzbGF0ZUVkaXRvcjogY29udGV4dC5zbGF0ZUVkaXRvcixcbiAgICAgICAgICAgICAgc3RyZWFtQmxvY2tzOiAhY29udGV4dC5pbml0aWFsVmFsdWVTeW5jZWQsXG4gICAgICAgICAgICAgIHZhbHVlOiBjb250ZXh0LnBlbmRpbmdWYWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW2VtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudCldXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJpbnZhbGlkIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW2VtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudCldXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ2YWx1ZSBjaGFuZ2VkXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW2VtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudCldXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkb25lIHN5bmNpbmdcIjogW3tcbiAgICAgICAgICAgICAgZ3VhcmQ6IFwidmFsdWUgY2hhbmdlZCB3aGlsZSBzeW5jaW5nXCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwcmV2aW91cyB2YWx1ZVwiLCBcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiXSxcbiAgICAgICAgICAgICAgcmVlbnRlcjogITBcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcImlkbGVcIixcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiY2xlYXIgcGVuZGluZyB2YWx1ZVwiLCBcImFzc2lnbiBwcmV2aW91cyB2YWx1ZVwiLCBcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiXVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pLCBkZWJ1ZyRoID0gZGVidWdXaXRoTmFtZShcImhvb2s6dXNlU3luY1ZhbHVlXCIpO1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlVmFsdWUoe1xuICBjb250ZXh0LFxuICBzZW5kQmFjayxcbiAgc2xhdGVFZGl0b3IsXG4gIHN0cmVhbUJsb2NrcyxcbiAgdmFsdWVcbn0pIHtcbiAgbGV0IGlzQ2hhbmdlZCA9ICExLCBpc1ZhbGlkID0gITA7XG4gIGNvbnN0IGhhZFNlbGVjdGlvbiA9ICEhc2xhdGVFZGl0b3Iuc2VsZWN0aW9uO1xuICBpZiAoKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApICYmIChkZWJ1ZyRoKFwiVmFsdWUgaXMgZW1wdHlcIiksIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICB3aXRob3V0U2F2aW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICB3aXRob3V0UGF0Y2hpbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgICAgaGFkU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuZGVzZWxlY3Qoc2xhdGVFZGl0b3IpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbkxlbmd0aCA9IHNsYXRlRWRpdG9yLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgc2xhdGVFZGl0b3IuY2hpbGRyZW4uZm9yRWFjaCgoXywgaW5kZXgpID0+IHtcbiAgICAgICAgICBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogW2NoaWxkcmVuTGVuZ3RoIC0gMSAtIGluZGV4XVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgc2xhdGVFZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgICAgICBkZWNvcmF0b3JzOiBbXVxuICAgICAgICB9KSwge1xuICAgICAgICAgIGF0OiBbMF1cbiAgICAgICAgfSksIGhhZFNlbGVjdGlvbiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChzbGF0ZUVkaXRvciwgWzAsIDBdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KSwgaXNDaGFuZ2VkID0gITApLCB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc2xhdGVWYWx1ZUZyb21Qcm9wcyA9IHRvU2xhdGVWYWx1ZSh2YWx1ZSwge1xuICAgICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gICAgfSk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgICAgd2l0aFJlbW90ZUNoYW5nZXMoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgICAgICB3aXRob3V0UGF0Y2hpbmcoc2xhdGVFZGl0b3IsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuTGVuZ3RoID0gc2xhdGVFZGl0b3IuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNsYXRlVmFsdWVGcm9tUHJvcHMubGVuZ3RoIDwgY2hpbGRyZW5MZW5ndGgpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuTGVuZ3RoIC0gMTsgaSA+IHNsYXRlVmFsdWVGcm9tUHJvcHMubGVuZ3RoIC0gMTsgaS0tKVxuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIGF0OiBbaV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaXNDaGFuZ2VkID0gITA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IFtjdXJyZW50QmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4XSBvZiBnZXRCbG9ja3Moe1xuICAgICAgICAgICAgICBzbGF0ZVZhbHVlOiBzbGF0ZVZhbHVlRnJvbVByb3BzLFxuICAgICAgICAgICAgICBzdHJlYW1CbG9ja3NcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBibG9ja0NoYW5nZWQsXG4gICAgICAgICAgICAgICAgYmxvY2tWYWxpZFxuICAgICAgICAgICAgICB9ID0gc3luY0Jsb2NrKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIHNlbmRCYWNrLFxuICAgICAgICAgICAgICAgIGJsb2NrOiBjdXJyZW50QmxvY2ssXG4gICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRCbG9ja0luZGV4LFxuICAgICAgICAgICAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpc0NoYW5nZWQgPSBibG9ja0NoYW5nZWQgfHwgaXNDaGFuZ2VkLCBpc1ZhbGlkID0gaXNWYWxpZCAmJiBibG9ja1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGlmICghaXNWYWxpZCkge1xuICAgIGRlYnVnJGgoXCJJbnZhbGlkIHZhbHVlLCByZXR1cm5pbmdcIiksIHNlbmRCYWNrKHtcbiAgICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nXCIsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgZGVidWckaChcIlNlcnZlciB2YWx1ZSBjaGFuZ2VkLCBzeW5jaW5nIGVkaXRvclwiKTtcbiAgICB0cnkge1xuICAgICAgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKSwgc2VuZEJhY2soe1xuICAgICAgICB0eXBlOiBcImludmFsaWQgdmFsdWVcIixcbiAgICAgICAgcmVzb2x1dGlvbjogbnVsbCxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pLCBzZW5kQmFjayh7XG4gICAgICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFkU2VsZWN0aW9uICYmICFzbGF0ZUVkaXRvci5zZWxlY3Rpb24gJiYgKFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSwgc2VuZEJhY2soe1xuICAgICAgdHlwZTogXCJ2YWx1ZSBjaGFuZ2VkXCIsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICB9IGVsc2VcbiAgICBkZWJ1ZyRoKFwiU2VydmVyIHZhbHVlIGFuZCBlZGl0b3IgdmFsdWUgaXMgZXF1YWwsIG5vIG5lZWQgdG8gc3luYy5cIik7XG4gIHNlbmRCYWNrKHtcbiAgICB0eXBlOiBcImRvbmUgc3luY2luZ1wiLFxuICAgIHZhbHVlXG4gIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24qIGdldEJsb2Nrcyh7XG4gIHNsYXRlVmFsdWUsXG4gIHN0cmVhbUJsb2Nrc1xufSkge1xuICBsZXQgaW5kZXggPSAwO1xuICBmb3IgYXdhaXQgKGNvbnN0IGJsb2NrIG9mIHNsYXRlVmFsdWUpXG4gICAgc3RyZWFtQmxvY2tzICYmIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKSwgeWllbGQgW2Jsb2NrLCBpbmRleF0sIGluZGV4Kys7XG59XG5mdW5jdGlvbiBzeW5jQmxvY2soe1xuICBjb250ZXh0LFxuICBzZW5kQmFjayxcbiAgYmxvY2ssXG4gIGluZGV4LFxuICBzbGF0ZUVkaXRvcixcbiAgdmFsdWVcbn0pIHtcbiAgbGV0IGJsb2NrQ2hhbmdlZCA9ICExLCBibG9ja1ZhbGlkID0gITA7XG4gIGNvbnN0IGN1cnJlbnRCbG9jayA9IGJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCA9IGluZGV4LCBvbGRCbG9jayA9IHNsYXRlRWRpdG9yLmNoaWxkcmVuW2N1cnJlbnRCbG9ja0luZGV4XSwgaGFzQ2hhbmdlcyA9IG9sZEJsb2NrICYmICFpc0VxdWFsKGN1cnJlbnRCbG9jaywgb2xkQmxvY2spO1xuICByZXR1cm4gRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgIHdpdGhSZW1vdGVDaGFuZ2VzKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgICB3aXRob3V0UGF0Y2hpbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgICAgaWYgKGhhc0NoYW5nZXMgJiYgYmxvY2tWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25WYWx1ZSA9IFt2YWx1ZVtjdXJyZW50QmxvY2tJbmRleF1dLCB2YWxpZGF0aW9uID0gdmFsaWRhdGVWYWx1ZSh2YWxpZGF0aW9uVmFsdWUsIGNvbnRleHQuc2NoZW1hLCBjb250ZXh0LmtleUdlbmVyYXRvcik7XG4gICAgICAgICAgIXZhbGlkYXRpb24udmFsaWQgJiYgdmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5hdXRvUmVzb2x2ZSAmJiB2YWxpZGF0aW9uLnJlc29sdXRpb24/LnBhdGNoZXMubGVuZ3RoID4gMCAmJiAhY29udGV4dC5yZWFkT25seSAmJiBjb250ZXh0LnByZXZpb3VzVmFsdWUgJiYgY29udGV4dC5wcmV2aW91c1ZhbHVlICE9PSB2YWx1ZSAmJiAoY29uc29sZS53YXJuKGAke3ZhbGlkYXRpb24ucmVzb2x1dGlvbi5hY3Rpb259IGZvciBibG9jayB3aXRoIF9rZXkgJyR7dmFsaWRhdGlvblZhbHVlWzBdLl9rZXl9Jy4gJHt2YWxpZGF0aW9uLnJlc29sdXRpb24/LmRlc2NyaXB0aW9ufWApLCB2YWxpZGF0aW9uLnJlc29sdXRpb24ucGF0Y2hlcy5mb3JFYWNoKChwYXRjaCkgPT4ge1xuICAgICAgICAgICAgc2VuZEJhY2soe1xuICAgICAgICAgICAgICB0eXBlOiBcInBhdGNoXCIsXG4gICAgICAgICAgICAgIHBhdGNoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSksIHZhbGlkYXRpb24udmFsaWQgfHwgdmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5hdXRvUmVzb2x2ZSA/IChvbGRCbG9jay5fa2V5ID09PSBjdXJyZW50QmxvY2suX2tleSA/IChkZWJ1ZyRoLmVuYWJsZWQgJiYgZGVidWckaChcIlVwZGF0aW5nIGJsb2NrXCIsIG9sZEJsb2NrLCBjdXJyZW50QmxvY2spLCBfdXBkYXRlQmxvY2soc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywgb2xkQmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4KSkgOiAoZGVidWckaC5lbmFibGVkICYmIGRlYnVnJGgoXCJSZXBsYWNpbmcgYmxvY2tcIiwgb2xkQmxvY2ssIGN1cnJlbnRCbG9jayksIF9yZXBsYWNlQmxvY2soc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpKSwgYmxvY2tDaGFuZ2VkID0gITApIDogKHNlbmRCYWNrKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW52YWxpZCB2YWx1ZVwiLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogdmFsaWRhdGlvbi5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9KSwgYmxvY2tWYWxpZCA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9sZEJsb2NrICYmIGJsb2NrVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uVmFsdWUgPSBbdmFsdWVbY3VycmVudEJsb2NrSW5kZXhdXSwgdmFsaWRhdGlvbiA9IHZhbGlkYXRlVmFsdWUodmFsaWRhdGlvblZhbHVlLCBjb250ZXh0LnNjaGVtYSwgY29udGV4dC5rZXlHZW5lcmF0b3IpO1xuICAgICAgICAgIGRlYnVnJGguZW5hYmxlZCAmJiBkZWJ1ZyRoKFwiVmFsaWRhdGluZyBhbmQgaW5zZXJ0aW5nIG5ldyBibG9jayBpbiB0aGUgZW5kIG9mIHRoZSB2YWx1ZVwiLCBjdXJyZW50QmxvY2spLCB2YWxpZGF0aW9uLnZhbGlkIHx8IHZhbGlkYXRpb24ucmVzb2x1dGlvbj8uYXV0b1Jlc29sdmUgPyBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIHtcbiAgICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gICAgICAgICAgfSkgOiAoZGVidWckaChcIkludmFsaWRcIiwgdmFsaWRhdGlvbiksIHNlbmRCYWNrKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW52YWxpZCB2YWx1ZVwiLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogdmFsaWRhdGlvbi5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9KSwgYmxvY2tWYWxpZCA9ICExKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pLCB7XG4gICAgYmxvY2tDaGFuZ2VkLFxuICAgIGJsb2NrVmFsaWRcbiAgfTtcbn1cbmZ1bmN0aW9uIF9yZXBsYWNlQmxvY2soc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpIHtcbiAgY29uc3QgY3VycmVudFNlbGVjdGlvbiA9IHNsYXRlRWRpdG9yLnNlbGVjdGlvbiwgc2VsZWN0aW9uRm9jdXNPbkJsb2NrID0gY3VycmVudFNlbGVjdGlvbiAmJiBjdXJyZW50U2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0gPT09IGN1cnJlbnRCbG9ja0luZGV4O1xuICBzZWxlY3Rpb25Gb2N1c09uQmxvY2sgJiYgVHJhbnNmb3Jtcy5kZXNlbGVjdChzbGF0ZUVkaXRvciksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4XVxuICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCB7XG4gICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleF1cbiAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCksIHNlbGVjdGlvbkZvY3VzT25CbG9jayAmJiBUcmFuc2Zvcm1zLnNlbGVjdChzbGF0ZUVkaXRvciwgY3VycmVudFNlbGVjdGlvbik7XG59XG5mdW5jdGlvbiBfdXBkYXRlQmxvY2soc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywgb2xkQmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4KSB7XG4gIGlmIChUcmFuc2Zvcm1zLnNldE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIHtcbiAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4XVxuICB9KSwgc2xhdGVFZGl0b3IuaXNUZXh0QmxvY2soY3VycmVudEJsb2NrKSAmJiBzbGF0ZUVkaXRvci5pc1RleHRCbG9jayhvbGRCbG9jaykpIHtcbiAgICBjb25zdCBvbGRCbG9ja0NoaWxkcmVuTGVuZ3RoID0gb2xkQmxvY2suY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGN1cnJlbnRCbG9jay5jaGlsZHJlbi5sZW5ndGggPCBvbGRCbG9ja0NoaWxkcmVuTGVuZ3RoICYmIEFycmF5LmZyb20oQXJyYXkob2xkQmxvY2tDaGlsZHJlbkxlbmd0aCAtIGN1cnJlbnRCbG9jay5jaGlsZHJlbi5sZW5ndGgpKS5mb3JFYWNoKChfLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGRJbmRleCA9IG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggLSAxIC0gaW5kZXg7XG4gICAgICBjaGlsZEluZGV4ID4gMCAmJiAoZGVidWckaChcIlJlbW92aW5nIGNoaWxkXCIpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGNoaWxkSW5kZXhdXG4gICAgICB9KSk7XG4gICAgfSksIGN1cnJlbnRCbG9jay5jaGlsZHJlbi5mb3JFYWNoKChjdXJyZW50QmxvY2tDaGlsZCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleCkgPT4ge1xuICAgICAgY29uc3Qgb2xkQmxvY2tDaGlsZCA9IG9sZEJsb2NrLmNoaWxkcmVuW2N1cnJlbnRCbG9ja0NoaWxkSW5kZXhdLCBpc0NoaWxkQ2hhbmdlZCA9ICFpc0VxdWFsKGN1cnJlbnRCbG9ja0NoaWxkLCBvbGRCbG9ja0NoaWxkKSwgaXNUZXh0Q2hhbmdlZCA9ICFpc0VxdWFsKGN1cnJlbnRCbG9ja0NoaWxkLnRleHQsIG9sZEJsb2NrQ2hpbGQ/LnRleHQpLCBwYXRoID0gW2N1cnJlbnRCbG9ja0luZGV4LCBjdXJyZW50QmxvY2tDaGlsZEluZGV4XTtcbiAgICAgIGlmIChpc0NoaWxkQ2hhbmdlZClcbiAgICAgICAgaWYgKGN1cnJlbnRCbG9ja0NoaWxkLl9rZXkgPT09IG9sZEJsb2NrQ2hpbGQ/Ll9rZXkpIHtcbiAgICAgICAgICBkZWJ1ZyRoKFwiVXBkYXRpbmcgY2hhbmdlZCBjaGlsZFwiLCBjdXJyZW50QmxvY2tDaGlsZCwgb2xkQmxvY2tDaGlsZCksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9ja0NoaWxkLCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IGlzU3Bhbk5vZGUgPSBUZXh0LmlzVGV4dChjdXJyZW50QmxvY2tDaGlsZCkgJiYgY3VycmVudEJsb2NrQ2hpbGQuX3R5cGUgPT09IFwic3BhblwiICYmIFRleHQuaXNUZXh0KG9sZEJsb2NrQ2hpbGQpICYmIG9sZEJsb2NrQ2hpbGQuX3R5cGUgPT09IFwic3BhblwiO1xuICAgICAgICAgIGlzU3Bhbk5vZGUgJiYgaXNUZXh0Q2hhbmdlZCA/IChUcmFuc2Zvcm1zLmRlbGV0ZShzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgYXQ6IHtcbiAgICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIG9mZnNldDogb2xkQmxvY2tDaGlsZC50ZXh0Lmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0VGV4dChzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrQ2hpbGQudGV4dCwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSkgOiBpc1NwYW5Ob2RlIHx8IChkZWJ1ZyRoKFwiVXBkYXRpbmcgY2hhbmdlZCBpbmxpbmUgb2JqZWN0IGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgX2tleTogVk9JRF9DSElMRF9LRVlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogWy4uLnBhdGgsIDBdLFxuICAgICAgICAgICAgdm9pZHM6ICEwXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Ugb2xkQmxvY2tDaGlsZCA/IChkZWJ1ZyRoKFwiUmVwbGFjaW5nIGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZCwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSA6IG9sZEJsb2NrQ2hpbGQgfHwgKGRlYnVnJGgoXCJJbnNlcnRpbmcgbmV3IGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrQ2hpbGQsIHtcbiAgICAgICAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4LCBjdXJyZW50QmxvY2tDaGlsZEluZGV4XVxuICAgICAgICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IGRlYnVnJGcgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50OlBvcnRhYmxlVGV4dEVkaXRvcjpTeW5jaHJvbml6ZXJcIik7XG5mdW5jdGlvbiBTeW5jaHJvbml6ZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNDApLCB7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgc2xhdGVFZGl0b3JcbiAgfSA9IHByb3BzLCB2YWx1ZSA9IHVzZVNlbGVjdG9yKHByb3BzLmVkaXRvckFjdG9yLCBfdGVtcCksIHJlYWRPbmx5ID0gdXNlU2VsZWN0b3IocHJvcHMuZWRpdG9yQWN0b3IsIF90ZW1wMik7XG4gIGxldCB0MDtcbiAgJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDAgPSBwcm9wcy5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLCAkWzBdID0gcHJvcHMuZWRpdG9yQWN0b3IsICRbMV0gPSB0MCkgOiB0MCA9ICRbMV07XG4gIGNvbnN0IHQxID0gdDAuY29udGV4dC5rZXlHZW5lcmF0b3I7XG4gIGxldCB0MjtcbiAgJFsyXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDIgPSBwcm9wcy5lZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgfSksICRbMl0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFszXSA9IHQyKSA6IHQyID0gJFszXTtcbiAgbGV0IHQzO1xuICAkWzRdICE9PSBwcm9wcy5lZGl0b3JBY3RvciA/ICh0MyA9IHByb3BzLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksICRbNF0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFs1XSA9IHQzKSA6IHQzID0gJFs1XTtcbiAgbGV0IHQ0O1xuICAkWzZdICE9PSBzbGF0ZUVkaXRvciB8fCAkWzddICE9PSB0MC5jb250ZXh0LmtleUdlbmVyYXRvciB8fCAkWzhdICE9PSB0MiB8fCAkWzldICE9PSB0My5jb250ZXh0LnNjaGVtYSA/ICh0NCA9IHtcbiAgICBpbnB1dDoge1xuICAgICAga2V5R2VuZXJhdG9yOiB0MSxcbiAgICAgIHJlYWRPbmx5OiB0MixcbiAgICAgIHNjaGVtYTogdDMuY29udGV4dC5zY2hlbWEsXG4gICAgICBzbGF0ZUVkaXRvclxuICAgIH1cbiAgfSwgJFs2XSA9IHNsYXRlRWRpdG9yLCAkWzddID0gdDAuY29udGV4dC5rZXlHZW5lcmF0b3IsICRbOF0gPSB0MiwgJFs5XSA9IHQzLmNvbnRleHQuc2NoZW1hLCAkWzEwXSA9IHQ0KSA6IHQ0ID0gJFsxMF07XG4gIGNvbnN0IHN5bmNBY3RvclJlZiA9IHVzZUFjdG9yUmVmKHN5bmNNYWNoaW5lLCB0NCk7XG4gIGxldCB0NTtcbiAgJFsxMV0gIT09IGVkaXRvckFjdG9yID8gKHQ1ID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKSwgJFsxMV0gPSBlZGl0b3JBY3RvciwgJFsxMl0gPSB0NSkgOiB0NSA9ICRbMTJdO1xuICBsZXQgdDY7XG4gICRbMTNdICE9PSBzbGF0ZUVkaXRvciB8fCAkWzE0XSAhPT0gdDUuY29udGV4dC5zY2hlbWEgPyAodDYgPSB7XG4gICAgaW5wdXQ6IHtcbiAgICAgIHNjaGVtYTogdDUuY29udGV4dC5zY2hlbWEsXG4gICAgICBzbGF0ZUVkaXRvclxuICAgIH1cbiAgfSwgJFsxM10gPSBzbGF0ZUVkaXRvciwgJFsxNF0gPSB0NS5jb250ZXh0LnNjaGVtYSwgJFsxNV0gPSB0NikgOiB0NiA9ICRbMTVdO1xuICBjb25zdCBtdXRhdGlvbkFjdG9yUmVmID0gdXNlQWN0b3JSZWYobXV0YXRpb25NYWNoaW5lLCB0Nik7XG4gIGxldCB0NywgdDg7XG4gICRbMTZdICE9PSBlZGl0b3JBY3RvciB8fCAkWzE3XSAhPT0gbXV0YXRpb25BY3RvclJlZiB8fCAkWzE4XSAhPT0gc3luY0FjdG9yUmVmID8gKHQ3ID0gKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG11dGF0aW9uQWN0b3JSZWYub24oXCIqXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQudHlwZSA9PT0gXCJoYXMgcGVuZGluZyBwYXRjaGVzXCIgJiYgc3luY0FjdG9yUmVmLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIlxuICAgICAgfSksIGV2ZW50LnR5cGUgPT09IFwibXV0YXRpb25cIiAmJiAoc3luY0FjdG9yUmVmLnNlbmQoe1xuICAgICAgICB0eXBlOiBcIm11dGF0aW9uXCJcbiAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJtdXRhdGlvblwiLFxuICAgICAgICBwYXRjaGVzOiBldmVudC5wYXRjaGVzLFxuICAgICAgICBzbmFwc2hvdDogZXZlbnQuc25hcHNob3QsXG4gICAgICAgIHZhbHVlOiBldmVudC5zbmFwc2hvdFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0OCA9IFttdXRhdGlvbkFjdG9yUmVmLCBzeW5jQWN0b3JSZWYsIGVkaXRvckFjdG9yXSwgJFsxNl0gPSBlZGl0b3JBY3RvciwgJFsxN10gPSBtdXRhdGlvbkFjdG9yUmVmLCAkWzE4XSA9IHN5bmNBY3RvclJlZiwgJFsxOV0gPSB0NywgJFsyMF0gPSB0OCkgOiAodDcgPSAkWzE5XSwgdDggPSAkWzIwXSksIHVzZUVmZmVjdCh0NywgdDgpO1xuICBsZXQgdDEwLCB0OTtcbiAgJFsyMV0gIT09IHByb3BzLmVkaXRvckFjdG9yIHx8ICRbMjJdICE9PSBzeW5jQWN0b3JSZWYgPyAodDkgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uXzAgPSBzeW5jQWN0b3JSZWYub24oXCIqXCIsIChldmVudF8wKSA9PiB7XG4gICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKGV2ZW50XzApO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb25fMC51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxMCA9IFtwcm9wcy5lZGl0b3JBY3Rvciwgc3luY0FjdG9yUmVmXSwgJFsyMV0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFsyMl0gPSBzeW5jQWN0b3JSZWYsICRbMjNdID0gdDEwLCAkWzI0XSA9IHQ5KSA6ICh0MTAgPSAkWzIzXSwgdDkgPSAkWzI0XSksIHVzZUVmZmVjdCh0OSwgdDEwKTtcbiAgbGV0IHQxMSwgdDEyO1xuICAkWzI1XSAhPT0gcmVhZE9ubHkgfHwgJFsyNl0gIT09IHN5bmNBY3RvclJlZiA/ICh0MTEgPSAoKSA9PiB7XG4gICAgc3luY0FjdG9yUmVmLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgcmVhZE9ubHlcIixcbiAgICAgIHJlYWRPbmx5XG4gICAgfSk7XG4gIH0sIHQxMiA9IFtzeW5jQWN0b3JSZWYsIHJlYWRPbmx5XSwgJFsyNV0gPSByZWFkT25seSwgJFsyNl0gPSBzeW5jQWN0b3JSZWYsICRbMjddID0gdDExLCAkWzI4XSA9IHQxMikgOiAodDExID0gJFsyN10sIHQxMiA9ICRbMjhdKSwgdXNlRWZmZWN0KHQxMSwgdDEyKTtcbiAgbGV0IHQxMywgdDE0O1xuICAkWzI5XSAhPT0gc3luY0FjdG9yUmVmIHx8ICRbMzBdICE9PSB2YWx1ZSA/ICh0MTMgPSAoKSA9PiB7XG4gICAgZGVidWckZyhcIlZhbHVlIGZyb20gcHJvcHMgY2hhbmdlZCwgc3luY2luZyBuZXcgdmFsdWVcIiksIHN5bmNBY3RvclJlZi5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHZhbHVlXCIsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICB9LCB0MTQgPSBbc3luY0FjdG9yUmVmLCB2YWx1ZV0sICRbMjldID0gc3luY0FjdG9yUmVmLCAkWzMwXSA9IHZhbHVlLCAkWzMxXSA9IHQxMywgJFszMl0gPSB0MTQpIDogKHQxMyA9ICRbMzFdLCB0MTQgPSAkWzMyXSksIHVzZUVmZmVjdCh0MTMsIHQxNCk7XG4gIGxldCB0MTU7XG4gICRbMzNdICE9PSBlZGl0b3JBY3RvciB8fCAkWzM0XSAhPT0gbXV0YXRpb25BY3RvclJlZiA/ICh0MTUgPSAoKSA9PiB7XG4gICAgZGVidWckZyhcIlN1YnNjcmliaW5nIHRvIHBhdGNoIGV2ZW50c1wiKTtcbiAgICBjb25zdCBzdWIgPSBlZGl0b3JBY3Rvci5vbihcInBhdGNoXCIsIChldmVudF8xKSA9PiB7XG4gICAgICBtdXRhdGlvbkFjdG9yUmVmLnNlbmQoZXZlbnRfMSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYnVnJGcoXCJVbnN1YnNjcmliaW5nIHRvIHBhdGNoIGV2ZW50c1wiKSwgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgJFszM10gPSBlZGl0b3JBY3RvciwgJFszNF0gPSBtdXRhdGlvbkFjdG9yUmVmLCAkWzM1XSA9IHQxNSkgOiB0MTUgPSAkWzM1XTtcbiAgbGV0IHQxNjtcbiAgcmV0dXJuICRbMzZdICE9PSBlZGl0b3JBY3RvciB8fCAkWzM3XSAhPT0gbXV0YXRpb25BY3RvclJlZiB8fCAkWzM4XSAhPT0gc2xhdGVFZGl0b3IgPyAodDE2ID0gW2VkaXRvckFjdG9yLCBtdXRhdGlvbkFjdG9yUmVmLCBzbGF0ZUVkaXRvcl0sICRbMzZdID0gZWRpdG9yQWN0b3IsICRbMzddID0gbXV0YXRpb25BY3RvclJlZiwgJFszOF0gPSBzbGF0ZUVkaXRvciwgJFszOV0gPSB0MTYpIDogdDE2ID0gJFszOV0sIHVzZUVmZmVjdCh0MTUsIHQxNiksIG51bGw7XG59XG5mdW5jdGlvbiBfdGVtcDIoc18wKSB7XG4gIHJldHVybiBzXzAubWF0Y2hlcyh7XG4gICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICB9KTtcbn1cbmZ1bmN0aW9uIF90ZW1wKHMpIHtcbiAgcmV0dXJuIHMuY29udGV4dC52YWx1ZTtcbn1cblN5bmNocm9uaXplci5kaXNwbGF5TmFtZSA9IFwiU3luY2hyb25pemVyXCI7XG5jb25zdCBkZWJ1ZyRmID0gZGVidWdXaXRoTmFtZShcIm9wZXJhdGlvblRvUGF0Y2hlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvblRvUGF0Y2hlcyh0eXBlcykge1xuICBjb25zdCB0ZXh0QmxvY2tOYW1lID0gdHlwZXMuYmxvY2submFtZTtcbiAgZnVuY3Rpb24gaW5zZXJ0VGV4dFBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBiZWZvcmVWYWx1ZSkge1xuICAgIGRlYnVnJGYuZW5hYmxlZCAmJiBkZWJ1ZyRmKFwiT3BlcmF0aW9uXCIsIEpTT04uc3RyaW5naWZ5KG9wZXJhdGlvbiwgbnVsbCwgMikpO1xuICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLmlzVGV4dEJsb2NrKGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV0pICYmIGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV07XG4gICAgaWYgKCFibG9jaylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGJsb2NrXCIpO1xuICAgIGNvbnN0IHRleHRDaGlsZCA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgZWRpdG9yLmlzVGV4dFNwYW4oYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dKSAmJiBibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV07XG4gICAgaWYgKCF0ZXh0Q2hpbGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBjaGlsZFwiKTtcbiAgICBjb25zdCBwYXRoID0gW3tcbiAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IHRleHRDaGlsZC5fa2V5XG4gICAgfSwgXCJ0ZXh0XCJdLCBwcmV2QmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHByZXZDaGlsZCA9IGVkaXRvci5pc1RleHRCbG9jayhwcmV2QmxvY2spICYmIHByZXZCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0sIHByZXZUZXh0ID0gZWRpdG9yLmlzVGV4dFNwYW4ocHJldkNoaWxkKSA/IHByZXZDaGlsZC50ZXh0IDogXCJcIiwgcGF0Y2ggPSBkaWZmTWF0Y2hQYXRjaCQxKHByZXZUZXh0LCB0ZXh0Q2hpbGQudGV4dCwgcGF0aCk7XG4gICAgcmV0dXJuIHBhdGNoLnZhbHVlLmxlbmd0aCA/IFtwYXRjaF0gOiBbXTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVUZXh0UGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSBlZGl0b3IgJiYgZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAoIWJsb2NrKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYmxvY2tcIik7XG4gICAgY29uc3QgY2hpbGQgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSB8fCB2b2lkIDAsIHRleHRDaGlsZCA9IGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSA/IGNoaWxkIDogdm9pZCAwO1xuICAgIGlmIChjaGlsZCAmJiAhdGV4dENoaWxkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3BhblwiKTtcbiAgICBpZiAoIXRleHRDaGlsZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNoaWxkXCIpO1xuICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgX2tleTogdGV4dENoaWxkLl9rZXlcbiAgICB9LCBcInRleHRcIl0sIGJlZm9yZUJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dLCBwcmV2VGV4dENoaWxkID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJlZm9yZUJsb2NrKSAmJiBiZWZvcmVCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0sIHByZXZUZXh0ID0gZWRpdG9yLmlzVGV4dFNwYW4ocHJldlRleHRDaGlsZCkgJiYgcHJldlRleHRDaGlsZC50ZXh0LCBwYXRjaCA9IGRpZmZNYXRjaFBhdGNoJDEocHJldlRleHQgfHwgXCJcIiwgdGV4dENoaWxkLnRleHQsIHBhdGgpO1xuICAgIHJldHVybiBwYXRjaC52YWx1ZSA/IFtwYXRjaF0gOiBbXTtcbiAgfVxuICBmdW5jdGlvbiBzZXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24pIHtcbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBibG9jayA9IGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV07XG4gICAgICBpZiAodHlwZW9mIGJsb2NrLl9rZXkgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYmxvY2sgdG8gaGF2ZSBhIF9rZXlcIik7XG4gICAgICBjb25zdCBzZXROb2RlID0gb21pdEJ5KHtcbiAgICAgICAgLi4uZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSxcbiAgICAgICAgLi4ub3BlcmF0aW9uLm5ld1Byb3BlcnRpZXNcbiAgICAgIH0sIGlzVW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBbc2V0KGZyb21TbGF0ZVZhbHVlKFtzZXROb2RlXSwgdGV4dEJsb2NrTmFtZSlbMF0sIFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH1dKV07XG4gICAgfSBlbHNlIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBjb25zdCBibG9ja0tleSA9IGJsb2NrLl9rZXksIGNoaWxkS2V5ID0gY2hpbGQuX2tleSwgcGF0Y2hlcyA9IFtdLCBrZXlzID0gT2JqZWN0LmtleXMob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMpO1xuICAgICAgICAgIHJldHVybiBrZXlzLmZvckVhY2goKGtleU5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlOYW1lID09PSBcIl9rZXlcIikge1xuICAgICAgICAgICAgICBjb25zdCB2YWwgPSBnZXQob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMsIGtleU5hbWUpO1xuICAgICAgICAgICAgICBwYXRjaGVzLnB1c2goc2V0KHZhbCwgW3tcbiAgICAgICAgICAgICAgICBfa2V5OiBibG9ja0tleVxuICAgICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIGJsb2NrLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCBrZXlOYW1lXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgdmFsID0gZ2V0KG9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLCBrZXlOYW1lKTtcbiAgICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHNldCh2YWwsIFt7XG4gICAgICAgICAgICAgICAgX2tleTogYmxvY2tLZXlcbiAgICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogY2hpbGRLZXlcbiAgICAgICAgICAgICAgfSwga2V5TmFtZV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgcGF0Y2hlcztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIHZhbGlkIGNoaWxkXCIpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYSB2YWxpZCBibG9ja1wiKTtcbiAgICB9IGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBwYXRoIGVuY291bnRlcmVkOiAke0pTT04uc3RyaW5naWZ5KG9wZXJhdGlvbi5wYXRoKX1gKTtcbiAgfVxuICBmdW5jdGlvbiBpbnNlcnROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIGlzVGV4dEJsb2NrID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKTtcbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IG9wZXJhdGlvbi5wYXRoWzBdID09PSAwID8gXCJiZWZvcmVcIiA6IFwiYWZ0ZXJcIiwgYmVmb3JlQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXSAtIDFdLCB0YXJnZXRLZXkgPSBvcGVyYXRpb24ucGF0aFswXSA9PT0gMCA/IGJsb2NrPy5fa2V5IDogYmVmb3JlQmxvY2s/Ll9rZXk7XG4gICAgICByZXR1cm4gdGFyZ2V0S2V5ID8gW2luc2VydChbZnJvbVNsYXRlVmFsdWUoW29wZXJhdGlvbi5ub2RlXSwgdGV4dEJsb2NrTmFtZSlbMF1dLCBwb3NpdGlvbiwgW3tcbiAgICAgICAgX2tleTogdGFyZ2V0S2V5XG4gICAgICB9XSldIDogW3NldElmTWlzc2luZyhiZWZvcmVWYWx1ZSwgW10pLCBpbnNlcnQoW2Zyb21TbGF0ZVZhbHVlKFtvcGVyYXRpb24ubm9kZV0sIHRleHRCbG9ja05hbWUpWzBdXSwgXCJiZWZvcmVcIiwgW29wZXJhdGlvbi5wYXRoWzBdXSldO1xuICAgIH0gZWxzZSBpZiAoaXNUZXh0QmxvY2sgJiYgb3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAyICYmIGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV0pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAwIHx8ICFibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdID8gXCJiZWZvcmVcIiA6IFwiYWZ0ZXJcIiwgbm9kZSA9IHtcbiAgICAgICAgLi4ub3BlcmF0aW9uLm5vZGVcbiAgICAgIH07XG4gICAgICAhbm9kZS5fdHlwZSAmJiBUZXh0LmlzVGV4dChub2RlKSAmJiAobm9kZS5fdHlwZSA9IFwic3BhblwiLCBub2RlLm1hcmtzID0gW10pO1xuICAgICAgY29uc3QgY2hpbGQgPSBmcm9tU2xhdGVWYWx1ZShbe1xuICAgICAgICBfa2V5OiBcImJvZ3VzXCIsXG4gICAgICAgIF90eXBlOiB0ZXh0QmxvY2tOYW1lLFxuICAgICAgICBjaGlsZHJlbjogW25vZGVdXG4gICAgICB9XSwgdGV4dEJsb2NrTmFtZSlbMF0uY2hpbGRyZW5bMF07XG4gICAgICByZXR1cm4gW2luc2VydChbY2hpbGRdLCBwb3NpdGlvbiwgW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfSwgXCJjaGlsZHJlblwiLCBibG9jay5jaGlsZHJlbi5sZW5ndGggPD0gMSB8fCAhYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXSA/IDAgOiB7XG4gICAgICAgIF9rZXk6IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdIC0gMV0uX2tleVxuICAgICAgfV0pXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlYnVnJGYoXCJTb21ldGhpbmcgd2FzIGluc2VydGVkIGludG8gYSB2b2lkIGJsb2NrLiBOb3QgcHJvZHVjaW5nIGVkaXRvciBwYXRjaGVzLlwiKSwgW107XG4gIH1cbiAgZnVuY3Rpb24gc3BsaXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IFtdLCBzcGxpdEJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAoIWVkaXRvci5pc1RleHRCbG9jayhzcGxpdEJsb2NrKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQmxvY2sgd2l0aCBwYXRoICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLnBhdGhbMF0pfSBpcyBub3QgYSB0ZXh0IGJsb2NrIGFuZCBjYW4ndCBiZSBzcGxpdGApO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IG9sZEJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhvbGRCbG9jaykpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBmcm9tU2xhdGVWYWx1ZShbZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdICsgMV1dLCB0ZXh0QmxvY2tOYW1lKVswXTtcbiAgICAgICAgdGFyZ2V0VmFsdWUgJiYgKHBhdGNoZXMucHVzaChpbnNlcnQoW3RhcmdldFZhbHVlXSwgXCJhZnRlclwiLCBbe1xuICAgICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgICB9XSkpLCBvbGRCbG9jay5jaGlsZHJlbi5zbGljZShvcGVyYXRpb24ucG9zaXRpb24pLmZvckVhY2goKHNwYW4pID0+IHtcbiAgICAgICAgICBjb25zdCBwYXRoID0gW3tcbiAgICAgICAgICAgIF9rZXk6IG9sZEJsb2NrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IHNwYW4uX2tleVxuICAgICAgICAgIH1dO1xuICAgICAgICAgIHBhdGNoZXMucHVzaCh1bnNldChwYXRoKSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgIH1cbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCBzcGxpdFNwYW4gPSBzcGxpdEJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihzcGxpdFNwYW4pKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldFNwYW5zID0gZnJvbVNsYXRlVmFsdWUoW3tcbiAgICAgICAgICAuLi5zcGxpdEJsb2NrLFxuICAgICAgICAgIGNoaWxkcmVuOiBzcGxpdEJsb2NrLmNoaWxkcmVuLnNsaWNlKG9wZXJhdGlvbi5wYXRoWzFdICsgMSwgb3BlcmF0aW9uLnBhdGhbMV0gKyAyKVxuICAgICAgICB9XSwgdGV4dEJsb2NrTmFtZSlbMF0uY2hpbGRyZW47XG4gICAgICAgIHBhdGNoZXMucHVzaChpbnNlcnQodGFyZ2V0U3BhbnMsIFwiYWZ0ZXJcIiwgW3tcbiAgICAgICAgICBfa2V5OiBzcGxpdEJsb2NrLl9rZXlcbiAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgX2tleTogc3BsaXRTcGFuLl9rZXlcbiAgICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKHNldChzcGxpdFNwYW4udGV4dCwgW3tcbiAgICAgICAgICBfa2V5OiBzcGxpdEJsb2NrLl9rZXlcbiAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgX2tleTogc3BsaXRTcGFuLl9rZXlcbiAgICAgICAgfSwgXCJ0ZXh0XCJdKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0Y2hlcztcbiAgICB9XG4gICAgcmV0dXJuIHBhdGNoZXM7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBiZWZvcmVWYWx1ZSkge1xuICAgIGNvbnN0IGJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChibG9jayAmJiBibG9jay5fa2V5KVxuICAgICAgICByZXR1cm4gW3Vuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XSldO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmxvY2sgbm90IGZvdW5kXCIpO1xuICAgIH0gZWxzZSBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IHNwYW5Ub1JlbW92ZSA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICAgIHJldHVybiBzcGFuVG9SZW1vdmUgPyBibG9jay5jaGlsZHJlbi5maWx0ZXIoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0gb3BlcmF0aW9uLm5vZGUuX2tleSkubGVuZ3RoID4gMSA/IChjb25zb2xlLndhcm4oYE11bHRpcGxlIHNwYW5zIGhhdmUgXFxgX2tleVxcYCAke29wZXJhdGlvbi5ub2RlLl9rZXl9LiBJdCdzIGFtYmlndW91cyB3aGljaCBvbmUgdG8gcmVtb3ZlLmAsIEpTT04uc3RyaW5naWZ5KGJsb2NrLCBudWxsLCAyKSksIFtdKSA6IFt1bnNldChbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogc3BhblRvUmVtb3ZlLl9rZXlcbiAgICAgIH1dKV0gOiAoZGVidWckZihcIlNwYW4gbm90IGZvdW5kIGluIGVkaXRvciB0cnlpbmcgdG8gcmVtb3ZlIG5vZGVcIiksIFtdKTtcbiAgICB9IGVsc2VcbiAgICAgIHJldHVybiBkZWJ1ZyRmKFwiTm90IGNyZWF0aW5nIHBhdGNoIGluc2lkZSBvYmplY3QgYmxvY2tcIiksIFtdO1xuICB9XG4gIGZ1bmN0aW9uIG1lcmdlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBiZWZvcmVWYWx1ZSkge1xuICAgIGNvbnN0IHBhdGNoZXMgPSBbXSwgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHVwZGF0ZWRCbG9jayA9IGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV07XG4gICAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSlcbiAgICAgIGlmIChibG9jaz8uX2tleSkge1xuICAgICAgICBjb25zdCBuZXdCbG9jayA9IGZyb21TbGF0ZVZhbHVlKFtlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF0gLSAxXV0sIHRleHRCbG9ja05hbWUpWzBdO1xuICAgICAgICBwYXRjaGVzLnB1c2goc2V0KG5ld0Jsb2NrLCBbe1xuICAgICAgICAgIF9rZXk6IG5ld0Jsb2NrLl9rZXlcbiAgICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhcmdldCBrZXkgbm90IGZvdW5kIVwiKTtcbiAgICBlbHNlIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGVkaXRvci5pc1RleHRCbG9jayh1cGRhdGVkQmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgdXBkYXRlZFNwYW4gPSB1cGRhdGVkQmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXSAmJiBlZGl0b3IuaXNUZXh0U3Bhbih1cGRhdGVkQmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXSkgPyB1cGRhdGVkQmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXSA6IHZvaWQgMCwgcmVtb3ZlZFNwYW4gPSBibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0gJiYgZWRpdG9yLmlzVGV4dFNwYW4oYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dKSA/IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSA6IHZvaWQgMDtcbiAgICAgIHVwZGF0ZWRTcGFuICYmIChibG9jay5jaGlsZHJlbi5maWx0ZXIoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0gdXBkYXRlZFNwYW4uX2tleSkubGVuZ3RoID09PSAxID8gcGF0Y2hlcy5wdXNoKHNldCh1cGRhdGVkU3Bhbi50ZXh0LCBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogdXBkYXRlZFNwYW4uX2tleVxuICAgICAgfSwgXCJ0ZXh0XCJdKSkgOiBjb25zb2xlLndhcm4oYE11bHRpcGxlIHNwYW5zIGhhdmUgXFxgX2tleVxcYCAke3VwZGF0ZWRTcGFuLl9rZXl9LiBJdCdzIGFtYmlndW91cyB3aGljaCBvbmUgdG8gdXBkYXRlLmAsIEpTT04uc3RyaW5naWZ5KGJsb2NrLCBudWxsLCAyKSkpLCByZW1vdmVkU3BhbiAmJiAoYmxvY2suY2hpbGRyZW4uZmlsdGVyKChzcGFuKSA9PiBzcGFuLl9rZXkgPT09IHJlbW92ZWRTcGFuLl9rZXkpLmxlbmd0aCA9PT0gMSA/IHBhdGNoZXMucHVzaCh1bnNldChbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogcmVtb3ZlZFNwYW4uX2tleVxuICAgICAgfV0pKSA6IGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7cmVtb3ZlZFNwYW4uX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byByZW1vdmUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSk7XG4gICAgfSBlbHNlXG4gICAgICBkZWJ1ZyRmKFwiVm9pZCBub2RlcyBjYW4ndCBiZSBtZXJnZWQsIG5vdCBjcmVhdGluZyBhbnkgcGF0Y2hlc1wiKTtcbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgfVxuICBmdW5jdGlvbiBtb3ZlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBiZWZvcmVWYWx1ZSkge1xuICAgIGNvbnN0IHBhdGNoZXMgPSBbXSwgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHRhcmdldEJsb2NrID0gYmVmb3JlVmFsdWVbb3BlcmF0aW9uLm5ld1BhdGhbMF1dO1xuICAgIGlmICghdGFyZ2V0QmxvY2spXG4gICAgICByZXR1cm4gcGF0Y2hlcztcbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IG9wZXJhdGlvbi5wYXRoWzBdID4gb3BlcmF0aW9uLm5ld1BhdGhbMF0gPyBcImJlZm9yZVwiIDogXCJhZnRlclwiO1xuICAgICAgcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH1dKSksIHBhdGNoZXMucHVzaChpbnNlcnQoW2Zyb21TbGF0ZVZhbHVlKFtibG9ja10sIHRleHRCbG9ja05hbWUpWzBdXSwgcG9zaXRpb24sIFt7XG4gICAgICAgIF9rZXk6IHRhcmdldEJsb2NrLl9rZXlcbiAgICAgIH1dKSk7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBlZGl0b3IuaXNUZXh0QmxvY2sodGFyZ2V0QmxvY2spKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgdGFyZ2V0Q2hpbGQgPSB0YXJnZXRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ubmV3UGF0aFsxXV0sIHBvc2l0aW9uID0gb3BlcmF0aW9uLm5ld1BhdGhbMV0gPT09IHRhcmdldEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA/IFwiYWZ0ZXJcIiA6IFwiYmVmb3JlXCIsIGNoaWxkVG9JbnNlcnQgPSBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0ZXh0QmxvY2tOYW1lKVswXS5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV07XG4gICAgICBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgIH1dKSksIHBhdGNoZXMucHVzaChpbnNlcnQoW2NoaWxkVG9JbnNlcnRdLCBwb3NpdGlvbiwgW3tcbiAgICAgICAgX2tleTogdGFyZ2V0QmxvY2suX2tleVxuICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgIF9rZXk6IHRhcmdldENoaWxkLl9rZXlcbiAgICAgIH1dKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRjaGVzO1xuICB9XG4gIHJldHVybiB7XG4gICAgaW5zZXJ0Tm9kZVBhdGNoLFxuICAgIGluc2VydFRleHRQYXRjaCxcbiAgICBtZXJnZU5vZGVQYXRjaCxcbiAgICBtb3ZlTm9kZVBhdGNoLFxuICAgIHJlbW92ZU5vZGVQYXRjaCxcbiAgICByZW1vdmVUZXh0UGF0Y2gsXG4gICAgc2V0Tm9kZVBhdGNoLFxuICAgIHNwbGl0Tm9kZVBhdGNoXG4gIH07XG59XG5jb25zdCBJU19BUFBMWUlOR19CRUhBVklPUl9BQ1RJT05TID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB3aXRoQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpO1xuICBJU19BUFBMWUlOR19CRUhBVklPUl9BQ1RJT05TLnNldChlZGl0b3IsICEwKSwgZm4oKSwgSVNfQVBQTFlJTkdfQkVIQVZJT1JfQUNUSU9OUy5zZXQoZWRpdG9yLCBwcmV2KTtcbn1cbmZ1bmN0aW9uIGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSB7XG4gIHJldHVybiBJU19BUFBMWUlOR19CRUhBVklPUl9BQ1RJT05TLmdldChlZGl0b3IpID8/ICExO1xufVxuZnVuY3Rpb24gY3JlYXRlV2l0aEV2ZW50TGlzdGVuZXJzKGVkaXRvckFjdG9yLCBzdWJzY3JpcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0Lm1heEJsb2NrcyAhPT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIGVkaXRvcjtcbiAgICBzdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gZWRpdG9yQWN0b3Iub24oXCIqXCIsIChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwiYW5ub3RhdGlvbi5hZGRcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5hZGRcIixcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiBldmVudC5hbm5vdGF0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImFubm90YXRpb24ucmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFubm90YXRpb24ucmVtb3ZlXCIsXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogZXZlbnQuYW5ub3RhdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJibHVyXCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJsdXJcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJjdXN0b20uKlwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDogZXZlbnQuZXZlbnQsXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImRlY29yYXRvci50b2dnbGVcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgICAgICAgICAgICAgIGRlY29yYXRvcjogZXZlbnQuZGVjb3JhdG9yXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImZvY3VzXCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZvY3VzXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiaW5zZXJ0LmJsb2NrIG9iamVjdFwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBldmVudC5wbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgYmxvY2tPYmplY3Q6IGV2ZW50LmJsb2NrT2JqZWN0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImluc2VydC5pbmxpbmUgb2JqZWN0XCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImluc2VydC5pbmxpbmUgb2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgaW5saW5lT2JqZWN0OiBldmVudC5pbmxpbmVPYmplY3RcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwibGlzdCBpdGVtLnRvZ2dsZVwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJsaXN0IGl0ZW0udG9nZ2xlXCIsXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW06IGV2ZW50Lmxpc3RJdGVtXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInNlbGVjdFwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGV2ZW50LnNlbGVjdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJzdHlsZS50b2dnbGVcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic3R5bGUudG9nZ2xlXCIsXG4gICAgICAgICAgICAgICAgc3R5bGU6IGV2ZW50LnN0eWxlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbGV0ZUJhY2t3YXJkOiBkZWxldGVCYWNrd2FyZDIsXG4gICAgICBkZWxldGVGb3J3YXJkOiBkZWxldGVGb3J3YXJkMixcbiAgICAgIGluc2VydEJyZWFrLFxuICAgICAgaW5zZXJ0U29mdEJyZWFrLFxuICAgICAgaW5zZXJ0VGV4dDogaW5zZXJ0VGV4dDIsXG4gICAgICBzZWxlY3RcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuZGVsZXRlQmFja3dhcmQgPSAodW5pdCkgPT4ge1xuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBkZWxldGVCYWNrd2FyZDIodW5pdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRlbGV0ZS5iYWNrd2FyZFwiLFxuICAgICAgICAgIHVuaXRcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuZGVsZXRlRm9yd2FyZCA9ICh1bml0KSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGRlbGV0ZUZvcndhcmQyKHVuaXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkZWxldGUuZm9yd2FyZFwiLFxuICAgICAgICAgIHVuaXRcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0QnJlYWsgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGluc2VydEJyZWFrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC5icmVha1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmluc2VydFNvZnRCcmVhayA9ICgpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgaW5zZXJ0U29mdEJyZWFrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC5zb2Z0IGJyZWFrXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0VGV4dCA9ICh0ZXh0LCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGluc2VydFRleHQyKHRleHQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJpbnNlcnQudGV4dFwiLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIGRlZmF1bHRBY3Rpb25DYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIGluc2VydFRleHQyKHRleHQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3Iuc2VsZWN0ID0gKGxvY2F0aW9uKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIHNlbGVjdChsb2NhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJhbmdlID0gRWRpdG9yLnJhbmdlKGVkaXRvciwgbG9jYXRpb24pO1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIHJhbmdlLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hKVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIGRlZmF1bHRBY3Rpb25DYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIHNlbGVjdChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdpdGhNYXhCbG9ja3MoZWRpdG9yQWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTJcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuYXBwbHkgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kb2luZyhlZGl0b3IpIHx8IGlzUmVkb2luZyhlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByb3dzID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0Lm1heEJsb2NrcyA/PyAtMTtcbiAgICAgIHJvd3MgPiAwICYmIGVkaXRvci5jaGlsZHJlbi5sZW5ndGggPj0gcm93cyAmJiAob3BlcmF0aW9uLnR5cGUgPT09IFwiaW5zZXJ0X25vZGVcIiB8fCBvcGVyYXRpb24udHlwZSA9PT0gXCJzcGxpdF9ub2RlXCIpICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSB8fCBhcHBseTIob3BlcmF0aW9uKTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoT2JqZWN0S2V5cyhlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTIsXG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJzcGxpdF9ub2RlXCIpIHtcbiAgICAgICAgYXBwbHkyKHtcbiAgICAgICAgICAuLi5vcGVyYXRpb24sXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgLi4ub3BlcmF0aW9uLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3BlcmF0aW9uLnR5cGUgPT09IFwiaW5zZXJ0X25vZGVcIiAmJiAhRWRpdG9yLmlzRWRpdG9yKG9wZXJhdGlvbi5ub2RlKSkge1xuICAgICAgICBhcHBseTIoe1xuICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICBub2RlOiB7XG4gICAgICAgICAgICAuLi5vcGVyYXRpb24ubm9kZSxcbiAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgIH0sIGVkaXRvci5ub3JtYWxpemVOb2RlID0gKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeTtcbiAgICAgIGlmIChFbGVtZW50JDEuaXNFbGVtZW50KG5vZGUpICYmIG5vZGUuX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUpIHtcbiAgICAgICAgaWYgKCFub2RlLl9rZXkpIHtcbiAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCkpXG4gICAgICAgICAgaWYgKCFjaGlsZC5fa2V5KSB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZU5vZGUoZW50cnkpO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJGUgPSBkZWJ1Z1dpdGhOYW1lKFwiYXBwbHlQYXRjaGVzXCIpLCBkZWJ1Z1ZlcmJvc2UgPSBkZWJ1ZyRlLmVuYWJsZWQgJiYgITA7XG5mdW5jdGlvbiBjcmVhdGVBcHBseVBhdGNoKHNjaGVtYVR5cGVzKSB7XG4gIHJldHVybiAoZWRpdG9yLCBwYXRjaCkgPT4ge1xuICAgIGxldCBjaGFuZ2VkID0gITE7XG4gICAgZGVidWdWZXJib3NlICYmIChkZWJ1ZyRlKGBcblxuTkVXIFBBVENIID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1gKSwgZGVidWckZShKU09OLnN0cmluZ2lmeShwYXRjaCwgbnVsbCwgMikpKTtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoIChwYXRjaC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gaW5zZXJ0UGF0Y2goZWRpdG9yLCBwYXRjaCwgc2NoZW1hVHlwZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gdW5zZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSBzZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRpZmZNYXRjaFBhdGNoXCI6XG4gICAgICAgICAgY2hhbmdlZCA9IGRpZmZNYXRjaFBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRlYnVnJGUoXCJVbmhhbmRsZWQgcGF0Y2hcIiwgcGF0Y2gudHlwZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9O1xufVxuZnVuY3Rpb24gZGlmZk1hdGNoUGF0Y2goZWRpdG9yLCBwYXRjaCkge1xuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgY2hpbGQsXG4gICAgY2hpbGRQYXRoXG4gIH0gPSBmaW5kQmxvY2tBbmRDaGlsZEZyb21QYXRoKGVkaXRvciwgcGF0Y2gucGF0aCk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIGRlYnVnJGUoXCJCbG9jayBub3QgZm91bmRcIiksICExO1xuICBpZiAoIWNoaWxkIHx8ICFjaGlsZFBhdGgpXG4gICAgcmV0dXJuIGRlYnVnJGUoXCJDaGlsZCBub3QgZm91bmRcIiksICExO1xuICBpZiAoIShibG9jayAmJiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSA0ICYmIHBhdGNoLnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIiAmJiBwYXRjaC5wYXRoWzNdID09PSBcInRleHRcIikgfHwgIVRleHQuaXNUZXh0KGNoaWxkKSlcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHBhdGNoZXMgPSBwYXJzZShwYXRjaC52YWx1ZSksIFtuZXdWYWx1ZV0gPSBhcHBseShwYXRjaGVzLCBjaGlsZC50ZXh0LCB7XG4gICAgYWxsb3dFeGNlZWRpbmdJbmRpY2VzOiAhMFxuICB9KSwgZGlmZiQxID0gY2xlYW51cEVmZmljaWVuY3koZGlmZihjaGlsZC50ZXh0LCBuZXdWYWx1ZSksIDUpO1xuICBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIik7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IFtvcCwgdGV4dF0gb2YgZGlmZiQxKVxuICAgIG9wID09PSBESUZGX0lOU0VSVCA/IChlZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJpbnNlcnRfdGV4dFwiLFxuICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV4dFxuICAgIH0pLCBvZmZzZXQgKz0gdGV4dC5sZW5ndGgpIDogb3AgPT09IERJRkZfREVMRVRFID8gZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgIG9mZnNldCxcbiAgICAgIHRleHRcbiAgICB9KSA6IG9wID09PSBESUZGX0VRVUFMICYmIChvZmZzZXQgKz0gdGV4dC5sZW5ndGgpO1xuICByZXR1cm4gZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xufVxuZnVuY3Rpb24gaW5zZXJ0UGF0Y2goZWRpdG9yLCBwYXRjaCwgc2NoZW1hVHlwZXMpIHtcbiAgY29uc3Qge1xuICAgIGJsb2NrOiB0YXJnZXRCbG9jayxcbiAgICBjaGlsZDogdGFyZ2V0Q2hpbGQsXG4gICAgYmxvY2tQYXRoOiB0YXJnZXRCbG9ja1BhdGgsXG4gICAgY2hpbGRQYXRoOiB0YXJnZXRDaGlsZFBhdGhcbiAgfSA9IGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRjaC5wYXRoKTtcbiAgaWYgKCF0YXJnZXRCbG9jayB8fCAhdGFyZ2V0QmxvY2tQYXRoKVxuICAgIHJldHVybiBkZWJ1ZyRlKFwiQmxvY2sgbm90IGZvdW5kXCIpLCAhMTtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID4gMSAmJiBwYXRjaC5wYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuIGRlYnVnJGUoXCJJZ25vcmluZyBwYXRjaCB0YXJnZXRpbmcgdm9pZCB2YWx1ZVwiKSwgITE7XG4gIGlmIChwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zOiBpdGVtczIsXG4gICAgICBwb3NpdGlvbjogcG9zaXRpb24yXG4gICAgfSA9IHBhdGNoLCBibG9ja3NUb0luc2VydCA9IHRvU2xhdGVWYWx1ZShpdGVtczIsIHtcbiAgICAgIHNjaGVtYVR5cGVzXG4gICAgfSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCB0YXJnZXRCbG9ja0luZGV4ID0gdGFyZ2V0QmxvY2tQYXRoWzBdLCBub3JtYWxpemVkSWR4MiA9IHBvc2l0aW9uMiA9PT0gXCJhZnRlclwiID8gdGFyZ2V0QmxvY2tJbmRleCArIDEgOiB0YXJnZXRCbG9ja0luZGV4O1xuICAgIHJldHVybiBkZWJ1ZyRlKGBJbnNlcnRpbmcgYmxvY2tzIGF0IHBhdGggWyR7bm9ybWFsaXplZElkeDJ9XWApLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIiksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBibG9ja3NUb0luc2VydCwge1xuICAgICAgYXQ6IFtub3JtYWxpemVkSWR4Ml1cbiAgICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpdGVtcyxcbiAgICBwb3NpdGlvblxuICB9ID0gcGF0Y2g7XG4gIGlmICghdGFyZ2V0Q2hpbGQgfHwgIXRhcmdldENoaWxkUGF0aClcbiAgICByZXR1cm4gZGVidWckZShcIkNoaWxkIG5vdCBmb3VuZFwiKSwgITE7XG4gIGNvbnN0IGNoaWxkcmVuVG9JbnNlcnQgPSB0YXJnZXRCbG9jayAmJiB0b1NsYXRlVmFsdWUoW3tcbiAgICAuLi50YXJnZXRCbG9jayxcbiAgICBjaGlsZHJlbjogaXRlbXNcbiAgfV0sIHtcbiAgICBzY2hlbWFUeXBlc1xuICB9LCBLRVlfVE9fU0xBVEVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIHRhcmdldENoaWxkSW5kZXggPSB0YXJnZXRDaGlsZFBhdGhbMV0sIG5vcm1hbGl6ZWRJZHggPSBwb3NpdGlvbiA9PT0gXCJhZnRlclwiID8gdGFyZ2V0Q2hpbGRJbmRleCArIDEgOiB0YXJnZXRDaGlsZEluZGV4LCBjaGlsZEluc2VydFBhdGggPSBbdGFyZ2V0Q2hpbGRQYXRoWzBdLCBub3JtYWxpemVkSWR4XTtcbiAgcmV0dXJuIGRlYnVnJGUoYEluc2VydGluZyBjaGlsZHJlbiBhdCBwYXRoICR7Y2hpbGRJbnNlcnRQYXRofWApLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIiksIGNoaWxkcmVuVG9JbnNlcnQgJiYgRWxlbWVudCQxLmlzRWxlbWVudChjaGlsZHJlblRvSW5zZXJ0WzBdKSAmJiBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgY2hpbGRyZW5Ub0luc2VydFswXS5jaGlsZHJlbiwge1xuICAgIGF0OiBjaGlsZEluc2VydFBhdGhcbiAgfSksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMDtcbn1cbmZ1bmN0aW9uIHNldFBhdGNoKGVkaXRvciwgcGF0Y2gpIHtcbiAgbGV0IHZhbHVlID0gcGF0Y2gudmFsdWU7XG4gIHR5cGVvZiBwYXRjaC5wYXRoWzNdID09IFwic3RyaW5nXCIgJiYgKHZhbHVlID0ge30sIHZhbHVlW3BhdGNoLnBhdGhbM11dID0gcGF0Y2gudmFsdWUpO1xuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkLFxuICAgIGNoaWxkUGF0aFxuICB9ID0gZmluZEJsb2NrQW5kQ2hpbGRGcm9tUGF0aChlZGl0b3IsIHBhdGNoLnBhdGgpO1xuICBpZiAoIWJsb2NrKVxuICAgIHJldHVybiBkZWJ1ZyRlKFwiQmxvY2sgbm90IGZvdW5kXCIpLCAhMTtcbiAgY29uc3QgaXNUZXh0QmxvY2sgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spO1xuICBpZiAoaXNUZXh0QmxvY2sgJiYgcGF0Y2gucGF0aC5sZW5ndGggPiAxICYmIHBhdGNoLnBhdGhbMV0gIT09IFwiY2hpbGRyZW5cIilcbiAgICByZXR1cm4gZGVidWckZShcIklnbm9yaW5nIHNldHRpbmcgdm9pZCB2YWx1ZVwiKSwgITE7XG4gIGlmIChkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIiksIGlzVGV4dEJsb2NrICYmIGNoaWxkICYmIGNoaWxkUGF0aCkge1xuICAgIGlmIChUZXh0LmlzVGV4dCh2YWx1ZSkgJiYgVGV4dC5pc1RleHQoY2hpbGQpKSB7XG4gICAgICBjb25zdCBuZXdUZXh0ID0gY2hpbGQudGV4dDtcbiAgICAgIHZhbHVlLnRleHQgIT09IG5ld1RleHQgJiYgKGRlYnVnJGUoXCJTZXR0aW5nIHRleHQgcHJvcGVydHlcIiksIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHRleHQ6IG5ld1RleHRcbiAgICAgIH0pLCBlZGl0b3IuYXBwbHkoe1xuICAgICAgICB0eXBlOiBcImluc2VydF90ZXh0XCIsXG4gICAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICB0ZXh0OiB2YWx1ZS50ZXh0XG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCkpO1xuICAgIH0gZWxzZVxuICAgICAgZGVidWckZShcIlNldHRpbmcgbm9uLXRleHQgcHJvcGVydHlcIiksIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwic2V0X25vZGVcIixcbiAgICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgbmV3UHJvcGVydGllczogdmFsdWVcbiAgICAgIH0pO1xuICAgIHJldHVybiAhMDtcbiAgfSBlbHNlIGlmIChFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSAmJiBibG9ja1BhdGgpIHtcbiAgICBkZWJ1ZyRlKFwiU2V0dGluZyBibG9jayBwcm9wZXJ0eVwiKTtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIC4uLm5leHRSZXN0XG4gICAgfSA9IHZhbHVlLCB7XG4gICAgICBjaGlsZHJlbjogcHJldkNoaWxkcmVuLFxuICAgICAgLi4ucHJldlJlc3RcbiAgICB9ID0gYmxvY2sgfHwge1xuICAgICAgY2hpbGRyZW46IHZvaWQgMFxuICAgIH07XG4gICAgZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwic2V0X25vZGVcIixcbiAgICAgIHBhdGg6IGJsb2NrUGF0aCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLi4ucHJldlJlc3RcbiAgICAgIH0sXG4gICAgICBuZXdQcm9wZXJ0aWVzOiBuZXh0UmVzdFxuICAgIH0pLCBkZWJ1ZyRlKFwiU2V0dGluZyBjaGlsZHJlblwiKSwgYmxvY2suY2hpbGRyZW4uZm9yRWFjaCgoYzIsIGNJbmRleCkgPT4ge1xuICAgICAgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJyZW1vdmVfbm9kZVwiLFxuICAgICAgICBwYXRoOiBibG9ja1BhdGguY29uY2F0KGJsb2NrLmNoaWxkcmVuLmxlbmd0aCAtIDEgLSBjSW5kZXgpLFxuICAgICAgICBub2RlOiBjMlxuICAgICAgfSk7XG4gICAgfSksIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmZvckVhY2goKGMyLCBjSW5kZXgpID0+IHtcbiAgICAgIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0X25vZGVcIixcbiAgICAgICAgcGF0aDogYmxvY2tQYXRoLmNvbmNhdChjSW5kZXgpLFxuICAgICAgICBub2RlOiBjMlxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoYmxvY2sgJiYgXCJ2YWx1ZVwiIGluIGJsb2NrKSB7XG4gICAgY29uc3QgbmV3VmFsID0gYXBwbHlBbGwoW2Jsb2NrLnZhbHVlXSwgW3BhdGNoXSlbMF07XG4gICAgcmV0dXJuIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAuLi5ibG9jayxcbiAgICAgIHZhbHVlOiBuZXdWYWxcbiAgICB9LCB7XG4gICAgICBhdDogYmxvY2tQYXRoXG4gICAgfSksICEwO1xuICB9XG4gIHJldHVybiBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG59XG5mdW5jdGlvbiB1bnNldFBhdGNoKGVkaXRvciwgcGF0Y2gpIHtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgZGVidWckZShcIlJlbW92aW5nIGV2ZXJ5dGhpbmdcIiksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKTtcbiAgICBjb25zdCBwcmV2aW91c1NlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgcmV0dXJuIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLmNoaWxkcmVuLmZvckVhY2goKF9jaGlsZCwgaSkgPT4ge1xuICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IFtpXVxuICAgICAgfSk7XG4gICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBlZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgfSkpLCBwcmV2aW91c1NlbGVjdGlvbiAmJiBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHtcbiAgICAgIGFuY2hvcjoge1xuICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSksIGVkaXRvci5vbkNoYW5nZSgpLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG4gIH1cbiAgY29uc3Qge1xuICAgIGJsb2NrLFxuICAgIGJsb2NrUGF0aCxcbiAgICBjaGlsZCxcbiAgICBjaGlsZFBhdGhcbiAgfSA9IGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRjaC5wYXRoKTtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKCFibG9jayB8fCAhYmxvY2tQYXRoKVxuICAgICAgcmV0dXJuIGRlYnVnJGUoXCJCbG9jayBub3QgZm91bmRcIiksICExO1xuICAgIGNvbnN0IGJsb2NrSW5kZXggPSBibG9ja1BhdGhbMF07XG4gICAgcmV0dXJuIGRlYnVnJGUoYFJlbW92aW5nIGJsb2NrIGF0IHBhdGggWyR7YmxvY2tJbmRleH1dYCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbYmxvY2tJbmRleF1cbiAgICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xuICB9XG4gIHJldHVybiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIHBhdGNoLnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMyA/ICFjaGlsZCB8fCAhY2hpbGRQYXRoID8gKGRlYnVnJGUoXCJDaGlsZCBub3QgZm91bmRcIiksICExKSA6IChkZWJ1ZyRlKGBVbnNldHRpbmcgY2hpbGQgYXQgcGF0aCAke0pTT04uc3RyaW5naWZ5KGNoaWxkUGF0aCl9YCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKSwgZGVidWdWZXJib3NlICYmIGRlYnVnJGUoYFJlbW92aW5nIGNoaWxkIGF0IHBhdGggJHtKU09OLnN0cmluZ2lmeShjaGlsZFBhdGgpfWApLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgIGF0OiBjaGlsZFBhdGhcbiAgfSksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMCkgOiAhMTtcbn1cbmZ1bmN0aW9uIGlzS2V5ZWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWdtZW50ID09IFwib2JqZWN0XCIgJiYgXCJfa2V5XCIgaW4gc2VnbWVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnU3RhdGUoZWRpdG9yLCBzdGF0ZU5hbWUpIHtcbiAgZGVidWdWZXJib3NlICYmIChkZWJ1ZyRlKGBDaGlsZHJlbiAke3N0YXRlTmFtZX06YCwgSlNPTi5zdHJpbmdpZnkoZWRpdG9yLmNoaWxkcmVuLCBudWxsLCAyKSksIGRlYnVnJGUoYFNlbGVjdGlvbiAke3N0YXRlTmFtZX06IGAsIEpTT04uc3RyaW5naWZ5KGVkaXRvci5zZWxlY3Rpb24sIG51bGwsIDIpKSk7XG59XG5mdW5jdGlvbiBmaW5kQmxvY2tGcm9tUGF0aChlZGl0b3IsIHBhdGgpIHtcbiAgbGV0IGJsb2NrSW5kZXggPSAtMTtcbiAgY29uc3QgYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW4uZmluZCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBpc01hdGNoID0gaXNLZXllZFNlZ21lbnQocGF0aFswXSkgPyBub2RlLl9rZXkgPT09IHBhdGhbMF0uX2tleSA6IGluZGV4ID09PSBwYXRoWzBdO1xuICAgIHJldHVybiBpc01hdGNoICYmIChibG9ja0luZGV4ID0gaW5kZXgpLCBpc01hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGJsb2NrID8ge1xuICAgIGJsb2NrLFxuICAgIHBhdGg6IFtibG9ja0luZGV4XVxuICB9IDoge307XG59XG5mdW5jdGlvbiBmaW5kQmxvY2tBbmRDaGlsZEZyb21QYXRoKGVkaXRvciwgcGF0aCkge1xuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgcGF0aDogYmxvY2tQYXRoXG4gIH0gPSBmaW5kQmxvY2tGcm9tUGF0aChlZGl0b3IsIHBhdGgpO1xuICBpZiAoIShFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSAmJiBwYXRoWzFdID09PSBcImNoaWxkcmVuXCIpKVxuICAgIHJldHVybiB7XG4gICAgICBibG9jayxcbiAgICAgIGJsb2NrUGF0aCxcbiAgICAgIGNoaWxkOiB2b2lkIDAsXG4gICAgICBjaGlsZFBhdGg6IHZvaWQgMFxuICAgIH07XG4gIGxldCBjaGlsZEluZGV4ID0gLTE7XG4gIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW4uZmluZCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBpc01hdGNoID0gaXNLZXllZFNlZ21lbnQocGF0aFsyXSkgPyBub2RlLl9rZXkgPT09IHBhdGhbMl0uX2tleSA6IGluZGV4ID09PSBwYXRoWzJdO1xuICAgIHJldHVybiBpc01hdGNoICYmIChjaGlsZEluZGV4ID0gaW5kZXgpLCBpc01hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGNoaWxkID8ge1xuICAgIGJsb2NrLFxuICAgIGNoaWxkLFxuICAgIGJsb2NrUGF0aCxcbiAgICBjaGlsZFBhdGg6IGJsb2NrUGF0aD8uY29uY2F0KGNoaWxkSW5kZXgpXG4gIH0gOiB7XG4gICAgYmxvY2ssXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkOiB2b2lkIDAsXG4gICAgY2hpbGRQYXRoOiB2b2lkIDBcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJGQgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQYXRjaGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBhdGNoZXMoe1xuICBlZGl0b3JBY3RvcixcbiAgcGF0Y2hGdW5jdGlvbnMsXG4gIHNjaGVtYVR5cGVzLFxuICBzdWJzY3JpcHRpb25zXG59KSB7XG4gIGxldCBwcmV2aW91c0NoaWxkcmVuO1xuICBjb25zdCBhcHBseVBhdGNoID0gY3JlYXRlQXBwbHlQYXRjaChzY2hlbWFUeXBlcyk7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLnNldChlZGl0b3IsICExKSwgUEFUQ0hJTkcuc2V0KGVkaXRvciwgITApLCBwcmV2aW91c0NoaWxkcmVuID0gWy4uLmVkaXRvci5jaGlsZHJlbl07XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgbGV0IGJ1ZmZlcmVkUGF0Y2hlcyA9IFtdO1xuICAgIGNvbnN0IGhhbmRsZUJ1ZmZlcmVkUmVtb3RlUGF0Y2hlcyA9ICgpID0+IHtcbiAgICAgIGlmIChidWZmZXJlZFBhdGNoZXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwYXRjaGVzID0gYnVmZmVyZWRQYXRjaGVzO1xuICAgICAgYnVmZmVyZWRQYXRjaGVzID0gW107XG4gICAgICBsZXQgY2hhbmdlZCA9ICExO1xuICAgICAgd2l0aFJlbW90ZUNoYW5nZXMoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgd2l0aG91dFBhdGNoaW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgd2l0aG91dFNhdmluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgcGF0Y2hlcy5mb3JFYWNoKChwYXRjaCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnJGQuZW5hYmxlZCAmJiBkZWJ1ZyRkKGBIYW5kbGluZyByZW1vdGUgcGF0Y2ggJHtKU09OLnN0cmluZ2lmeShwYXRjaCl9YCksIGNoYW5nZWQgPSBhcHBseVBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgY2hhbmdlZCAmJiAoZWRpdG9yLm5vcm1hbGl6ZSgpLCBlZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgICB9KTtcbiAgICB9LCBoYW5kbGVQYXRjaGVzID0gKHtcbiAgICAgIHBhdGNoZXNcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCByZW1vdGVQYXRjaGVzID0gcGF0Y2hlcy5maWx0ZXIoKHApID0+IHAub3JpZ2luICE9PSBcImxvY2FsXCIpO1xuICAgICAgcmVtb3RlUGF0Y2hlcy5sZW5ndGggIT09IDAgJiYgKGJ1ZmZlcmVkUGF0Y2hlcyA9IGJ1ZmZlcmVkUGF0Y2hlcy5jb25jYXQocmVtb3RlUGF0Y2hlcyksIGhhbmRsZUJ1ZmZlcmVkUmVtb3RlUGF0Y2hlcygpKTtcbiAgICB9O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgICAgZGVidWckZChcIlN1YnNjcmliaW5nIHRvIHJlbW90ZSBwYXRjaGVzXCIpO1xuICAgICAgY29uc3Qgc3ViID0gZWRpdG9yQWN0b3Iub24oXCJwYXRjaGVzXCIsIGhhbmRsZVBhdGNoZXMpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGVidWckZChcIlVuc3Vic2NyaWJpbmcgdG8gcmVtb3RlIHBhdGNoZXNcIiksIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KSwgZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgbGV0IHBhdGNoZXMgPSBbXTtcbiAgICAgIHByZXZpb3VzQ2hpbGRyZW4gPSBlZGl0b3IuY2hpbGRyZW47XG4gICAgICBjb25zdCBlZGl0b3JXYXNFbXB0eSA9IGlzRXF1YWxUb0VtcHR5RWRpdG9yKHByZXZpb3VzQ2hpbGRyZW4sIHNjaGVtYVR5cGVzKTtcbiAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgY29uc3QgZWRpdG9ySXNFbXB0eSA9IGlzRXF1YWxUb0VtcHR5RWRpdG9yKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hVHlwZXMpO1xuICAgICAgaWYgKCFpc1BhdGNoaW5nKGVkaXRvcikpXG4gICAgICAgIHJldHVybiBlZGl0b3I7XG4gICAgICBzd2l0Y2ggKGVkaXRvcldhc0VtcHR5ICYmICFlZGl0b3JJc0VtcHR5ICYmIG9wZXJhdGlvbi50eXBlICE9PSBcInNldF9zZWxlY3Rpb25cIiAmJiBwYXRjaGVzLnB1c2goaW5zZXJ0KHByZXZpb3VzQ2hpbGRyZW4sIFwiYmVmb3JlXCIsIFswXSkpLCBvcGVyYXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiaW5zZXJ0X3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLmluc2VydFRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLnJlbW92ZVRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLnJlbW92ZU5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3BsaXRfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMuc3BsaXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluc2VydF9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5wYXRjaEZ1bmN0aW9ucy5pbnNlcnROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNldF9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5wYXRjaEZ1bmN0aW9ucy5zZXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lcmdlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLm1lcmdlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3ZlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLm1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiAhZWRpdG9yV2FzRW1wdHkgJiYgZWRpdG9ySXNFbXB0eSAmJiBbXCJtZXJnZV9ub2RlXCIsIFwic2V0X25vZGVcIiwgXCJyZW1vdmVfdGV4dFwiLCBcInJlbW92ZV9ub2RlXCJdLmluY2x1ZGVzKG9wZXJhdGlvbi50eXBlKSAmJiAocGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCB1bnNldChbXSldLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJ1bnNldFwiLFxuICAgICAgICBwcmV2aW91c1ZhbHVlOiBmcm9tU2xhdGVWYWx1ZShwcmV2aW91c0NoaWxkcmVuLCBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlcbiAgICAgIH0pKSwgZWRpdG9yV2FzRW1wdHkgJiYgcGF0Y2hlcy5sZW5ndGggPiAwICYmIChwYXRjaGVzID0gW3NldElmTWlzc2luZyhbXSwgW10pLCAuLi5wYXRjaGVzXSksIHBhdGNoZXMubGVuZ3RoID4gMCAmJiBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgLi4ucGF0Y2gsXG4gICAgICAgICAgICBvcmlnaW46IFwibG9jYWxcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSwgZWRpdG9yO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJGMgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQbGFjZWhvbGRlckJsb2NrXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBsYWNlaG9sZGVyQmxvY2soZWRpdG9yQWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTJcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuYXBwbHkgPSAob3ApID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kb2luZyhlZGl0b3IpIHx8IGlzUmVkb2luZyhlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcInJlbW92ZV9ub2RlXCIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG9wLm5vZGU7XG4gICAgICAgIGlmIChvcC5wYXRoWzBdID09PSAwICYmIEVkaXRvci5pc1ZvaWQoZWRpdG9yLCBub2RlKSkge1xuICAgICAgICAgIGNvbnN0IG5leHRQYXRoID0gUGF0aC5uZXh0KG9wLnBhdGgpO1xuICAgICAgICAgIGVkaXRvci5jaGlsZHJlbltuZXh0UGF0aFswXV0gfHwgKGRlYnVnJGMoXCJBZGRpbmcgcGxhY2Vob2xkZXIgYmxvY2tcIiksIEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgICAgICBkZWNvcmF0b3JzOiBbXVxuICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5MihvcCk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckYiA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFBvcnRhYmxlVGV4dEJsb2NrU3R5bGVcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoUG9ydGFibGVUZXh0QmxvY2tTdHlsZShlZGl0b3JBY3RvciwgdHlwZXMpIHtcbiAgY29uc3QgZGVmYXVsdFN0eWxlID0gdHlwZXMuc3R5bGVzWzBdLnZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgbm9ybWFsaXplTm9kZVxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5ub3JtYWxpemVOb2RlID0gKG5vZGVFbnRyeSkgPT4ge1xuICAgICAgY29uc3QgWywgcGF0aF0gPSBub2RlRW50cnk7XG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIGVkaXRvci5vcGVyYXRpb25zKVxuICAgICAgICBpZiAob3AudHlwZSA9PT0gXCJzcGxpdF9ub2RlXCIgJiYgb3AucGF0aC5sZW5ndGggPT09IDEgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKG9wLnByb3BlcnRpZXMpICYmIG9wLnByb3BlcnRpZXMuc3R5bGUgIT09IGRlZmF1bHRTdHlsZSAmJiBvcC5wYXRoWzBdID09PSBwYXRoWzBdICYmICFQYXRoLmVxdWFscyhwYXRoLCBvcC5wYXRoKSkge1xuICAgICAgICAgIGNvbnN0IFtjaGlsZF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIFtvcC5wYXRoWzBdICsgMSwgMF0pO1xuICAgICAgICAgIGlmIChUZXh0LmlzVGV4dChjaGlsZCkgJiYgY2hpbGQudGV4dCA9PT0gXCJcIikge1xuICAgICAgICAgICAgZGVidWckYihgTm9ybWFsaXppbmcgc3BsaXQgbm9kZSB0byAke2RlZmF1bHRTdHlsZX0gc3R5bGVgLCBvcCksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBzdHlsZTogZGVmYXVsdFN0eWxlXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBbb3AucGF0aFswXSArIDFdLFxuICAgICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgbm9ybWFsaXplTm9kZShub2RlRW50cnkpO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFibGVUZXh0U3Bhbihub2RlKSB7XG4gIHJldHVybiBub2RlLl90eXBlID09PSBcInNwYW5cIiAmJiBcInRleHRcIiBpbiBub2RlICYmIHR5cGVvZiBub2RlLnRleHQgPT0gXCJzdHJpbmdcIiAmJiAodHlwZW9mIG5vZGUubWFya3MgPiBcInVcIiB8fCBBcnJheS5pc0FycmF5KG5vZGUubWFya3MpICYmIG5vZGUubWFya3MuZXZlcnkoKG1hcmspID0+IHR5cGVvZiBtYXJrID09IFwic3RyaW5nXCIpKTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFibGVUZXh0QmxvY2sobm9kZSkge1xuICByZXR1cm4gKFxuICAgIC8vIEEgYmxvY2sgZG9lc24ndCBfaGF2ZV8gdG8gYmUgbmFtZWQgJ2Jsb2NrJyAtIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlblxuICAgIC8vIGFsbG93ZWQgY2hpbGQgdHlwZXMgYW5kIG1hcmtzLCBvbmUgbWlnaHQgbmFtZSB0aGVtIGRpZmZlcmVudGx5XG4gICAgdHlwZW9mIG5vZGUuX3R5cGUgPT0gXCJzdHJpbmdcIiAmJiAvLyBUb29sa2l0LXR5cGVzIGxpa2UgbmVzdGVkIHNwYW5zIGFyZSBALXByZWZpeGVkXG4gICAgbm9kZS5fdHlwZVswXSAhPT0gXCJAXCIgJiYgLy8gYG1hcmtEZWZzYCBpc24ndCBfcmVxdWlyZWRfIHBlciBzYXksIGJ1dCBpZiBpdCdzIHRoZXJlLCBpdCBuZWVkcyB0byBiZSBhbiBhcnJheVxuICAgICghKFwibWFya0RlZnNcIiBpbiBub2RlKSB8fCAhbm9kZS5tYXJrRGVmcyB8fCBBcnJheS5pc0FycmF5KG5vZGUubWFya0RlZnMpICYmIC8vIEV2ZXJ5IG1hcmsgZGVmaW5pdGlvbiBuZWVkcyB0byBoYXZlIGFuIGBfa2V5YCB0byBiZSBtYXBwYWJsZSBpbiBjaGlsZCBzcGFuc1xuICAgIG5vZGUubWFya0RlZnMuZXZlcnkoKGRlZikgPT4gdHlwZW9mIGRlZi5fa2V5ID09IFwic3RyaW5nXCIpKSAmJiAvLyBgY2hpbGRyZW5gIGlzIHJlcXVpcmVkIGFuZCBuZWVkcyB0byBiZSBhbiBhcnJheVxuICAgIFwiY2hpbGRyZW5cIiBpbiBub2RlICYmIEFycmF5LmlzQXJyYXkobm9kZS5jaGlsZHJlbikgJiYgLy8gQWxsIGNoaWxkcmVuIGFyZSBvYmplY3RzIHdpdGggYF90eXBlYCAodXN1YWxseSBzcGFucywgYnV0IGNhbiBjb250YWluIG90aGVyIHN0dWZmKVxuICAgIG5vZGUuY2hpbGRyZW4uZXZlcnkoKGNoaWxkKSA9PiB0eXBlb2YgY2hpbGQgPT0gXCJvYmplY3RcIiAmJiBcIl90eXBlXCIgaW4gY2hpbGQpXG4gICk7XG59XG5mdW5jdGlvbiBnZXRQcmV2aW91c1NwYW4oe1xuICBlZGl0b3IsXG4gIGJsb2NrUGF0aCxcbiAgc3BhblBhdGhcbn0pIHtcbiAgbGV0IHByZXZpb3VzU3BhbjtcbiAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCwge1xuICAgIHJldmVyc2U6ICEwXG4gIH0pKVxuICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0JlZm9yZShjaGlsZFBhdGgsIHNwYW5QYXRoKSkge1xuICAgICAgcHJldmlvdXNTcGFuID0gY2hpbGQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiBwcmV2aW91c1NwYW47XG59XG5mdW5jdGlvbiBnZXROZXh0U3Bhbih7XG4gIGVkaXRvcixcbiAgYmxvY2tQYXRoLFxuICBzcGFuUGF0aFxufSkge1xuICBsZXQgbmV4dFNwYW47XG4gIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgpKVxuICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0FmdGVyKGNoaWxkUGF0aCwgc3BhblBhdGgpKSB7XG4gICAgICBuZXh0U3BhbiA9IGNoaWxkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICByZXR1cm4gbmV4dFNwYW47XG59XG5jb25zdCBkZWJ1ZyRhID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUG9ydGFibGVUZXh0TWFya01vZGVsXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbChlZGl0b3JBY3RvciwgdHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTIsXG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvciwgZGVjb3JhdG9ycyA9IHR5cGVzLmRlY29yYXRvcnMubWFwKCh0KSA9PiB0LnZhbHVlKTtcbiAgICByZXR1cm4gZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAobm9kZUVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBbbm9kZSwgcGF0aF0gPSBub2RlRW50cnk7XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gTm9kZS5jaGlsZHJlbihlZGl0b3IsIHBhdGgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgIGNvbnN0IG5leHROb2RlID0gbm9kZS5jaGlsZHJlbltjaGlsZFBhdGhbMV0gKyAxXTtcbiAgICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIGVkaXRvci5pc1RleHRTcGFuKG5leHROb2RlKSAmJiBjaGlsZC5tYXJrcz8uZXZlcnkoKG1hcmspID0+IG5leHROb2RlLm1hcmtzPy5pbmNsdWRlcyhtYXJrKSkgJiYgbmV4dE5vZGUubWFya3M/LmV2ZXJ5KChtYXJrKSA9PiBjaGlsZC5tYXJrcz8uaW5jbHVkZXMobWFyaykpKSB7XG4gICAgICAgICAgICBkZWJ1ZyRhKFwiTWVyZ2luZyBzcGFuc1wiLCBKU09OLnN0cmluZ2lmeShjaGlsZCwgbnVsbCwgMiksIEpTT04uc3RyaW5naWZ5KG5leHROb2RlLCBudWxsLCAyKSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLm1lcmdlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIGF0OiBbY2hpbGRQYXRoWzBdLCBjaGlsZFBhdGhbMV0gKyAxXSxcbiAgICAgICAgICAgICAgdm9pZHM6ICEwXG4gICAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkgJiYgIUFycmF5LmlzQXJyYXkobm9kZS5tYXJrRGVmcykpIHtcbiAgICAgICAgZGVidWckYShcIkFkZGluZyAubWFya0RlZnMgdG8gYmxvY2sgbm9kZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtEZWZzOiBbXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4obm9kZSkgJiYgIUFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykpIHtcbiAgICAgICAgZGVidWckYShcIkFkZGluZyAubWFya3MgdG8gc3BhbiBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IFtdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSkge1xuICAgICAgICBjb25zdCBibG9ja1BhdGggPSBQYXRoLnBhcmVudChwYXRoKSwgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgYmxvY2tQYXRoKSwgZGVjb3JhdG9yczIgPSB0eXBlcy5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUpLCBhbm5vdGF0aW9ucyA9IG5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMyLmluY2x1ZGVzKG1hcmspKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgbm9kZS50ZXh0ID09PSBcIlwiICYmIGFubm90YXRpb25zICYmIGFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkZWJ1ZyRhKFwiUmVtb3ZpbmcgYW5ub3RhdGlvbnMgZnJvbSBlbXB0eSBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrczogbm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGRlY29yYXRvcnMyID0gdHlwZXMuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlKTtcbiAgICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIHBhdGgpKVxuICAgICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtzID0gY2hpbGQubWFya3MgPz8gW10sIG9ycGhhbmVkQW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSAmJiAhbm9kZS5tYXJrRGVmcz8uZmluZCgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFyaykpO1xuICAgICAgICAgICAgaWYgKG9ycGhhbmVkQW5ub3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBkZWJ1ZyRhKFwiUmVtb3Zpbmcgb3JwaGFuZWQgYW5ub3RhdGlvbnMgZnJvbSBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICBtYXJrczogbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhb3JwaGFuZWRBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrUGF0aCA9IFBhdGgucGFyZW50KHBhdGgpLCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBibG9ja1BhdGgpO1xuICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICAgIGNvbnN0IGRlY29yYXRvcnMyID0gdHlwZXMuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlKSwgbWFya3MgPSBub2RlLm1hcmtzID8/IFtdLCBvcnBoYW5lZEFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9yczIuaW5jbHVkZXMobWFyaykgJiYgIWJsb2NrLm1hcmtEZWZzPy5maW5kKChkZWYpID0+IGRlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICAgICAgaWYgKG9ycGhhbmVkQW5ub3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZGVidWckYShcIlJlbW92aW5nIG9ycGhhbmVkIGFubm90YXRpb25zIGZyb20gc3BhbiBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgbWFya3M6IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIW9ycGhhbmVkQW5ub3RhdGlvbnMuaW5jbHVkZXMobWFyaykpXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkpIHtcbiAgICAgICAgY29uc3QgbWFya0RlZnMgPSBub2RlLm1hcmtEZWZzID8/IFtdLCBtYXJrRGVmS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksIG5ld01hcmtEZWZzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbWFya0RlZiBvZiBtYXJrRGVmcylcbiAgICAgICAgICBtYXJrRGVmS2V5cy5oYXMobWFya0RlZi5fa2V5KSB8fCAobWFya0RlZktleXMuYWRkKG1hcmtEZWYuX2tleSksIG5ld01hcmtEZWZzLnB1c2gobWFya0RlZikpO1xuICAgICAgICBpZiAobWFya0RlZnMubGVuZ3RoICE9PSBuZXdNYXJrRGVmcy5sZW5ndGgpIHtcbiAgICAgICAgICBkZWJ1ZyRhKFwiUmVtb3ZpbmcgZHVwbGljYXRlIG1hcmtEZWZzXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya0RlZnM6IG5ld01hcmtEZWZzXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSAmJiAhZWRpdG9yLm9wZXJhdGlvbnMuc29tZSgob3ApID0+IG9wLnR5cGUgPT09IFwibWVyZ2Vfbm9kZVwiICYmIFwibWFya0RlZnNcIiBpbiBvcC5wcm9wZXJ0aWVzICYmIG9wLnBhdGgubGVuZ3RoID09PSAxKSkge1xuICAgICAgICBjb25zdCBuZXdNYXJrRGVmcyA9IChub2RlLm1hcmtEZWZzIHx8IFtdKS5maWx0ZXIoKGRlZikgPT4gbm9kZS5jaGlsZHJlbi5maW5kKChjaGlsZCkgPT4gVGV4dC5pc1RleHQoY2hpbGQpICYmIEFycmF5LmlzQXJyYXkoY2hpbGQubWFya3MpICYmIGNoaWxkLm1hcmtzLmluY2x1ZGVzKGRlZi5fa2V5KSkpO1xuICAgICAgICBpZiAobm9kZS5tYXJrRGVmcyAmJiAhaXNFcXVhbChuZXdNYXJrRGVmcywgbm9kZS5tYXJrRGVmcykpIHtcbiAgICAgICAgICBkZWJ1ZyRhKFwiUmVtb3ZpbmcgbWFya0RlZiBub3QgaW4gdXNlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya0RlZnM6IG5ld01hcmtEZWZzXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9ybWFsaXplTm9kZShub2RlRW50cnkpO1xuICAgIH0sIGVkaXRvci5hcHBseSA9IChvcCkgPT4ge1xuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIgJiYgRWRpdG9yLm1hcmtzKGVkaXRvcikgJiYgb3AucHJvcGVydGllcyAmJiBvcC5uZXdQcm9wZXJ0aWVzICYmIG9wLnByb3BlcnRpZXMuYW5jaG9yICYmIG9wLnByb3BlcnRpZXMuZm9jdXMgJiYgb3AubmV3UHJvcGVydGllcy5hbmNob3IgJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cykge1xuICAgICAgICBjb25zdCBwcmV2aW91c1NlbGVjdGlvbklzQ29sbGFwc2VkID0gUmFuZ2UuaXNDb2xsYXBzZWQoe1xuICAgICAgICAgIGFuY2hvcjogb3AucHJvcGVydGllcy5hbmNob3IsXG4gICAgICAgICAgZm9jdXM6IG9wLnByb3BlcnRpZXMuZm9jdXNcbiAgICAgICAgfSksIG5ld1NlbGVjdGlvbklzQ29sbGFwc2VkID0gUmFuZ2UuaXNDb2xsYXBzZWQoe1xuICAgICAgICAgIGFuY2hvcjogb3AubmV3UHJvcGVydGllcy5hbmNob3IsXG4gICAgICAgICAgZm9jdXM6IG9wLm5ld1Byb3BlcnRpZXMuZm9jdXNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmV2aW91c1NlbGVjdGlvbklzQ29sbGFwc2VkICYmIG5ld1NlbGVjdGlvbklzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgY29uc3QgZm9jdXNTcGFuID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtb2RlOiBcImxvd2VzdFwiLFxuICAgICAgICAgICAgYXQ6IG9wLnByb3BlcnRpZXMuZm9jdXMsXG4gICAgICAgICAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSkpWzBdPy5bMF0sIG5ld0ZvY3VzU3BhbiA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgICAgICAgIGF0OiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLFxuICAgICAgICAgICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pKVswXT8uWzBdLCBtb3ZlZFRvTmV4dFNwYW4gPSBmb2N1c1NwYW4gJiYgbmV3Rm9jdXNTcGFuICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFswXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzBdICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFsxXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzFdICsgMSAmJiBmb2N1c1NwYW4udGV4dC5sZW5ndGggPT09IG9wLnByb3BlcnRpZXMuZm9jdXMub2Zmc2V0ICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMub2Zmc2V0ID09PSAwLCBtb3ZlZFRvUHJldmlvdXNTcGFuID0gZm9jdXNTcGFuICYmIG5ld0ZvY3VzU3BhbiAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMF0gPT09IG9wLnByb3BlcnRpZXMuZm9jdXMucGF0aFswXSAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMV0gPT09IG9wLnByb3BlcnRpZXMuZm9jdXMucGF0aFsxXSAtIDEgJiYgb3AucHJvcGVydGllcy5mb2N1cy5vZmZzZXQgPT09IDAgJiYgbmV3Rm9jdXNTcGFuLnRleHQubGVuZ3RoID09PSBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLm9mZnNldDtcbiAgICAgICAgICBpZiAobW92ZWRUb05leHRTcGFuIHx8IG1vdmVkVG9QcmV2aW91c1NwYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcImluc2VydF9ub2RlXCIpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHNlbGVjdGlvblxuICAgICAgICB9ID0gZWRpdG9yO1xuICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgY29uc3QgW19ibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2VsZWN0aW9uLCB7XG4gICAgICAgICAgICBkZXB0aDogMVxuICAgICAgICAgIH0pLCBwcmV2aW91c1NwYW4gPSBnZXRQcmV2aW91c1NwYW4oe1xuICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgc3BhblBhdGg6IG9wLnBhdGhcbiAgICAgICAgICB9KSwgcHJldmlvdXNTcGFuQW5ub3RhdGlvbnMgPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpIDogW10sIG5leHRTcGFuID0gZ2V0TmV4dFNwYW4oe1xuICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgc3BhblBhdGg6IFtvcC5wYXRoWzBdLCBvcC5wYXRoWzFdIC0gMV1cbiAgICAgICAgICB9KSwgbmV4dFNwYW5Bbm5vdGF0aW9ucyA9IG5leHRTcGFuID8gbmV4dFNwYW4ubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpIDogW10sIGFubm90YXRpb25zRW5kaW5nID0gcHJldmlvdXNTcGFuQW5ub3RhdGlvbnM/LmZpbHRlcigoYW5ub3RhdGlvbikgPT4gIW5leHRTcGFuQW5ub3RhdGlvbnM/LmluY2x1ZGVzKGFubm90YXRpb24pKSA/PyBbXSwgYXRUaGVFbmRPZkFubm90YXRpb24gPSBhbm5vdGF0aW9uc0VuZGluZy5sZW5ndGggPiAwO1xuICAgICAgICAgIGlmIChhdFRoZUVuZE9mQW5ub3RhdGlvbiAmJiBpc1BvcnRhYmxlVGV4dFNwYW4ob3Aubm9kZSkgJiYgb3Aubm9kZS5tYXJrcz8uc29tZSgobWFyaykgPT4gYW5ub3RhdGlvbnNFbmRpbmcuaW5jbHVkZXMobWFyaykpKSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAuLi5vcC5ub2RlLFxuICAgICAgICAgICAgICBtYXJrczogb3Aubm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhYW5ub3RhdGlvbnNFbmRpbmcuaW5jbHVkZXMobWFyaykpID8/IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYW5ub3RhdGlvbnNTdGFydGluZyA9IG5leHRTcGFuQW5ub3RhdGlvbnM/LmZpbHRlcigoYW5ub3RhdGlvbikgPT4gIXByZXZpb3VzU3BhbkFubm90YXRpb25zPy5pbmNsdWRlcyhhbm5vdGF0aW9uKSkgPz8gW10sIGF0VGhlU3RhcnRPZkFubm90YXRpb24gPSBhbm5vdGF0aW9uc1N0YXJ0aW5nLmxlbmd0aCA+IDA7XG4gICAgICAgICAgaWYgKGF0VGhlU3RhcnRPZkFubm90YXRpb24gJiYgaXNQb3J0YWJsZVRleHRTcGFuKG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/LnNvbWUoKG1hcmspID0+IGFubm90YXRpb25zU3RhcnRpbmcuaW5jbHVkZXMobWFyaykpKSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAuLi5vcC5ub2RlLFxuICAgICAgICAgICAgICBtYXJrczogb3Aubm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhYW5ub3RhdGlvbnNTdGFydGluZy5pbmNsdWRlcyhtYXJrKSkgPz8gW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBuZXh0U3BhbkRlY29yYXRvcnMgPSBuZXh0U3Bhbj8ubWFya3M/LmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgPz8gW107XG4gICAgICAgICAgaWYgKG5leHRTcGFuRGVjb3JhdG9ycy5sZW5ndGggPiAwICYmIGF0VGhlRW5kT2ZBbm5vdGF0aW9uICYmICFhdFRoZVN0YXJ0T2ZBbm5vdGF0aW9uICYmIGlzUG9ydGFibGVUZXh0U3BhbihvcC5ub2RlKSAmJiBvcC5ub2RlLm1hcmtzPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIC4uLm9wLm5vZGUsXG4gICAgICAgICAgICAgIG1hcmtzOiBuZXh0U3BhbkRlY29yYXRvcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgIH0gPSBlZGl0b3IsIGNvbGxhcHNlZFNlbGVjdGlvbiA9IHNlbGVjdGlvbiA/IFJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbikgOiAhMTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiBjb2xsYXBzZWRTZWxlY3Rpb24pIHtcbiAgICAgICAgICBjb25zdCBbX2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgICAgICAgIGRlcHRoOiAxXG4gICAgICAgICAgfSksIFtzcGFuLCBzcGFuUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgICAgICBhdDogc2VsZWN0aW9uLmZvY3VzLFxuICAgICAgICAgICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdLCBtYXJrcyA9IHNwYW4ubWFya3MgPz8gW10sIG1hcmtzV2l0aG91dEFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSwgc3Bhbkhhc0Fubm90YXRpb25zID0gbWFya3MubGVuZ3RoID4gbWFya3NXaXRob3V0QW5ub3RhdGlvbnMubGVuZ3RoLCBzcGFuSXNFbXB0eSA9IHNwYW4udGV4dC5sZW5ndGggPT09IDAsIGF0VGhlQmVnaW5uaW5nT2ZTcGFuID0gc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgPT09IDAsIGF0VGhlRW5kT2ZTcGFuID0gc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgPT09IHNwYW4udGV4dC5sZW5ndGgsIHByZXZpb3VzU3BhbiA9IGdldFByZXZpb3VzU3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aFxuICAgICAgICAgIH0pLCBuZXh0U3BhbiA9IGdldE5leHRTcGFuKHtcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgIHNwYW5QYXRoXG4gICAgICAgICAgfSksIG5leHRTcGFuQW5ub3RhdGlvbnMgPSBuZXh0U3Bhbj8ubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpID8/IFtdLCBzcGFuQW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSwgcHJldmlvdXNTcGFuSGFzQW5ub3RhdGlvbnMgPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LnNvbWUoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA6ICExLCBwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbnMgPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpLmV2ZXJ5KChtYXJrKSA9PiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgcHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb24gPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LnNvbWUoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspICYmIG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExLCBwcmV2aW91c1NwYW5IYXNTYW1lTWFya3MgPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LmV2ZXJ5KChtYXJrKSA9PiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgbmV4dFNwYW5TaGFyZXNTb21lQW5ub3RhdGlvbnMgPSBzcGFuQW5ub3RhdGlvbnMuc29tZSgobWFyaykgPT4gbmV4dFNwYW5Bbm5vdGF0aW9ucz8uaW5jbHVkZXMobWFyaykpO1xuICAgICAgICAgIGlmIChzcGFuSGFzQW5ub3RhdGlvbnMgJiYgIXNwYW5Jc0VtcHR5KSB7XG4gICAgICAgICAgICBpZiAoYXRUaGVCZWdpbm5pbmdPZlNwYW4pIHtcbiAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU3Bhbkhhc1NhbWVNYXJrcykge1xuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICAgICAgbWFya3M6IHByZXZpb3VzU3Bhbj8ubWFya3MgPz8gW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgICAgICBtYXJrczogcHJldmlvdXNTcGFuPy5tYXJrcyA/PyBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbikge1xuICAgICAgICAgICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFwcmV2aW91c1NwYW4pIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0VGhlRW5kT2ZTcGFuKSB7XG4gICAgICAgICAgICAgIGlmIChuZXh0U3BhbiAmJiBuZXh0U3BhblNoYXJlc1NvbWVBbm5vdGF0aW9ucyAmJiBuZXh0U3BhbkFubm90YXRpb25zLmxlbmd0aCA8IHNwYW5Bbm5vdGF0aW9ucy5sZW5ndGggfHwgIW5leHRTcGFuU2hhcmVzU29tZUFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgICAgICBtYXJrczogbmV4dFNwYW4/Lm1hcmtzID8/IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghbmV4dFNwYW4pIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXRUaGVCZWdpbm5pbmdPZlNwYW4gJiYgIXNwYW5Jc0VtcHR5ICYmIHByZXZpb3VzU3Bhbikge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgIG1hcmtzOiBwcmV2aW91c1NwYW5IYXNBbm5vdGF0aW9ucyA/IFtdIDogKHByZXZpb3VzU3Bhbi5tYXJrcyA/PyBbXSkuZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzZWxlY3Rpb25cbiAgICAgICAgfSA9IGVkaXRvcjtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiBSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgICB9KSwgW3NwYW4sIHNwYW5QYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgICAgICAgIGF0OiB7XG4gICAgICAgICAgICAgIHBhdGg6IG9wLnBhdGgsXG4gICAgICAgICAgICAgIG9mZnNldDogb3Aub2Zmc2V0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICAgICAgICAgIGlmIChzcGFuICYmIGJsb2NrICYmIGlzUG9ydGFibGVUZXh0QmxvY2soYmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrRGVmcyA9IGJsb2NrLm1hcmtEZWZzID8/IFtdLCBtYXJrcyA9IHNwYW4ubWFya3MgPz8gW10sIHNwYW5IYXNBbm5vdGF0aW9ucyA9IG1hcmtzLnNvbWUoKG1hcmspID0+IG1hcmtEZWZzLmZpbmQoKG1hcmtEZWYpID0+IG1hcmtEZWYuX2tleSA9PT0gbWFyaykpLCBkZWxldGluZ0Zyb21UaGVFbmQgPSBvcC5vZmZzZXQgKyBvcC50ZXh0Lmxlbmd0aCA9PT0gc3Bhbi50ZXh0Lmxlbmd0aCwgZGVsZXRpbmdBbGxUZXh0ID0gb3Aub2Zmc2V0ID09PSAwICYmIGRlbGV0aW5nRnJvbVRoZUVuZCwgcHJldmlvdXNTcGFuID0gZ2V0UHJldmlvdXNTcGFuKHtcbiAgICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICAgIHNwYW5QYXRoXG4gICAgICAgICAgICB9KSwgbmV4dFNwYW4gPSBnZXROZXh0U3Bhbih7XG4gICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgICBzcGFuUGF0aFxuICAgICAgICAgICAgfSksIHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5zb21lKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSAmJiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgbmV4dFNwYW5IYXNTYW1lQW5ub3RhdGlvbiA9IG5leHRTcGFuID8gbmV4dFNwYW4ubWFya3M/LnNvbWUoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspICYmIG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExO1xuICAgICAgICAgICAgaWYgKHNwYW5IYXNBbm5vdGF0aW9ucyAmJiBkZWxldGluZ0FsbFRleHQgJiYgIXByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uICYmICFuZXh0U3Bhbkhhc1NhbWVBbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1hcmtzV2l0aG91dEFubm90YXRpb25NYXJrcyA9ICh7XG4gICAgICAgICAgICAgICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge31cbiAgICAgICAgICAgICAgfS5tYXJrcyB8fCBbXSkuZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKTtcbiAgICAgICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhcHBseTIob3ApLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgbWFya3M6IG1hcmtzV2l0aG91dEFubm90YXRpb25NYXJrc1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgIGF0OiBvcC5wYXRoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwibWVyZ2Vfbm9kZVwiICYmIG9wLnBhdGgubGVuZ3RoID09PSAxICYmIFwibWFya0RlZnNcIiBpbiBvcC5wcm9wZXJ0aWVzICYmIG9wLnByb3BlcnRpZXMuX3R5cGUgPT09IHR5cGVzLmJsb2NrLm5hbWUgJiYgQXJyYXkuaXNBcnJheShvcC5wcm9wZXJ0aWVzLm1hcmtEZWZzKSAmJiBvcC5wcm9wZXJ0aWVzLm1hcmtEZWZzLmxlbmd0aCA+IDAgJiYgb3AucGF0aFswXSAtIDEgPj0gMCkge1xuICAgICAgICBjb25zdCBbdGFyZ2V0QmxvY2ssIHRhcmdldFBhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBbb3AucGF0aFswXSAtIDFdKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayh0YXJnZXRCbG9jaykpIHtcbiAgICAgICAgICBjb25zdCBvbGREZWZzID0gQXJyYXkuaXNBcnJheSh0YXJnZXRCbG9jay5tYXJrRGVmcykgJiYgdGFyZ2V0QmxvY2subWFya0RlZnMgfHwgW10sIG5ld01hcmtEZWZzID0gdW5pcShbLi4ub2xkRGVmcywgLi4ub3AucHJvcGVydGllcy5tYXJrRGVmc10pO1xuICAgICAgICAgIGRlYnVnJGEoXCJDb3B5aW5nIG1hcmtEZWZzIG92ZXIgdG8gbWVyZ2VkIGJsb2NrXCIsIG9wKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtEZWZzOiBuZXdNYXJrRGVmc1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiB0YXJnZXRQYXRoLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSksIGFwcGx5MihvcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseTIob3ApO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGFkZERlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3IsIG1hcmsgPSBhY3Rpb24uZGVjb3JhdG9yO1xuICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGlmIChSYW5nZS5pc0V4cGFuZGVkKGVkaXRvci5zZWxlY3Rpb24pKSB7XG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgICBzcGxpdDogITAsXG4gICAgICAgIGhhbmdpbmc6ICEwXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHNwbGl0VGV4dE5vZGVzID0gUmFuZ2UuaXNSYW5nZShlZGl0b3Iuc2VsZWN0aW9uKSA/IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgICAgICBtYXRjaDogVGV4dC5pc1RleHRcbiAgICAgIH0pXSA6IFtdO1xuICAgICAgc3BsaXRUZXh0Tm9kZXMubGVuZ3RoID4gMSAmJiBzcGxpdFRleHROb2Rlcy5ldmVyeSgobm9kZSkgPT4gbm9kZVswXS5tYXJrcz8uaW5jbHVkZXMobWFyaykpID8gZWRpdG9yLnJlbW92ZU1hcmsobWFyaykgOiBzcGxpdFRleHROb2Rlcy5mb3JFYWNoKChbbm9kZSwgcGF0aF0pID0+IHtcbiAgICAgICAgY29uc3QgbWFya3MgPSBbLi4uKEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgPyBub2RlLm1hcmtzIDogW10pLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKSwgbWFya107XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3NcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoLFxuICAgICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dCxcbiAgICAgICAgICBzcGxpdDogITAsXG4gICAgICAgICAgaGFuZ2luZzogITBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICAgIGRlcHRoOiAxXG4gICAgICB9KSwgbG9uZWx5RW1wdHlTcGFuID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgZWRpdG9yLmlzVGV4dFNwYW4oYmxvY2suY2hpbGRyZW5bMF0pICYmIGJsb2NrLmNoaWxkcmVuWzBdLnRleHQgPT09IFwiXCIgPyBibG9jay5jaGlsZHJlblswXSA6IHZvaWQgMDtcbiAgICAgIGlmIChsb25lbHlFbXB0eVNwYW4pIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdNYXJrcyA9IGxvbmVseUVtcHR5U3Bhbi5tYXJrcyA/PyBbXSwgZXhpc3RpbmdNYXJrc1dpdGhvdXREZWNvcmF0b3IgPSBleGlzdGluZ01hcmtzLmZpbHRlcigoZXhpc3RpbmdNYXJrKSA9PiBleGlzdGluZ01hcmsgIT09IG1hcmspO1xuICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBleGlzdGluZ01hcmtzLmxlbmd0aCA9PT0gZXhpc3RpbmdNYXJrc1dpdGhvdXREZWNvcmF0b3IubGVuZ3RoID8gWy4uLmV4aXN0aW5nTWFya3MsIG1hcmtdIDogZXhpc3RpbmdNYXJrc1dpdGhvdXREZWNvcmF0b3JcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBibG9ja1BhdGgsXG4gICAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0U3Bhbihub2RlKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya3MgPSB7XG4gICAgICAgICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge31cbiAgICAgICAgfS5tYXJrcyB8fCBbXSwgbWFya3MgPSB7XG4gICAgICAgICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge30sXG4gICAgICAgICAgbWFya3M6IFsuLi5leGlzdGluZ01hcmtzLCBtYXJrXVxuICAgICAgICB9O1xuICAgICAgICBlZGl0b3IubWFya3MgPSBtYXJrcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgICBlZGl0b3Iuc2VsZWN0aW9uID0ge1xuICAgICAgICAuLi5zZWxlY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9XG59LCByZW1vdmVEZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSBhY3Rpb24uZWRpdG9yLCBtYXJrID0gYWN0aW9uLmRlY29yYXRvciwge1xuICAgIHNlbGVjdGlvblxuICB9ID0gZWRpdG9yO1xuICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgaWYgKFJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSlcbiAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7fSwge1xuICAgICAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgICAgIHNwbGl0OiAhMCxcbiAgICAgICAgaGFuZ2luZzogITBcbiAgICAgIH0pLCBlZGl0b3Iuc2VsZWN0aW9uICYmIFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgICAgICBtYXRjaDogVGV4dC5pc1RleHRcbiAgICAgIH0pXS5mb3JFYWNoKChbbm9kZSwgcGF0aF0pID0+IHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bcGF0aFswXV07XG4gICAgICAgIEVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2spICYmIGJsb2NrLmNoaWxkcmVuLmluY2x1ZGVzKG5vZGUpICYmIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IChBcnJheS5pc0FycmF5KG5vZGUubWFya3MpID8gbm9kZS5tYXJrcyA6IFtdKS5maWx0ZXIoKGVNYXJrKSA9PiBlTWFyayAhPT0gbWFyayksXG4gICAgICAgICAgX3R5cGU6IFwic3BhblwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIGVsc2Uge1xuICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgICAgZGVwdGg6IDFcbiAgICAgIH0pLCBsb25lbHlFbXB0eVNwYW4gPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlblswXSkgJiYgYmxvY2suY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIiA/IGJsb2NrLmNoaWxkcmVuWzBdIDogdm9pZCAwO1xuICAgICAgaWYgKGxvbmVseUVtcHR5U3Bhbikge1xuICAgICAgICBjb25zdCBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvciA9IChsb25lbHlFbXB0eVNwYW4ubWFya3MgPz8gW10pLmZpbHRlcigoZXhpc3RpbmdNYXJrKSA9PiBleGlzdGluZ01hcmsgIT09IG1hcmspO1xuICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvclxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IGJsb2NrUGF0aCxcbiAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRTcGFuKG5vZGUpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdNYXJrcyA9IHtcbiAgICAgICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fVxuICAgICAgICB9Lm1hcmtzIHx8IFtdLCBtYXJrcyA9IHtcbiAgICAgICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fSxcbiAgICAgICAgICBtYXJrczogZXhpc3RpbmdNYXJrcy5maWx0ZXIoKGVNYXJrKSA9PiBlTWFyayAhPT0gbWFyaylcbiAgICAgICAgfTtcbiAgICAgICAgZWRpdG9yLm1hcmtzID0ge1xuICAgICAgICAgIG1hcmtzOiBtYXJrcy5tYXJrcyxcbiAgICAgICAgICBfdHlwZTogXCJzcGFuXCJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbjIgPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgZWRpdG9yLnNlbGVjdGlvbiA9IHtcbiAgICAgICAgLi4uc2VsZWN0aW9uMlxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBpc0RlY29yYXRvckFjdGl2ZSh7XG4gIGVkaXRvcixcbiAgZGVjb3JhdG9yXG59KSB7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHNlbGVjdGVkVGV4dE5vZGVzID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uXG4gIH0pKTtcbiAgcmV0dXJuIHNlbGVjdGVkVGV4dE5vZGVzLmxlbmd0aCA9PT0gMCA/ICExIDogUmFuZ2UuaXNFeHBhbmRlZChlZGl0b3Iuc2VsZWN0aW9uKSA/IHNlbGVjdGVkVGV4dE5vZGVzLmV2ZXJ5KChuKSA9PiB7XG4gICAgY29uc3QgW25vZGVdID0gbjtcbiAgICByZXR1cm4gbm9kZS5tYXJrcz8uaW5jbHVkZXMoZGVjb3JhdG9yKTtcbiAgfSkgOiAoe1xuICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gIH0ubWFya3MgfHwgW10pLmluY2x1ZGVzKGRlY29yYXRvcik7XG59XG5jb25zdCB0b2dnbGVEZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpc0RlY29yYXRvckFjdGl2ZSh7XG4gICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgIGRlY29yYXRvcjogYWN0aW9uLmRlY29yYXRvclxuICB9KSA/IHJlbW92ZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogXCJkZWNvcmF0b3IucmVtb3ZlXCIsXG4gICAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgICBkZWNvcmF0b3I6IGFjdGlvbi5kZWNvcmF0b3JcbiAgICB9XG4gIH0pIDogYWRkRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci5hZGRcIixcbiAgICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICAgIGRlY29yYXRvcjogYWN0aW9uLmRlY29yYXRvclxuICAgIH1cbiAgfSk7XG59O1xuZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUG9ydGFibGVUZXh0U2VsZWN0aW9uc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zKGVkaXRvckFjdG9yLCB0eXBlcykge1xuICBsZXQgcHJldlNlbGVjdGlvbiA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCBlbWl0UG9ydGFibGVUZXh0U2VsZWN0aW9uID0gKCkgPT4ge1xuICAgICAgaWYgKHByZXZTZWxlY3Rpb24gIT09IGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgICAgbGV0IHB0UmFuZ2UgPSBudWxsO1xuICAgICAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5nZXQoZWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAgICAgaWYgKGV4aXN0aW5nKVxuICAgICAgICAgICAgcHRSYW5nZSA9IGV4aXN0aW5nO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlZGl0b3IuY2hpbGRyZW47XG4gICAgICAgICAgICBwdFJhbmdlID0gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZSwgZWRpdG9yLnNlbGVjdGlvbiwgdHlwZXMpLCBTTEFURV9UT19QT1JUQUJMRV9URVhUX1JBTkdFLnNldChlZGl0b3Iuc2VsZWN0aW9uLCBwdFJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHRSYW5nZSA/IGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwic2VsZWN0aW9uXCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiBwdFJhbmdlXG4gICAgICAgIH0pIDogZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgICBzZWxlY3Rpb246IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwcmV2U2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICB9LCB7XG4gICAgICBvbkNoYW5nZVxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5vbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgIG9uQ2hhbmdlKCksIGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIHNldHVwOiBcInNldHRpbmcgdXBcIlxuICAgICAgfSkgfHwgZW1pdFBvcnRhYmxlVGV4dFNlbGVjdGlvbigpO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJDkgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhTY2hlbWFUeXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhTY2hlbWFUeXBlcyh7XG4gIGVkaXRvckFjdG9yLFxuICBzY2hlbWFUeXBlc1xufSkge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgZWRpdG9yLmlzVGV4dEJsb2NrID0gKHZhbHVlKSA9PiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayh2YWx1ZSkgJiYgdmFsdWUuX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsIGVkaXRvci5pc1RleHRTcGFuID0gKHZhbHVlKSA9PiBpc1BvcnRhYmxlVGV4dFNwYW4kMSh2YWx1ZSkgJiYgdmFsdWUuX3R5cGUgPT09IHNjaGVtYVR5cGVzLnNwYW4ubmFtZSwgZWRpdG9yLmlzTGlzdEJsb2NrID0gKHZhbHVlKSA9PiBpc1BvcnRhYmxlVGV4dExpc3RCbG9jayh2YWx1ZSkgJiYgdmFsdWUuX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsIGVkaXRvci5pc1ZvaWQgPSAoZWxlbWVudCkgPT4gc2NoZW1hVHlwZXMuYmxvY2submFtZSAhPT0gZWxlbWVudC5fdHlwZSAmJiAoc2NoZW1hVHlwZXMuYmxvY2tPYmplY3RzLm1hcCgob2JqKSA9PiBvYmoubmFtZSkuaW5jbHVkZXMoZWxlbWVudC5fdHlwZSkgfHwgc2NoZW1hVHlwZXMuaW5saW5lT2JqZWN0cy5tYXAoKG9iaikgPT4gb2JqLm5hbWUpLmluY2x1ZGVzKGVsZW1lbnQuX3R5cGUpKSwgZWRpdG9yLmlzSW5saW5lID0gKGVsZW1lbnQpID0+IHNjaGVtYVR5cGVzLmlubGluZU9iamVjdHMubWFwKChvYmopID0+IG9iai5uYW1lKS5pbmNsdWRlcyhlbGVtZW50Ll90eXBlKSAmJiBcIl9faW5saW5lXCIgaW4gZWxlbWVudCAmJiBlbGVtZW50Ll9faW5saW5lID09PSAhMDtcbiAgICBjb25zdCB7XG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IGVudHJ5O1xuICAgICAgaWYgKG5vZGUuX3R5cGUgPT09IHZvaWQgMCAmJiBwYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBkZWJ1ZyQ5KFwiU2V0dGluZyBzcGFuIHR5cGUgb24gdGV4dCBub2RlIHdpdGhvdXQgYSB0eXBlXCIpO1xuICAgICAgICBjb25zdCBzcGFuID0gbm9kZSwga2V5ID0gc3Bhbi5fa2V5IHx8IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIC4uLnNwYW4sXG4gICAgICAgICAgX3R5cGU6IHNjaGVtYVR5cGVzLnNwYW4ubmFtZSxcbiAgICAgICAgICBfa2V5OiBrZXlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuX2tleSA9PT0gdm9pZCAwICYmIChwYXRoLmxlbmd0aCA9PT0gMSB8fCBwYXRoLmxlbmd0aCA9PT0gMikpIHtcbiAgICAgICAgZGVidWckOShcIlNldHRpbmcgbWlzc2luZyBrZXkgb24gY2hpbGQgbm9kZSB3aXRob3V0IGEga2V5XCIpO1xuICAgICAgICBjb25zdCBrZXkgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCk7XG4gICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBfa2V5OiBrZXlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ybWFsaXplTm9kZShlbnRyeSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckOCA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFV0aWxzXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFV0aWxzKHtcbiAgZWRpdG9yQWN0b3IsXG4gIHNjaGVtYVR5cGVzXG59KSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICByZXR1cm4gZWRpdG9yLnB0ZUV4cGFuZFRvV29yZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2VsZWN0aW9uXG4gICAgICB9ID0gZWRpdG9yO1xuICAgICAgaWYgKHNlbGVjdGlvbiAmJiAhUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKSB7XG4gICAgICAgIGNvbnN0IFt0ZXh0Tm9kZV0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbi5mb2N1cywge1xuICAgICAgICAgIGRlcHRoOiAyXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRleHROb2RlIHx8ICFUZXh0LmlzVGV4dCh0ZXh0Tm9kZSkgfHwgdGV4dE5vZGUudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBkZWJ1ZyQ4KFwicHRlRXhwYW5kVG9Xb3JkOiBDYW4ndCBleHBhbmQgdG8gd29yZCBoZXJlXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZm9jdXNcbiAgICAgICAgfSA9IHNlbGVjdGlvbiwgZm9jdXNPZmZzZXQgPSBmb2N1cy5vZmZzZXQsIGNoYXJzQmVmb3JlID0gdGV4dE5vZGUudGV4dC5zbGljZSgwLCBmb2N1c09mZnNldCksIGNoYXJzQWZ0ZXIgPSB0ZXh0Tm9kZS50ZXh0LnNsaWNlKGZvY3VzT2Zmc2V0LCAtMSksIGlzRW1wdHkgPSAoc3RyKSA9PiBzdHIubWF0Y2goL1xccy9nKSwgd2hpdGVTcGFjZUJlZm9yZUluZGV4ID0gY2hhcnNCZWZvcmUuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmZpbmRJbmRleCgoc3RyKSA9PiBpc0VtcHR5KHN0cikpLCBuZXdTdGFydE9mZnNldCA9IHdoaXRlU3BhY2VCZWZvcmVJbmRleCA+IC0xID8gY2hhcnNCZWZvcmUubGVuZ3RoIC0gd2hpdGVTcGFjZUJlZm9yZUluZGV4IDogMCwgd2hpdGVTcGFjZUFmdGVySW5kZXggPSBjaGFyc0FmdGVyLnNwbGl0KFwiXCIpLmZpbmRJbmRleCgob2JqKSA9PiBpc0VtcHR5KG9iaikpLCBuZXdFbmRPZmZzZXQgPSBjaGFyc0JlZm9yZS5sZW5ndGggKyAod2hpdGVTcGFjZUFmdGVySW5kZXggPiAtMSA/IHdoaXRlU3BhY2VBZnRlckluZGV4IDogY2hhcnNBZnRlci5sZW5ndGggKyAxKTtcbiAgICAgICAgaWYgKCEobmV3U3RhcnRPZmZzZXQgPT09IG5ld0VuZE9mZnNldCB8fCBOdW1iZXIuaXNOYU4obmV3U3RhcnRPZmZzZXQpIHx8IE51bWJlci5pc05hTihuZXdFbmRPZmZzZXQpKSkge1xuICAgICAgICAgIGRlYnVnJDgoXCJwdGVFeHBhbmRUb1dvcmQ6IEV4cGFuZGluZyB0byBmb2N1c2VkIHdvcmRcIiksIFRyYW5zZm9ybXMuc2V0U2VsZWN0aW9uKGVkaXRvciwge1xuICAgICAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgICAgIC4uLnNlbGVjdGlvbi5hbmNob3IsXG4gICAgICAgICAgICAgIG9mZnNldDogbmV3U3RhcnRPZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICAuLi5zZWxlY3Rpb24uZm9jdXMsXG4gICAgICAgICAgICAgIG9mZnNldDogbmV3RW5kT2Zmc2V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnJDgoXCJwdGVFeHBhbmRUb1dvcmQ6IENhbid0IGV4cGFuZCB0byB3b3JkIGhlcmVcIik7XG4gICAgICB9XG4gICAgfSwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayA9IChvcHRpb25zKSA9PiB0b1NsYXRlVmFsdWUoW3tcbiAgICAgIF90eXBlOiBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLFxuICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgc3R5bGU6IHNjaGVtYVR5cGVzLnN0eWxlc1swXS52YWx1ZSB8fCBcIm5vcm1hbFwiLFxuICAgICAgLi4ub3B0aW9ucy5saXN0SXRlbSA/IHtcbiAgICAgICAgbGlzdEl0ZW06IG9wdGlvbnMubGlzdEl0ZW1cbiAgICAgIH0gOiB7fSxcbiAgICAgIC4uLm9wdGlvbnMubGV2ZWwgPyB7XG4gICAgICAgIGxldmVsOiBvcHRpb25zLmxldmVsXG4gICAgICB9IDoge30sXG4gICAgICBtYXJrRGVmczogW10sXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgIG1hcmtzOiBvcHRpb25zLmRlY29yYXRvcnMuZmlsdGVyKChkZWNvcmF0b3IpID0+IHNjaGVtYVR5cGVzLmRlY29yYXRvcnMuZmluZCgoe1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pID0+IHZhbHVlID09PSBkZWNvcmF0b3IpKVxuICAgICAgfV1cbiAgICB9XSwge1xuICAgICAgc2NoZW1hVHlwZXNcbiAgICB9KVswXSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3Qgd2l0aFBsdWdpbnMgPSAoZWRpdG9yLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGUgPSBlZGl0b3IsIHtcbiAgICBlZGl0b3JBY3RvclxuICB9ID0gb3B0aW9ucywgc2NoZW1hVHlwZXMgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLCBvcGVyYXRpb25Ub1BhdGNoZXMgPSBjcmVhdGVPcGVyYXRpb25Ub1BhdGNoZXMoc2NoZW1hVHlwZXMpLCB3aXRoT2JqZWN0S2V5cyA9IGNyZWF0ZVdpdGhPYmplY3RLZXlzKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyksIHdpdGhTY2hlbWFUeXBlcyA9IGNyZWF0ZVdpdGhTY2hlbWFUeXBlcyh7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgc2NoZW1hVHlwZXNcbiAgfSksIHdpdGhQYXRjaGVzID0gY3JlYXRlV2l0aFBhdGNoZXMoe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIHBhdGNoRnVuY3Rpb25zOiBvcGVyYXRpb25Ub1BhdGNoZXMsXG4gICAgc2NoZW1hVHlwZXMsXG4gICAgc3Vic2NyaXB0aW9uczogb3B0aW9ucy5zdWJzY3JpcHRpb25zXG4gIH0pLCB3aXRoTWF4QmxvY2tzID0gY3JlYXRlV2l0aE1heEJsb2NrcyhlZGl0b3JBY3RvciksIHdpdGhVbmRvUmVkbyA9IGNyZWF0ZVdpdGhVbmRvUmVkbyh7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgYmxvY2tTY2hlbWFUeXBlOiBzY2hlbWFUeXBlcy5ibG9jayxcbiAgICBzdWJzY3JpcHRpb25zOiBvcHRpb25zLnN1YnNjcmlwdGlvbnNcbiAgfSksIHdpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWwgPSBjcmVhdGVXaXRoUG9ydGFibGVUZXh0TWFya01vZGVsKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyksIHdpdGhQb3J0YWJsZVRleHRCbG9ja1N0eWxlID0gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dEJsb2NrU3R5bGUoZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzKSwgd2l0aFBsYWNlaG9sZGVyQmxvY2sgPSBjcmVhdGVXaXRoUGxhY2Vob2xkZXJCbG9jayhlZGl0b3JBY3RvciksIHdpdGhVdGlscyA9IGNyZWF0ZVdpdGhVdGlscyh7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgc2NoZW1hVHlwZXNcbiAgfSksIHdpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zID0gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dFNlbGVjdGlvbnMoZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzKTtcbiAgcmV0dXJuIGNyZWF0ZVdpdGhFdmVudExpc3RlbmVycyhlZGl0b3JBY3Rvciwgb3B0aW9ucy5zdWJzY3JpcHRpb25zKSh3aXRoU2NoZW1hVHlwZXMod2l0aE9iamVjdEtleXMod2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbCh3aXRoUG9ydGFibGVUZXh0QmxvY2tTdHlsZSh3aXRoUGxhY2Vob2xkZXJCbG9jayh3aXRoVXRpbHMod2l0aE1heEJsb2Nrcyh3aXRoVW5kb1JlZG8od2l0aFBhdGNoZXMod2l0aFBvcnRhYmxlVGV4dFNlbGVjdGlvbnMoZSkpKSkpKSkpKSkpO1xufSwgZGVidWckNyA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlNsYXRlQ29udGFpbmVyXCIpLCBzbGF0ZUVkaXRvcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGNyZWF0ZVNsYXRlRWRpdG9yKGNvbmZpZykge1xuICBjb25zdCBleGlzdGluZ1NsYXRlRWRpdG9yID0gc2xhdGVFZGl0b3JzLmdldChjb25maWcuZWRpdG9yQWN0b3IpO1xuICBpZiAoZXhpc3RpbmdTbGF0ZUVkaXRvcilcbiAgICByZXR1cm4gZGVidWckNyhcIlJldXNpbmcgZXhpc3RpbmcgU2xhdGUgZWRpdG9yIGluc3RhbmNlXCIsIGNvbmZpZy5lZGl0b3JBY3Rvci5pZCksIGV4aXN0aW5nU2xhdGVFZGl0b3I7XG4gIGRlYnVnJDcoXCJDcmVhdGluZyBuZXcgU2xhdGUgZWRpdG9yIGluc3RhbmNlXCIsIGNvbmZpZy5lZGl0b3JBY3Rvci5pZCk7XG4gIGNvbnN0IHVuc3Vic2NyaXB0aW9ucyA9IFtdLCBzdWJzY3JpcHRpb25zID0gW10sIGluc3RhbmNlID0gd2l0aFBsdWdpbnMod2l0aFJlYWN0KGNyZWF0ZUVkaXRvciQxKCkpLCB7XG4gICAgZWRpdG9yQWN0b3I6IGNvbmZpZy5lZGl0b3JBY3RvcixcbiAgICBzdWJzY3JpcHRpb25zXG4gIH0pO1xuICBLRVlfVE9fVkFMVUVfRUxFTUVOVC5zZXQoaW5zdGFuY2UsIHt9KSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQuc2V0KGluc3RhbmNlLCB7fSk7XG4gIGZvciAoY29uc3Qgc3Vic2NyaXB0aW9uIG9mIHN1YnNjcmlwdGlvbnMpXG4gICAgdW5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKCkpO1xuICBjb25zdCBpbml0aWFsVmFsdWUgPSBbaW5zdGFuY2UucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICBkZWNvcmF0b3JzOiBbXVxuICB9KV0sIHNsYXRlRWRpdG9yID0ge1xuICAgIGluc3RhbmNlLFxuICAgIGluaXRpYWxWYWx1ZVxuICB9O1xuICByZXR1cm4gc2xhdGVFZGl0b3JzLnNldChjb25maWcuZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yKSwgc2xhdGVFZGl0b3I7XG59XG5jb25zdCB0b2dnbGVMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlzTGlzdEl0ZW1BY3RpdmUoe1xuICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICBsaXN0SXRlbTogYWN0aW9uLmxpc3RJdGVtXG4gIH0pID8gcmVtb3ZlTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIC4uLmFjdGlvbixcbiAgICAgIHR5cGU6IFwibGlzdCBpdGVtLnJlbW92ZVwiXG4gICAgfVxuICB9KSA6IGFkZExpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICB0eXBlOiBcImxpc3QgaXRlbS5hZGRcIlxuICAgIH1cbiAgfSk7XG59LCByZW1vdmVMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZ3VhcmRzLmlzTGlzdEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgZm9yIChjb25zdCBbLCBhdF0gb2Ygc2VsZWN0ZWRCbG9ja3MpXG4gICAgVHJhbnNmb3Jtcy51bnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIFtcImxpc3RJdGVtXCIsIFwibGV2ZWxcIl0sIHtcbiAgICAgIGF0XG4gICAgfSk7XG59LCBhZGRMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZ3VhcmRzLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgZm9yIChjb25zdCBbLCBhdF0gb2Ygc2VsZWN0ZWRCbG9ja3MpXG4gICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBsZXZlbDogMSxcbiAgICAgIGxpc3RJdGVtOiBhY3Rpb24ubGlzdEl0ZW1cbiAgICB9LCB7XG4gICAgICBhdFxuICAgIH0pO1xufTtcbmZ1bmN0aW9uIGlzTGlzdEl0ZW1BY3RpdmUoe1xuICBlZGl0b3IsXG4gIGxpc3RJdGVtXG59KSB7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKVxuICB9KV07XG4gIHJldHVybiBzZWxlY3RlZEJsb2Nrcy5sZW5ndGggPiAwID8gc2VsZWN0ZWRCbG9ja3MuZXZlcnkoKFtub2RlXSkgPT4gZWRpdG9yLmlzTGlzdEJsb2NrKG5vZGUpICYmIG5vZGUubGlzdEl0ZW0gPT09IGxpc3RJdGVtKSA6ICExO1xufVxuY29uc3QgdG9nZ2xlU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpc1N0eWxlQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgc3R5bGU6IGFjdGlvbi5zdHlsZVxuICB9KSA/IHJlbW92ZVN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICB0eXBlOiBcInN0eWxlLnJlbW92ZVwiXG4gICAgfVxuICB9KSA6IGFkZFN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICB0eXBlOiBcInN0eWxlLmFkZFwiXG4gICAgfVxuICB9KTtcbn0sIHJlbW92ZVN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGRlZmF1bHRTdHlsZSA9IGNvbnRleHQuc2NoZW1hLnN0eWxlc1swXS52YWx1ZSwgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIGF0OiBhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGd1YXJkcy5pc1RleHRCbG9jayhub2RlKVxuICB9KV07XG4gIGZvciAoY29uc3QgWywgYXRdIG9mIHNlbGVjdGVkQmxvY2tzKVxuICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgc3R5bGU6IGRlZmF1bHRTdHlsZVxuICAgIH0sIHtcbiAgICAgIGF0XG4gICAgfSk7XG59LCBhZGRTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZ3VhcmRzLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgZm9yIChjb25zdCBbLCBhdF0gb2Ygc2VsZWN0ZWRCbG9ja3MpXG4gICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBzdHlsZTogYWN0aW9uLnN0eWxlXG4gICAgfSwge1xuICAgICAgYXRcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBpc1N0eWxlQWN0aXZlKHtcbiAgZWRpdG9yLFxuICBzdHlsZVxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuICExO1xuICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICByZXR1cm4gc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMCA/IHNlbGVjdGVkQmxvY2tzLmV2ZXJ5KChbbm9kZV0pID0+IG5vZGUuc3R5bGUgPT09IHN0eWxlKSA6ICExO1xufVxuY29uc3QgZGVidWckNiA9IGRlYnVnV2l0aE5hbWUoXCJBUEk6ZWRpdGFibGVcIik7XG5mdW5jdGlvbiBjcmVhdGVFZGl0YWJsZUFQSShlZGl0b3IsIGVkaXRvckFjdG9yKSB7XG4gIGNvbnN0IHR5cGVzID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYTtcbiAgcmV0dXJuIHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZm9jdXNcIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYmx1cjogKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiYmx1clwiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b2dnbGVNYXJrOiAobWFyaykgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgICAgICAgIGRlY29yYXRvcjogbWFya1xuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdG9nZ2xlTGlzdDogKGxpc3RJdGVtKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJsaXN0IGl0ZW0udG9nZ2xlXCIsXG4gICAgICAgICAgbGlzdEl0ZW1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvZ2dsZUJsb2NrU3R5bGU6IChzdHlsZSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwic3R5bGUudG9nZ2xlXCIsXG4gICAgICAgICAgc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGlzTWFya0FjdGl2ZTogKG1hcmspID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpc0RlY29yYXRvckFjdGl2ZSh7XG4gICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgIGRlY29yYXRvcjogbWFya1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVyciksICExO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFya3M6ICgpID0+ICh7XG4gICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fVxuICAgIH0pLm1hcmtzIHx8IFtdLFxuICAgIHVuZG86ICgpID0+IGVkaXRvci51bmRvKCksXG4gICAgcmVkbzogKCkgPT4gZWRpdG9yLnJlZG8oKSxcbiAgICBzZWxlY3Q6IChzZWxlY3Rpb24pID0+IHtcbiAgICAgIGNvbnN0IHNsYXRlU2VsZWN0aW9uID0gdG9TbGF0ZVJhbmdlKHNlbGVjdGlvbiwgZWRpdG9yKTtcbiAgICAgIHNsYXRlU2VsZWN0aW9uID8gVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBzbGF0ZVNlbGVjdGlvbikgOiBUcmFuc2Zvcm1zLmRlc2VsZWN0KGVkaXRvciksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0sXG4gICAgZm9jdXNCbG9jazogKCkgPT4ge1xuICAgICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBOb2RlLmRlc2NlbmRhbnQoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkpO1xuICAgICAgICBpZiAoYmxvY2spXG4gICAgICAgICAgcmV0dXJuIGZyb21TbGF0ZVZhbHVlKFtibG9ja10sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVswXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvY3VzQ2hpbGQ6ICgpID0+IHtcbiAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gTm9kZS5kZXNjZW5kYW50KGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpKTtcbiAgICAgICAgaWYgKGJsb2NrICYmIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpXG4gICAgICAgICAgcmV0dXJuIGZyb21TbGF0ZVZhbHVlKFtibG9ja10sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVswXS5jaGlsZHJlbltlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMV1dO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5zZXJ0Q2hpbGQ6ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGUubmFtZSAhPT0gdHlwZXMuc3Bhbi5uYW1lKVxuICAgICAgICByZXR1cm4gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LmlubGluZSBvYmplY3RcIixcbiAgICAgICAgICAgIGlubGluZU9iamVjdDoge1xuICAgICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlZGl0b3JcbiAgICAgICAgfSksIHRvUG9ydGFibGVUZXh0UmFuZ2UoZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIGVkaXRvci5zZWxlY3Rpb24sIHR5cGVzKT8uZm9jdXMucGF0aCA/PyBbXTtcbiAgICAgIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVkaXRvciBoYXMgbm8gc2VsZWN0aW9uXCIpO1xuICAgICAgY29uc3QgW2ZvY3VzQmxvY2tdID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSksXG4gICAgICAgIG1hdGNoOiAobikgPT4gbi5fdHlwZSA9PT0gdHlwZXMuYmxvY2submFtZVxuICAgICAgfSkpWzBdIHx8IFt2b2lkIDBdO1xuICAgICAgaWYgKCFmb2N1c0Jsb2NrKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmb2N1c2VkIHRleHQgYmxvY2tcIik7XG4gICAgICBpZiAodHlwZS5uYW1lICE9PSB0eXBlcy5zcGFuLm5hbWUgJiYgIXR5cGVzLmlubGluZU9iamVjdHMuc29tZSgodCkgPT4gdC5uYW1lID09PSB0eXBlLm5hbWUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHR5cGUgY2Fubm90IGJlIGluc2VydGVkIGFzIGEgY2hpbGQgdG8gYSB0ZXh0IGJsb2NrXCIpO1xuICAgICAgY29uc3QgY2hpbGQgPSB0b1NsYXRlVmFsdWUoW3tcbiAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICBfdHlwZTogdHlwZXMuYmxvY2submFtZSxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgIF90eXBlOiB0eXBlLm5hbWUsXG4gICAgICAgICAgLi4udmFsdWUgfHwge31cbiAgICAgICAgfV1cbiAgICAgIH1dLCB7XG4gICAgICAgIHNjaGVtYVR5cGVzOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hXG4gICAgICB9KVswXS5jaGlsZHJlblswXSwgZm9jdXNDaGlsZFBhdGggPSBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMiksIGlzU3Bhbk5vZGUgPSBjaGlsZC5fdHlwZSA9PT0gdHlwZXMuc3Bhbi5uYW1lLCBmb2N1c05vZGUgPSBOb2RlLmdldChlZGl0b3IsIGZvY3VzQ2hpbGRQYXRoKTtcbiAgICAgIHJldHVybiBpc1NwYW5Ob2RlICYmIGZvY3VzTm9kZS5fdHlwZSAhPT0gdHlwZXMuc3Bhbi5uYW1lICYmIChkZWJ1ZyQ2KFwiSW5zZXJ0aW5nIHNwYW4gY2hpbGQgbmV4dCB0byBpbmxpbmUgb2JqZWN0IGNoaWxkLCBtb3Zpbmcgc2VsZWN0aW9uICsgMVwiKSwgZWRpdG9yLm1vdmUoe1xuICAgICAgICBkaXN0YW5jZTogMSxcbiAgICAgICAgdW5pdDogXCJjaGFyYWN0ZXJcIlxuICAgICAgfSkpLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgY2hpbGQsIHtcbiAgICAgICAgc2VsZWN0OiAhMCxcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb25cbiAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKSwgdG9Qb3J0YWJsZVRleHRSYW5nZShmcm9tU2xhdGVWYWx1ZShlZGl0b3IuY2hpbGRyZW4sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgZWRpdG9yLnNlbGVjdGlvbiwgdHlwZXMpPy5mb2N1cy5wYXRoIHx8IFtdO1xuICAgIH0sXG4gICAgaW5zZXJ0QmxvY2s6ICh0eXBlLCB2YWx1ZSkgPT4gKGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICB0eXBlOiBcImluc2VydC5ibG9jayBvYmplY3RcIixcbiAgICAgICAgYmxvY2tPYmplY3Q6IHtcbiAgICAgICAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgcGxhY2VtZW50OiBcImF1dG9cIlxuICAgICAgfSxcbiAgICAgIGVkaXRvclxuICAgIH0pLCB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyk/LmZvY3VzLnBhdGggPz8gW10pLFxuICAgIGhhc0Jsb2NrU3R5bGU6IChzdHlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGlzU3R5bGVBY3RpdmUoe1xuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICBzdHlsZVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYXNMaXN0U3R5bGU6IChsaXN0SXRlbSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGlzTGlzdEl0ZW1BY3RpdmUoe1xuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICBsaXN0SXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc1ZvaWQ6IChlbGVtZW50KSA9PiAhW3R5cGVzLmJsb2NrLm5hbWUsIHR5cGVzLnNwYW4ubmFtZV0uaW5jbHVkZXMoZWxlbWVudC5fdHlwZSksXG4gICAgZmluZEJ5UGF0aDogKHBhdGgpID0+IHtcbiAgICAgIGNvbnN0IHNsYXRlUGF0aCA9IHRvU2xhdGVSYW5nZSh7XG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfSwgZWRpdG9yKTtcbiAgICAgIGlmIChzbGF0ZVBhdGgpIHtcbiAgICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzbGF0ZVBhdGguZm9jdXMucGF0aC5zbGljZSgwLCAxKSk7XG4gICAgICAgIGlmIChibG9jayAmJiBibG9ja1BhdGggJiYgdHlwZW9mIGJsb2NrLl9rZXkgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSAmJiBzbGF0ZVBhdGguZm9jdXMucGF0aC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gW2Zyb21TbGF0ZVZhbHVlKFtibG9ja10sIHR5cGVzLmJsb2NrLm5hbWUpWzBdLCBbe1xuICAgICAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgICAgICB9XV07XG4gICAgICAgICAgY29uc3QgcHRCbG9jayA9IGZyb21TbGF0ZVZhbHVlKFtibG9ja10sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVswXTtcbiAgICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKHB0QmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBwdENoaWxkID0gcHRCbG9jay5jaGlsZHJlbltzbGF0ZVBhdGguZm9jdXMucGF0aFsxXV07XG4gICAgICAgICAgICBpZiAocHRDaGlsZClcbiAgICAgICAgICAgICAgcmV0dXJuIFtwdENoaWxkLCBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogcHRDaGlsZC5fa2V5XG4gICAgICAgICAgICAgIH1dXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBbdm9pZCAwLCB2b2lkIDBdO1xuICAgIH0sXG4gICAgZmluZERPTU5vZGU6IChlbGVtZW50KSA9PiB7XG4gICAgICBsZXQgbm9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtpdGVtXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIGF0OiBbXSxcbiAgICAgICAgICBtYXRjaDogKG4pID0+IG4uX2tleSA9PT0gZWxlbWVudC5fa2V5XG4gICAgICAgIH0pIHx8IFtdKVswXSB8fCBbdm9pZCAwXTtcbiAgICAgICAgbm9kZSA9IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShlZGl0b3IsIGl0ZW0pO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9LFxuICAgIGFjdGl2ZUFubm90YXRpb25zOiAoKSA9PiB7XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24gfHwgZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLmxlbmd0aCA8IDIpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUFubm90YXRpb25zID0gW10sIHNwYW5zID0gRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gVGV4dC5pc1RleHQobm9kZSkgJiYgbm9kZS5tYXJrcyAhPT0gdm9pZCAwICYmIEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgJiYgbm9kZS5tYXJrcy5sZW5ndGggPiAwXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IFtzcGFuLCBwYXRoXSBvZiBzcGFucykge1xuICAgICAgICAgIGNvbnN0IFtibG9ja10gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHBhdGgsIHtcbiAgICAgICAgICAgIGRlcHRoOiAxXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5tYXJrRGVmcz8uZm9yRWFjaCgoZGVmKSA9PiB7XG4gICAgICAgICAgICBUZXh0LmlzVGV4dChzcGFuKSAmJiBzcGFuLm1hcmtzICYmIEFycmF5LmlzQXJyYXkoc3Bhbi5tYXJrcykgJiYgc3Bhbi5tYXJrcy5pbmNsdWRlcyhkZWYuX2tleSkgJiYgYWN0aXZlQW5ub3RhdGlvbnMucHVzaChkZWYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3RpdmVBbm5vdGF0aW9ucztcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0Fubm90YXRpb25BY3RpdmU6IChhbm5vdGF0aW9uVHlwZSkgPT4gaXNBbm5vdGF0aW9uQWN0aXZlKHtcbiAgICAgIGVkaXRvcixcbiAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgbmFtZTogYW5ub3RhdGlvblR5cGVcbiAgICAgIH1cbiAgICB9KSxcbiAgICBhZGRBbm5vdGF0aW9uOiAodHlwZSwgdmFsdWUpID0+IHtcbiAgICAgIGxldCBwYXRocztcbiAgICAgIHJldHVybiBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICBwYXRocyA9IGFkZEFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAga2V5R2VuZXJhdG9yOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgc2NoZW1hOiB0eXBlc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICB0eXBlOiBcImFubm90YXRpb24uYWRkXCIsXG4gICAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlID8/IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKSwgcGF0aHM7XG4gICAgfSxcbiAgICBkZWxldGU6IChzZWxlY3Rpb24sIG9wdGlvbnMpID0+IHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoc2VsZWN0aW9uLCBlZGl0b3IpO1xuICAgICAgICBpZiAoIShyYW5nZSAmJiByYW5nZS5hbmNob3IucGF0aC5sZW5ndGggPiAwICYmIHJhbmdlLmZvY3VzLnBhdGgubGVuZ3RoID4gMCkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVwiKTtcbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgaWYgKCFvcHRpb25zPy5tb2RlIHx8IG9wdGlvbnM/Lm1vZGUgPT09IFwic2VsZWN0ZWRcIikge1xuICAgICAgICAgICAgZGVidWckNihcIkRlbGV0aW5nIGNvbnRlbnQgaW4gc2VsZWN0aW9uXCIpLCBUcmFuc2Zvcm1zLmRlbGV0ZShlZGl0b3IsIHtcbiAgICAgICAgICAgICAgYXQ6IHJhbmdlLFxuICAgICAgICAgICAgICBoYW5naW5nOiAhMCxcbiAgICAgICAgICAgICAgdm9pZHM6ICEwXG4gICAgICAgICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wdGlvbnM/Lm1vZGUgPT09IFwiYmxvY2tzXCIgJiYgKGRlYnVnJDYoXCJEZWxldGluZyBibG9ja3MgdG91Y2hlZCBieSBzZWxlY3Rpb25cIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICB2b2lkczogITAsXG4gICAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKSB8fCAhZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmIEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSlcbiAgICAgICAgICB9KSksIG9wdGlvbnM/Lm1vZGUgPT09IFwiY2hpbGRyZW5cIiAmJiAoZGVidWckNihcIkRlbGV0aW5nIGNoaWxkcmVuIHRvdWNoZWQgYnkgc2VsZWN0aW9uXCIpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgYXQ6IHJhbmdlLFxuICAgICAgICAgICAgdm9pZHM6ICEwLFxuICAgICAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBub2RlLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUgfHwgLy8gVGV4dCBjaGlsZHJlblxuICAgICAgICAgICAgIWVkaXRvci5pc1RleHRCbG9jayhub2RlKSAmJiBFbGVtZW50JDEuaXNFbGVtZW50KG5vZGUpXG4gICAgICAgICAgfSkpLCBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmIChlZGl0b3IuY2hpbGRyZW4gPSBbZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgICAgICBkZWNvcmF0b3JzOiBbXVxuICAgICAgICAgIH0pXSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVBbm5vdGF0aW9uOiAodHlwZSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5yZW1vdmVcIixcbiAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgIGxldCBwdFJhbmdlID0gbnVsbDtcbiAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5nZXQoZWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAgIGlmIChleGlzdGluZylcbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIHB0UmFuZ2UgPSB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyksIFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0Uuc2V0KGVkaXRvci5zZWxlY3Rpb24sIHB0UmFuZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHB0UmFuZ2U7XG4gICAgfSxcbiAgICBnZXRWYWx1ZTogKCkgPT4gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksXG4gICAgaXNDb2xsYXBzZWRTZWxlY3Rpb246ICgpID0+ICEhZWRpdG9yLnNlbGVjdGlvbiAmJiBSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpc0V4cGFuZGVkU2VsZWN0aW9uOiAoKSA9PiAhIWVkaXRvci5zZWxlY3Rpb24gJiYgUmFuZ2UuaXNFeHBhbmRlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpbnNlcnRCcmVhazogKCkgPT4ge1xuICAgICAgZWRpdG9yLmluc2VydEJyZWFrKCksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0sXG4gICAgZ2V0RnJhZ21lbnQ6ICgpID0+IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5nZXRGcmFnbWVudCgpLCB0eXBlcy5ibG9jay5uYW1lKSxcbiAgICBpc1NlbGVjdGlvbnNPdmVybGFwcGluZzogKHNlbGVjdGlvbkEsIHNlbGVjdGlvbkIpID0+IHtcbiAgICAgIGNvbnN0IHJhbmdlQSA9IHRvU2xhdGVSYW5nZShzZWxlY3Rpb25BLCBlZGl0b3IpLCByYW5nZUIgPSB0b1NsYXRlUmFuZ2Uoc2VsZWN0aW9uQiwgZWRpdG9yKTtcbiAgICAgIHJldHVybiBSYW5nZS5pc1JhbmdlKHJhbmdlQSkgJiYgUmFuZ2UuaXNSYW5nZShyYW5nZUIpICYmIFJhbmdlLmluY2x1ZGVzKHJhbmdlQSwgcmFuZ2VCKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpc0Fubm90YXRpb25BY3RpdmUoe1xuICBlZGl0b3IsXG4gIGFubm90YXRpb25cbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5sZW5ndGggPCAyKVxuICAgIHJldHVybiAhMTtcbiAgdHJ5IHtcbiAgICBjb25zdCBzcGFucyA9IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgIG1hdGNoOiAobm9kZSkgPT4gVGV4dC5pc1RleHQobm9kZSlcbiAgICB9KV07XG4gICAgaWYgKHNwYW5zLmxlbmd0aCA9PT0gMCB8fCBzcGFucy5zb21lKChbc3Bhbl0pID0+ICFpc1BvcnRhYmxlVGV4dFNwYW4kMShzcGFuKSB8fCAhc3Bhbi5tYXJrcyB8fCBzcGFuLm1hcmtzPy5sZW5ndGggPT09IDApKSByZXR1cm4gITE7XG4gICAgY29uc3Qgc2VsZWN0aW9uTWFya0RlZnMgPSBzcGFucy5yZWR1Y2UoKGFjY01hcmtEZWZzLCBbLCBwYXRoXSkgPT4ge1xuICAgICAgY29uc3QgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgcGF0aCwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5tYXJrRGVmcyA/IFsuLi5hY2NNYXJrRGVmcywgLi4uYmxvY2subWFya0RlZnNdIDogYWNjTWFya0RlZnM7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBzcGFucy5ldmVyeSgoW3NwYW5dKSA9PiBpc1BvcnRhYmxlVGV4dFNwYW4kMShzcGFuKSA/IHNwYW4ubWFya3M/Lm1hcCgobWFya0tleSkgPT4gc2VsZWN0aW9uTWFya0RlZnMuZmluZCgoZGVmKSA9PiBkZWY/Ll9rZXkgPT09IG1hcmtLZXkpPy5fdHlwZSk/LmluY2x1ZGVzKGFubm90YXRpb24ubmFtZSkgOiAhMSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAhMTtcbiAgfVxufVxuY29uc3QgYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3IsIHtcbiAgICBzZWxlY3Rpb246IG9yaWdpbmFsU2VsZWN0aW9uXG4gIH0gPSBlZGl0b3I7XG4gIGxldCBwYXRocztcbiAgaWYgKG9yaWdpbmFsU2VsZWN0aW9uICYmIChSYW5nZS5pc0NvbGxhcHNlZChvcmlnaW5hbFNlbGVjdGlvbikgJiYgKGVkaXRvci5wdGVFeHBhbmRUb1dvcmQoKSwgZWRpdG9yLm9uQ2hhbmdlKCkpLCBlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgIGxldCBzcGFuUGF0aCwgbWFya0RlZlBhdGg7XG4gICAgY29uc3QgbWFya0RlZlBhdGhzID0gW107XG4gICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKSxcbiAgICAgIHJldmVyc2U6IFJhbmdlLmlzQmFja3dhcmQoZWRpdG9yLnNlbGVjdGlvbilcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSBvZiBzZWxlY3RlZEJsb2Nrcykge1xuICAgICAgaWYgKGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgYmxvY2suY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIilcbiAgICAgICAgY29udGludWU7XG4gICAgICBjb25zdCBhbm5vdGF0aW9uS2V5ID0gY29udGV4dC5rZXlHZW5lcmF0b3IoKSwgbWFya0RlZnMgPSBibG9jay5tYXJrRGVmcyA/PyBbXTtcbiAgICAgIG1hcmtEZWZzLmZpbmQoKG1hcmtEZWYpID0+IG1hcmtEZWYuX3R5cGUgPT09IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUgJiYgbWFya0RlZi5fa2V5ID09PSBhbm5vdGF0aW9uS2V5KSA9PT0gdm9pZCAwICYmIChUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICBtYXJrRGVmczogWy4uLm1hcmtEZWZzLCB7XG4gICAgICAgICAgX3R5cGU6IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUsXG4gICAgICAgICAgX2tleTogYW5ub3RhdGlvbktleSxcbiAgICAgICAgICAuLi5hY3Rpb24uYW5ub3RhdGlvbi52YWx1ZVxuICAgICAgICB9XVxuICAgICAgfSwge1xuICAgICAgICBhdDogYmxvY2tQYXRoXG4gICAgICB9KSwgbWFya0RlZlBhdGggPSBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcIm1hcmtEZWZzXCIsIHtcbiAgICAgICAgX2tleTogYW5ub3RhdGlvbktleVxuICAgICAgfV0sIFJhbmdlLmlzQmFja3dhcmQoZWRpdG9yLnNlbGVjdGlvbikgPyBtYXJrRGVmUGF0aHMudW5zaGlmdChtYXJrRGVmUGF0aCkgOiBtYXJrRGVmUGF0aHMucHVzaChtYXJrRGVmUGF0aCkpLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgICBzcGxpdDogITBcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICAgIGZvciAoY29uc3QgW3NwYW4sIHBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghZWRpdG9yLmlzVGV4dFNwYW4oc3BhbikgfHwgIVJhbmdlLmluY2x1ZGVzKGVkaXRvci5zZWxlY3Rpb24sIHBhdGgpKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXJrcyA9IHNwYW4ubWFya3MgPz8gW10sIGV4aXN0aW5nU2FtZVR5cGVBbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gbWFya0RlZnMuc29tZSgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrICYmIG1hcmtEZWYuX3R5cGUgPT09IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUpKTtcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogWy4uLm1hcmtzLmZpbHRlcigobWFyaykgPT4gIWV4aXN0aW5nU2FtZVR5cGVBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSksIGFubm90YXRpb25LZXldXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgc3BhblBhdGggPSBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICAgIH1dO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRGVmUGF0aCAmJiBzcGFuUGF0aCAmJiAocGF0aHMgPSB7XG4gICAgICBtYXJrRGVmUGF0aCxcbiAgICAgIG1hcmtEZWZQYXRocyxcbiAgICAgIHNwYW5QYXRoXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGhzO1xufSwgcmVtb3ZlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3I7XG4gIGlmIChkZWJ1ZyQ2KFwiUmVtb3ZpbmcgYW5ub3RhdGlvblwiLCBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lKSwgISFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIGlmIChSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICAgIGRlcHRoOiAxXG4gICAgICB9KTtcbiAgICAgIGlmICghZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcG90ZW50aWFsQW5ub3RhdGlvbnMgPSAoYmxvY2subWFya0RlZnMgPz8gW10pLmZpbHRlcigobWFya0RlZikgPT4gbWFya0RlZi5fdHlwZSA9PT0gYWN0aW9uLmFubm90YXRpb24ubmFtZSksIFtzZWxlY3RlZENoaWxkLCBzZWxlY3RlZENoaWxkUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICAgICAgZGVwdGg6IDJcbiAgICAgIH0pO1xuICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihzZWxlY3RlZENoaWxkKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgYW5ub3RhdGlvblRvUmVtb3ZlID0gc2VsZWN0ZWRDaGlsZC5tYXJrcz8uZmluZCgobWFyaykgPT4gcG90ZW50aWFsQW5ub3RhdGlvbnMuc29tZSgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICBpZiAoIWFubm90YXRpb25Ub1JlbW92ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcHJldmlvdXNTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiA9IFtdO1xuICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCwge1xuICAgICAgICByZXZlcnNlOiAhMFxuICAgICAgfSkpXG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0JlZm9yZShjaGlsZFBhdGgsIHNlbGVjdGVkQ2hpbGRQYXRoKSlcbiAgICAgICAgICBpZiAoY2hpbGQubWFya3M/LmluY2x1ZGVzKGFubm90YXRpb25Ub1JlbW92ZSkpXG4gICAgICAgICAgICBwcmV2aW91c1NwYW5zV2l0aFNhbWVBbm5vdGF0aW9uLnB1c2goW2NoaWxkLCBjaGlsZFBhdGhdKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgIGNvbnN0IG5leHRTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiA9IFtdO1xuICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCkpXG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0FmdGVyKGNoaWxkUGF0aCwgc2VsZWN0ZWRDaGlsZFBhdGgpKVxuICAgICAgICAgIGlmIChjaGlsZC5tYXJrcz8uaW5jbHVkZXMoYW5ub3RhdGlvblRvUmVtb3ZlKSlcbiAgICAgICAgICAgIG5leHRTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbi5wdXNoKFtjaGlsZCwgY2hpbGRQYXRoXSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBbLi4ucHJldmlvdXNTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiwgW3NlbGVjdGVkQ2hpbGQsIHNlbGVjdGVkQ2hpbGRQYXRoXSwgLi4ubmV4dFNwYW5zV2l0aFNhbWVBbm5vdGF0aW9uXSlcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogY2hpbGQubWFya3M/LmZpbHRlcigobWFyaykgPT4gbWFyayAhPT0gYW5ub3RhdGlvblRvUmVtb3ZlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHt9LCB7XG4gICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSksXG4gICAgICAgIHNwbGl0OiAhMCxcbiAgICAgICAgaGFuZ2luZzogITBcbiAgICAgIH0pO1xuICAgICAgY29uc3QgYmxvY2tzID0gRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgICAgIH0pO1xuICAgICAgZm9yIChjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gb2YgYmxvY2tzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgfHwgIVJhbmdlLmluY2x1ZGVzKGVkaXRvci5zZWxlY3Rpb24sIGNoaWxkUGF0aCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCBtYXJrRGVmcyA9IGJsb2NrLm1hcmtEZWZzID8/IFtdLCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdLCBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiBtYXJrRGVmcy5maW5kKChtYXJrRGVmMikgPT4gbWFya0RlZjIuX2tleSA9PT0gbWFyayk/Ll90eXBlICE9PSBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lKTtcbiAgICAgICAgICBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uLmxlbmd0aCAhPT0gbWFya3MubGVuZ3RoICYmIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrczogbWFya3NXaXRob3V0QW5ub3RhdGlvblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbn0sIHRvZ2dsZUFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoaXNBbm5vdGF0aW9uQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbmFtZTogYWN0aW9uLmFubm90YXRpb24ubmFtZVxuICAgIH1cbiAgfSkpXG4gICAgcmVtb3ZlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLnJlbW92ZVwiLFxuICAgICAgICBhbm5vdGF0aW9uOiBhY3Rpb24uYW5ub3RhdGlvbixcbiAgICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yXG4gICAgICB9XG4gICAgfSk7XG4gIGVsc2VcbiAgICByZXR1cm4gYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLmFkZFwiLFxuICAgICAgICBhbm5vdGF0aW9uOiBhY3Rpb24uYW5ub3RhdGlvbixcbiAgICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yXG4gICAgICB9XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gaW5zZXJ0QmxvY2soe1xuICBibG9jayxcbiAgcGxhY2VtZW50LFxuICBlZGl0b3IsXG4gIHNjaGVtYVxufSkge1xuICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSksXG4gICAgICBtYXRjaDogKG4pID0+ICFFZGl0b3IuaXNFZGl0b3IobilcbiAgICB9KSlbMF0gPz8gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgICBpZiAocGxhY2VtZW50ID09PSBcImFmdGVyXCIpIHtcbiAgICAgIGNvbnN0IG5leHRQYXRoID0gW2ZvY3VzQmxvY2tQYXRoWzBdICsgMV07XG4gICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgYmxvY2ssIHtcbiAgICAgICAgYXQ6IG5leHRQYXRoXG4gICAgICB9KSwgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCB7XG4gICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgIHBhdGg6IFtuZXh0UGF0aFswXSwgMF0sXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogW25leHRQYXRoWzBdLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHBsYWNlbWVudCA9PT0gXCJiZWZvcmVcIiA/IFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBibG9jaywge1xuICAgICAgYXQ6IGZvY3VzQmxvY2tQYXRoXG4gICAgfSkgOiBFZGl0b3IuaW5zZXJ0Tm9kZShlZGl0b3IsIGJsb2NrKTtcbiAgICBmb2N1c0Jsb2NrICYmIGlzRXF1YWxUb0VtcHR5RWRpdG9yKFtmb2N1c0Jsb2NrXSwgc2NoZW1hKSAmJiBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IGZvY3VzQmxvY2tQYXRoXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGFzdEJsb2NrID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBtYXRjaDogKG4pID0+ICFFZGl0b3IuaXNFZGl0b3IobiksXG4gICAgICBhdDogW10sXG4gICAgICByZXZlcnNlOiAhMFxuICAgIH0pKVswXTtcbiAgICBFZGl0b3IuaW5zZXJ0Tm9kZShlZGl0b3IsIGJsb2NrKSwgbGFzdEJsb2NrICYmIGlzRXF1YWxUb0VtcHR5RWRpdG9yKFtsYXN0QmxvY2tbMF1dLCBzY2hlbWEpICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogbGFzdEJsb2NrWzFdXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IGluc2VydEJsb2NrT2JqZWN0QWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgYmxvY2sgPSB0b1NsYXRlVmFsdWUoW3tcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIF90eXBlOiBhY3Rpb24uYmxvY2tPYmplY3QubmFtZSxcbiAgICAuLi5hY3Rpb24uYmxvY2tPYmplY3QudmFsdWUgPyBhY3Rpb24uYmxvY2tPYmplY3QudmFsdWUgOiB7fVxuICB9XSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICB9KVswXTtcbiAgaW5zZXJ0QmxvY2soe1xuICAgIGJsb2NrLFxuICAgIHBsYWNlbWVudDogYWN0aW9uLnBsYWNlbWVudCxcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYVxuICB9KTtcbn0sIGluc2VydEJyZWFrQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3Qga2V5R2VuZXJhdG9yID0gY29udGV4dC5rZXlHZW5lcmF0b3IsIHNjaGVtYSA9IGNvbnRleHQuc2NoZW1hLCBlZGl0b3IgPSBhY3Rpb24uZWRpdG9yO1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBbZm9jdXNTcGFuXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMsXG4gICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICB2b2lkczogITFcbiAgfSkpWzBdID8/IFt2b2lkIDBdLCBmb2N1c0RlY29yYXRvcnMgPSBmb2N1c1NwYW4/Lm1hcmtzPy5maWx0ZXIoKG1hcmspID0+IHNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlID09PSBtYXJrKSkgPz8gW10sIGZvY3VzQW5ub3RhdGlvbnMgPSBmb2N1c1NwYW4/Lm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFzY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSA9PT0gbWFyaykpID8/IFtdLCBhbmNob3JCbG9ja1BhdGggPSBlZGl0b3Iuc2VsZWN0aW9uLmFuY2hvci5wYXRoLnNsaWNlKDAsIDEpLCBmb2N1c0Jsb2NrUGF0aCA9IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSwgZm9jdXNCbG9jayA9IE5vZGUuZGVzY2VuZGFudChlZGl0b3IsIGZvY3VzQmxvY2tQYXRoKTtcbiAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhmb2N1c0Jsb2NrKSkge1xuICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IFJhbmdlLmVkZ2VzKGVkaXRvci5zZWxlY3Rpb24pLCBsYXN0Rm9jdXNCbG9ja0NoaWxkID0gZm9jdXNCbG9jay5jaGlsZHJlbltmb2N1c0Jsb2NrLmNoaWxkcmVuLmxlbmd0aCAtIDFdLCBhdFRoZUVuZE9mQmxvY2sgPSBpc0VxdWFsKHN0YXJ0LCB7XG4gICAgICBwYXRoOiBbLi4uZm9jdXNCbG9ja1BhdGgsIGZvY3VzQmxvY2suY2hpbGRyZW4ubGVuZ3RoIC0gMV0sXG4gICAgICBvZmZzZXQ6IGVkaXRvci5pc1RleHRTcGFuKGxhc3RGb2N1c0Jsb2NrQ2hpbGQpID8gbGFzdEZvY3VzQmxvY2tDaGlsZC50ZXh0Lmxlbmd0aCA6IDBcbiAgICB9KSwgYXRUaGVTdGFydE9mQmxvY2sgPSBpc0VxdWFsKGVuZCwge1xuICAgICAgcGF0aDogWy4uLmZvY3VzQmxvY2tQYXRoLCAwXSxcbiAgICAgIG9mZnNldDogMFxuICAgIH0pO1xuICAgIGlmIChhdFRoZUVuZE9mQmxvY2sgJiYgUmFuZ2UuaXNDb2xsYXBzZWQoZWRpdG9yLnNlbGVjdGlvbikpIHtcbiAgICAgIEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgIGRlY29yYXRvcnM6IFtdLFxuICAgICAgICBsaXN0SXRlbTogZm9jdXNCbG9jay5saXN0SXRlbSxcbiAgICAgICAgbGV2ZWw6IGZvY3VzQmxvY2subGV2ZWxcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGF0VGhlU3RhcnRPZkJsb2NrICYmIFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKSB7XG4gICAgICBFZGl0b3IuaW5zZXJ0Tm9kZShlZGl0b3IsIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgICBkZWNvcmF0b3JzOiBmb2N1c0Fubm90YXRpb25zLmxlbmd0aCA9PT0gMCA/IGZvY3VzRGVjb3JhdG9ycyA6IFtdLFxuICAgICAgICBsaXN0SXRlbTogZm9jdXNCbG9jay5saXN0SXRlbSxcbiAgICAgICAgbGV2ZWw6IGZvY3VzQmxvY2subGV2ZWxcbiAgICAgIH0pKTtcbiAgICAgIGNvbnN0IFtuZXh0QmxvY2tQYXRoXSA9IFBhdGgubmV4dChmb2N1c0Jsb2NrUGF0aCk7XG4gICAgICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogW25leHRCbG9ja1BhdGgsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IFtuZXh0QmxvY2tQYXRoLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbkFjcm9zc0Jsb2NrcyA9IGFuY2hvckJsb2NrUGF0aFswXSAhPT0gZm9jdXNCbG9ja1BhdGhbMF07XG4gICAgaWYgKCFhdFRoZVN0YXJ0T2ZCbG9jayAmJiAhYXRUaGVFbmRPZkJsb2NrICYmICFzZWxlY3Rpb25BY3Jvc3NCbG9ja3MpIHtcbiAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIFRyYW5zZm9ybXMuc3BsaXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgW25leHROb2RlLCBuZXh0Tm9kZVBhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBQYXRoLm5leHQoZm9jdXNCbG9ja1BhdGgpLCB7XG4gICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChUcmFuc2Zvcm1zLnNldFNlbGVjdGlvbihlZGl0b3IsIHtcbiAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgIHBhdGg6IFsuLi5uZXh0Tm9kZVBhdGgsIDBdLFxuICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgcGF0aDogWy4uLm5leHROb2RlUGF0aCwgMF0sXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBlZGl0b3IuaXNUZXh0QmxvY2sobmV4dE5vZGUpICYmIG5leHROb2RlLm1hcmtEZWZzICYmIG5leHROb2RlLm1hcmtEZWZzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBuZXdNYXJrRGVmS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHByZXZOb2RlU3BhbnMgPSBBcnJheS5mcm9tKE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBmb2N1c0Jsb2NrUGF0aCkpLm1hcCgoZW50cnkpID0+IGVudHJ5WzBdKS5maWx0ZXIoKG5vZGUpID0+IGVkaXRvci5pc1RleHRTcGFuKG5vZGUpKSwgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgbmV4dE5vZGVQYXRoKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkpXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgbWFya3MgPSBjaGlsZC5tYXJrcyA/PyBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWFyayBvZiBtYXJrcylcbiAgICAgICAgICAgICAgc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IG1hcmspIHx8IHByZXZOb2RlU3BhbnMuc29tZSgocHJldk5vZGVTcGFuKSA9PiBwcmV2Tm9kZVNwYW4ubWFya3M/LmluY2x1ZGVzKG1hcmspKSAmJiAhbmV3TWFya0RlZktleXMuaGFzKG1hcmspICYmIG5ld01hcmtEZWZLZXlzLnNldChtYXJrLCBrZXlHZW5lcmF0b3IoKSk7XG4gICAgICAgICAgICBjb25zdCBuZXdNYXJrcyA9IG1hcmtzLm1hcCgobWFyaykgPT4gbmV3TWFya0RlZktleXMuZ2V0KG1hcmspID8/IG1hcmspO1xuICAgICAgICAgICAgaXNFcXVhbChtYXJrcywgbmV3TWFya3MpIHx8IFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIG1hcmtzOiBuZXdNYXJrc1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmV3TWFya0RlZnMgPSBuZXh0Tm9kZS5tYXJrRGVmcy5tYXAoKG1hcmtEZWYpID0+ICh7XG4gICAgICAgICAgICAuLi5tYXJrRGVmLFxuICAgICAgICAgICAgX2tleTogbmV3TWFya0RlZktleXMuZ2V0KG1hcmtEZWYuX2tleSkgPz8gbWFya0RlZi5fa2V5XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGlzRXF1YWwobmV4dE5vZGUubWFya0RlZnMsIG5ld01hcmtEZWZzKSB8fCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya0RlZnM6IG5ld01hcmtEZWZzXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IG5leHROb2RlUGF0aCxcbiAgICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgVHJhbnNmb3Jtcy5zcGxpdE5vZGVzKGVkaXRvciwge1xuICAgIGFsd2F5czogITBcbiAgfSk7XG59LCBpbnNlcnRTb2Z0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpbnNlcnRCcmVha0FjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJpbnNlcnQuYnJlYWtcIlxuICAgIH1cbiAgfSk7XG59LCBpbnNlcnRJbmxpbmVPYmplY3RBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2NoZW1hLmlubGluZU9iamVjdHMuc29tZSgoaW5saW5lT2JqZWN0KSA9PiBpbmxpbmVPYmplY3QubmFtZSA9PT0gYWN0aW9uLmlubGluZU9iamVjdC5uYW1lKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IHVua25vd24gaW5saW5lIG9iamVjdFwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IGlubGluZSBvYmplY3Qgd2l0aG91dCBzZWxlY3Rpb25cIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFtmb2N1c1RleHRCbG9ja10gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgsXG4gICAgbWF0Y2g6IChub2RlKSA9PiBhY3Rpb24uZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pKS5hdCgwKSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWZvY3VzVGV4dEJsb2NrKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBwZXJmb3JtIGFjdGlvbiB3aXRob3V0IGZvY3VzIHRleHQgYmxvY2tcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNoaWxkID0gdG9TbGF0ZVZhbHVlKFt7XG4gICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICBjaGlsZHJlbjogW3tcbiAgICAgIF90eXBlOiBhY3Rpb24uaW5saW5lT2JqZWN0Lm5hbWUsXG4gICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgLi4uYWN0aW9uLmlubGluZU9iamVjdC52YWx1ZSA/PyB7fVxuICAgIH1dXG4gIH1dLCB7XG4gICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gIH0pLmF0KDApPy5jaGlsZHJlbi5hdCgwKTtcbiAgaWYgKCFjaGlsZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IGlubGluZSBvYmplY3RcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoYWN0aW9uLmVkaXRvciwgY2hpbGQpO1xufSwgaW5zZXJ0U3BhbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBlcmZvcm0gYWN0aW9uIHdpdGhvdXQgc2VsZWN0aW9uXCIsIGFjdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgsXG4gICAgbWF0Y2g6IChub2RlKSA9PiBhY3Rpb24uZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWZvY3VzQmxvY2sgfHwgIWZvY3VzQmxvY2tQYXRoKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBwZXJmb3JtIGFjdGlvbiB3aXRob3V0IGZvY3VzIGJsb2NrXCIsIGFjdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG1hcmtEZWZzID0gZm9jdXNCbG9jay5tYXJrRGVmcyA/PyBbXSwgYW5ub3RhdGlvbnMgPSBhY3Rpb24uYW5ub3RhdGlvbnMgPyBhY3Rpb24uYW5ub3RhdGlvbnMubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgIF90eXBlOiBhbm5vdGF0aW9uLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAuLi5hbm5vdGF0aW9uLnZhbHVlXG4gIH0pKSA6IHZvaWQgMDtcbiAgYW5ub3RhdGlvbnMgJiYgYW5ub3RhdGlvbnMubGVuZ3RoID4gMCAmJiBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBtYXJrRGVmczogWy4uLm1hcmtEZWZzLCAuLi5hbm5vdGF0aW9uc11cbiAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIF90eXBlOiBcInNwYW5cIixcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIHRleHQ6IGFjdGlvbi50ZXh0LFxuICAgIG1hcmtzOiBbLi4uYW5ub3RhdGlvbnM/Lm1hcCgoYW5ub3RhdGlvbikgPT4gYW5ub3RhdGlvbi5fa2V5KSA/PyBbXSwgLi4uYWN0aW9uLmRlY29yYXRvcnMgPz8gW11dXG4gIH0pO1xufSwgdGV4dEJsb2NrU2V0QWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgYXQgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgIGFuY2hvcjoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfVxuICB9LCBhY3Rpb24uZWRpdG9yKTtcbiAgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgLi4uYWN0aW9uLnN0eWxlID8ge1xuICAgICAgc3R5bGU6IGFjdGlvbi5zdHlsZVxuICAgIH0gOiB7fSxcbiAgICAuLi5hY3Rpb24ubGlzdEl0ZW0gPyB7XG4gICAgICBsaXN0SXRlbTogYWN0aW9uLmxpc3RJdGVtXG4gICAgfSA6IHt9LFxuICAgIC4uLmFjdGlvbi5sZXZlbCA/IHtcbiAgICAgIGxldmVsOiBhY3Rpb24ubGV2ZWxcbiAgICB9IDoge31cbiAgfSwge1xuICAgIGF0XG4gIH0pO1xufSwgdGV4dEJsb2NrVW5zZXRBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBhdCA9IHRvU2xhdGVSYW5nZSh7XG4gICAgYW5jaG9yOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9XG4gIH0sIGFjdGlvbi5lZGl0b3IpO1xuICBUcmFuc2Zvcm1zLnVuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwgYWN0aW9uLnByb3BzLCB7XG4gICAgYXRcbiAgfSk7XG59LCBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9ucyA9IHtcbiAgXCJhbm5vdGF0aW9uLmFkZFwiOiBhZGRBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiYW5ub3RhdGlvbi5yZW1vdmVcIjogcmVtb3ZlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImFubm90YXRpb24udG9nZ2xlXCI6IHRvZ2dsZUFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgYmx1cjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIFJlYWN0RWRpdG9yLmJsdXIoYWN0aW9uLmVkaXRvcik7XG4gIH0sXG4gIFwiZGVjb3JhdG9yLmFkZFwiOiBhZGREZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJkZWNvcmF0b3IucmVtb3ZlXCI6IHJlbW92ZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImRlY29yYXRvci50b2dnbGVcIjogdG9nZ2xlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIGZvY3VzOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgUmVhY3RFZGl0b3IuZm9jdXMoYWN0aW9uLmVkaXRvcik7XG4gIH0sXG4gIFwiZGVsZXRlLmJhY2t3YXJkXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBkZWxldGVCYWNrd2FyZChhY3Rpb24uZWRpdG9yLCBhY3Rpb24udW5pdCk7XG4gIH0sXG4gIFwiZGVsZXRlLmZvcndhcmRcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGRlbGV0ZUZvcndhcmQoYWN0aW9uLmVkaXRvciwgYWN0aW9uLnVuaXQpO1xuICB9LFxuICBcImRlbGV0ZS5ibG9ja1wiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IGFjdGlvbi5ibG9ja1BhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IGFjdGlvbi5ibG9ja1BhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0sIGFjdGlvbi5lZGl0b3IpO1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gZmluZCBTbGF0ZSByYW5nZSBmcm9tIHNlbGVjdGlvbiBwb2ludHNcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQ6IHJhbmdlXG4gICAgfSk7XG4gIH0sXG4gIFwiZGVsZXRlLnRleHRcIjogKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBmcm9tU2xhdGVWYWx1ZShhY3Rpb24uZWRpdG9yLmNoaWxkcmVuLCBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoYWN0aW9uLmVkaXRvcikpLCBhbmNob3IgPSBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50KHtcbiAgICAgIHZhbHVlLFxuICAgICAgYmxvY2tPZmZzZXQ6IGFjdGlvbi5hbmNob3JcbiAgICB9KSwgZm9jdXMgPSBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50KHtcbiAgICAgIHZhbHVlLFxuICAgICAgYmxvY2tPZmZzZXQ6IGFjdGlvbi5mb2N1c1xuICAgIH0pO1xuICAgIGlmICghYW5jaG9yIHx8ICFmb2N1cykge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIGFuY2hvciBvciBmb2N1cyBzZWxlY3Rpb24gcG9pbnRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgIGFuY2hvcixcbiAgICAgIGZvY3VzXG4gICAgfSwgYWN0aW9uLmVkaXRvcik7XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIFNsYXRlIHJhbmdlIGZyb20gc2VsZWN0aW9uIHBvaW50c1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgVHJhbnNmb3Jtcy5kZWxldGUoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQ6IHJhbmdlXG4gICAgfSk7XG4gIH0sXG4gIFwiaW5zZXJ0LmJsb2NrIG9iamVjdFwiOiBpbnNlcnRCbG9ja09iamVjdEFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5icmVha1wiOiBpbnNlcnRCcmVha0FjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5pbmxpbmUgb2JqZWN0XCI6IGluc2VydElubGluZU9iamVjdEFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5zb2Z0IGJyZWFrXCI6IGluc2VydFNvZnRCcmVha0FjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5zcGFuXCI6IGluc2VydFNwYW5BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQudGV4dFwiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgaW5zZXJ0VGV4dChhY3Rpb24uZWRpdG9yLCBhY3Rpb24udGV4dCk7XG4gIH0sXG4gIFwiaW5zZXJ0LnRleHQgYmxvY2tcIjogKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgYmxvY2sgPSB0b1NsYXRlVmFsdWUoW3tcbiAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuYmxvY2submFtZSxcbiAgICAgIHN0eWxlOiBjb250ZXh0LnNjaGVtYS5zdHlsZXNbMF0udmFsdWUgPz8gXCJub3JtYWxcIixcbiAgICAgIG1hcmtEZWZzOiBbXSxcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb24udGV4dEJsb2NrPy5jaGlsZHJlbj8ubWFwKChjaGlsZCkgPT4gKHtcbiAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKClcbiAgICAgIH0pKSA/PyBbe1xuICAgICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICB9XVxuICAgIH1dLCB7XG4gICAgICBzY2hlbWFUeXBlczogY29udGV4dC5zY2hlbWFcbiAgICB9KVswXTtcbiAgICBpbnNlcnRCbG9jayh7XG4gICAgICBibG9jayxcbiAgICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICBwbGFjZW1lbnQ6IGFjdGlvbi5wbGFjZW1lbnRcbiAgICB9KTtcbiAgfSxcbiAgZWZmZWN0OiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgYWN0aW9uLmVmZmVjdCgpO1xuICB9LFxuICBcImxpc3QgaXRlbS5hZGRcIjogYWRkTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJsaXN0IGl0ZW0ucmVtb3ZlXCI6IHJlbW92ZUxpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwibGlzdCBpdGVtLnRvZ2dsZVwiOiB0b2dnbGVMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcIm1vdmUuYmxvY2tcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnN0IGF0ID0gW3RvU2xhdGVQYXRoKGFjdGlvbi5hdCwgYWN0aW9uLmVkaXRvcilbMF1dLCB0byA9IFt0b1NsYXRlUGF0aChhY3Rpb24udG8sIGFjdGlvbi5lZGl0b3IpWzBdXTtcbiAgICBUcmFuc2Zvcm1zLm1vdmVOb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBhdCxcbiAgICAgIHRvLFxuICAgICAgbW9kZTogXCJoaWdoZXN0XCJcbiAgICB9KTtcbiAgfSxcbiAgXCJtb3ZlLmJsb2NrIGRvd25cIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnN0IGF0ID0gW3RvU2xhdGVQYXRoKGFjdGlvbi5hdCwgYWN0aW9uLmVkaXRvcilbMF1dLCB0byA9IFtQYXRoLm5leHQoYXQpWzBdXTtcbiAgICBUcmFuc2Zvcm1zLm1vdmVOb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBhdCxcbiAgICAgIHRvLFxuICAgICAgbW9kZTogXCJoaWdoZXN0XCJcbiAgICB9KTtcbiAgfSxcbiAgXCJtb3ZlLmJsb2NrIHVwXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCBhdCA9IFt0b1NsYXRlUGF0aChhY3Rpb24uYXQsIGFjdGlvbi5lZGl0b3IpWzBdXTtcbiAgICBpZiAoIVBhdGguaGFzUHJldmlvdXMoYXQpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHRvID0gW1BhdGgucHJldmlvdXMoYXQpWzBdXTtcbiAgICBUcmFuc2Zvcm1zLm1vdmVOb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBhdCxcbiAgICAgIHRvLFxuICAgICAgbW9kZTogXCJoaWdoZXN0XCJcbiAgICB9KTtcbiAgfSxcbiAgbm9vcDogKCkgPT4ge1xuICB9LFxuICBzZWxlY3Q6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSB0b1NsYXRlUmFuZ2UoYWN0aW9uLnNlbGVjdGlvbiwgYWN0aW9uLmVkaXRvcik7XG4gICAgbmV3U2VsZWN0aW9uID8gVHJhbnNmb3Jtcy5zZWxlY3QoYWN0aW9uLmVkaXRvciwgbmV3U2VsZWN0aW9uKSA6IFRyYW5zZm9ybXMuZGVzZWxlY3QoYWN0aW9uLmVkaXRvcik7XG4gIH0sXG4gIFwic2VsZWN0LnByZXZpb3VzIGJsb2NrXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHNlbGVjdCBwcmV2aW91cyBibG9jayB3aXRob3V0IGEgc2VsZWN0aW9uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBibG9ja1BhdGggPSBhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpO1xuICAgIGlmICghUGF0aC5oYXNQcmV2aW91cyhibG9ja1BhdGgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVGhlcmUncyBubyBwcmV2aW91cyBibG9jayB0byBzZWxlY3RcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzQmxvY2tQYXRoID0gUGF0aC5wcmV2aW91cyhibG9ja1BhdGgpO1xuICAgIFRyYW5zZm9ybXMuc2VsZWN0KGFjdGlvbi5lZGl0b3IsIHByZXZpb3VzQmxvY2tQYXRoKTtcbiAgfSxcbiAgXCJzZWxlY3QubmV4dCBibG9ja1wiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBzZWxlY3QgbmV4dCBibG9jayB3aXRob3V0IGEgc2VsZWN0aW9uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZXh0QmxvY2tQYXRoID0gW2FjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSlbMF0gKyAxXTtcbiAgICBUcmFuc2Zvcm1zLnNlbGVjdChhY3Rpb24uZWRpdG9yLCBuZXh0QmxvY2tQYXRoKTtcbiAgfSxcbiAgXCJzdHlsZS50b2dnbGVcIjogdG9nZ2xlU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJzdHlsZS5hZGRcIjogYWRkU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJzdHlsZS5yZW1vdmVcIjogcmVtb3ZlU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJ0ZXh0IGJsb2NrLnNldFwiOiB0ZXh0QmxvY2tTZXRBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJ0ZXh0IGJsb2NrLnVuc2V0XCI6IHRleHRCbG9ja1Vuc2V0QWN0aW9uSW1wbGVtZW50YXRpb25cbn07XG5mdW5jdGlvbiBwZXJmb3JtQWN0aW9uKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi50b2dnbGVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJhbm5vdGF0aW9uLnRvZ2dsZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlY29yYXRvci5hZGRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWNvcmF0b3IuYWRkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVjb3JhdG9yLnJlbW92ZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlY29yYXRvci5yZW1vdmVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZWxldGUuYmxvY2tcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWxldGUuYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZWxldGUudGV4dFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlbGV0ZS50ZXh0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LnNwYW5cIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuc3BhblwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC50ZXh0IGJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnRleHQgYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJsaXN0IGl0ZW0uYWRkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibGlzdCBpdGVtLmFkZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImxpc3QgaXRlbS5yZW1vdmVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJsaXN0IGl0ZW0ucmVtb3ZlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibW92ZS5ibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcIm1vdmUuYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJtb3ZlLmJsb2NrIGRvd25cIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJtb3ZlLmJsb2NrIGRvd25cIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJtb3ZlLmJsb2NrIHVwXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibW92ZS5ibG9jayB1cFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcIm5vb3BcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJlZmZlY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMuZWZmZWN0KHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2VsZWN0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zLnNlbGVjdCh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInNlbGVjdC5wcmV2aW91cyBibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInNlbGVjdC5wcmV2aW91cyBibG9ja1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInNlbGVjdC5uZXh0IGJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic2VsZWN0Lm5leHQgYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzdHlsZS5hZGRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJzdHlsZS5hZGRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzdHlsZS5yZW1vdmVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJzdHlsZS5yZW1vdmVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJ0ZXh0IGJsb2NrLnNldFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInRleHQgYmxvY2suc2V0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwidGV4dCBibG9jay51bnNldFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInRleHQgYmxvY2sudW5zZXRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBwZXJmb3JtRGVmYXVsdEFjdGlvbih7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBlcmZvcm1EZWZhdWx0QWN0aW9uKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi5hZGRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJhbm5vdGF0aW9uLmFkZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImFubm90YXRpb24ucmVtb3ZlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiYW5ub3RhdGlvbi5yZW1vdmVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJibHVyXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zLmJsdXIoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZWNvcmF0b3IudG9nZ2xlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVjb3JhdG9yLnRvZ2dsZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlbGV0ZS5iYWNrd2FyZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlbGV0ZS5iYWNrd2FyZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlbGV0ZS5mb3J3YXJkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLmZvcndhcmRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmb2N1c1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9ucy5mb2N1cyh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC5ibG9jayBvYmplY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LmlubGluZSBvYmplY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC5icmVha1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5icmVha1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC5zb2Z0IGJyZWFrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnNvZnQgYnJlYWtcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQudGV4dFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC50ZXh0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibGlzdCBpdGVtLnRvZ2dsZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImxpc3QgaXRlbS50b2dnbGVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZWxlY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMuc2VsZWN0KHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJzdHlsZS50b2dnbGVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVEZWNvcmF0b3JzKHtcbiAgc2NoZW1hLFxuICBzbGF0ZUVkaXRvckluc3RhbmNlXG59KSB7XG4gIGNvbnN0IGRlY29yYXRvcnMgPSBzY2hlbWEuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlKTtcbiAgcmV0dXJuICh7XG4gICAgLi4uRWRpdG9yLm1hcmtzKHNsYXRlRWRpdG9ySW5zdGFuY2UpID8/IHt9XG4gIH0ubWFya3MgPz8gW10pLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSk7XG59XG5jb25zdCBlZGl0b3JNYWNoaW5lID0gc2V0dXAoe1xuICB0eXBlczoge1xuICAgIGNvbnRleHQ6IHt9LFxuICAgIGV2ZW50czoge30sXG4gICAgZW1pdHRlZDoge30sXG4gICAgaW5wdXQ6IHt9XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBcImFkZCBiZWhhdmlvciB0byBjb250ZXh0XCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiYWRkIGJlaGF2aW9yXCIpLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5iZWhhdmlvcnMsIGV2ZW50LmJlaGF2aW9yXSkpXG4gICAgfSksXG4gICAgXCJyZW1vdmUgYmVoYXZpb3IgZnJvbSBjb250ZXh0XCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwicmVtb3ZlIGJlaGF2aW9yXCIpLCBjb250ZXh0LmJlaGF2aW9ycy5kZWxldGUoZXZlbnQuYmVoYXZpb3IpLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5iZWhhdmlvcnNdKSlcbiAgICB9KSxcbiAgICBcImFzc2lnbiBiZWhhdmlvcnNcIjogYXNzaWduKHtcbiAgICAgIGJlaGF2aW9yczogKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJ1cGRhdGUgYmVoYXZpb3JzXCIpLCBuZXcgU2V0KGV2ZW50LmJlaGF2aW9ycykpXG4gICAgfSksXG4gICAgXCJhc3NpZ24gc2NoZW1hXCI6IGFzc2lnbih7XG4gICAgICBzY2hlbWE6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHNjaGVtYVwiKSwgZXZlbnQuc2NoZW1hKVxuICAgIH0pLFxuICAgIFwiZW1pdCBwYXRjaCBldmVudFwiOiBlbWl0KCh7XG4gICAgICBldmVudFxuICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJwYXRjaFwiKSwgZXZlbnQpKSxcbiAgICBcImVtaXQgbXV0YXRpb24gZXZlbnRcIjogZW1pdCgoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwibXV0YXRpb25cIiksIGV2ZW50KSksXG4gICAgXCJlbWl0IHJlYWQgb25seVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwicmVhZCBvbmx5XCJcbiAgICB9KSxcbiAgICBcImVtaXQgZWRpdGFibGVcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcImVkaXRhYmxlXCJcbiAgICB9KSxcbiAgICBcImRlZmVyIGV2ZW50XCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nRXZlbnRzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBbXCJwYXRjaFwiLCBcIm11dGF0aW9uXCJdKSwgWy4uLmNvbnRleHQucGVuZGluZ0V2ZW50cywgZXZlbnRdKVxuICAgIH0pLFxuICAgIFwiZW1pdCBwZW5kaW5nIGV2ZW50c1wiOiBlbnF1ZXVlQWN0aW9ucygoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGVucXVldWVcbiAgICB9KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGNvbnRleHQucGVuZGluZ0V2ZW50cylcbiAgICAgICAgZW5xdWV1ZShlbWl0KGV2ZW50KSk7XG4gICAgfSksXG4gICAgXCJlbWl0IHJlYWR5XCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJyZWFkeVwiXG4gICAgfSksXG4gICAgXCJjbGVhciBwZW5kaW5nIGV2ZW50c1wiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ0V2ZW50czogW11cbiAgICB9KSxcbiAgICBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiOiBlbnF1ZXVlQWN0aW9ucygoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50LFxuICAgICAgZW5xdWV1ZVxuICAgIH0pID0+IHtcbiAgICAgIGFzc2VydEV2ZW50KGV2ZW50LCBbXCJiZWhhdmlvciBldmVudFwiLCBcImN1c3RvbSBiZWhhdmlvciBldmVudFwiXSk7XG4gICAgICBjb25zdCBkZWZhdWx0QWN0aW9uID0gZXZlbnQudHlwZSA9PT0gXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwiY29weVwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJrZXkuZG93blwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJrZXkudXBcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwicGFzdGVcIiA/IHZvaWQgMCA6IHtcbiAgICAgICAgLi4uZXZlbnQuYmVoYXZpb3JFdmVudCxcbiAgICAgICAgZWRpdG9yOiBldmVudC5lZGl0b3JcbiAgICAgIH0sIGRlZmF1bHRBY3Rpb25DYWxsYmFjayA9IGV2ZW50LnR5cGUgPT09IFwiYmVoYXZpb3IgZXZlbnRcIiA/IGV2ZW50LmRlZmF1bHRBY3Rpb25DYWxsYmFjayA6IHZvaWQgMCwgZXZlbnRCZWhhdmlvcnMgPSBbLi4uY29udGV4dC5iZWhhdmlvcnMudmFsdWVzKCldLmZpbHRlcigoYmVoYXZpb3IpID0+IGJlaGF2aW9yLm9uID09PSBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUpO1xuICAgICAgaWYgKGV2ZW50QmVoYXZpb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoZGVmYXVsdEFjdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWN0aW9uQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgUGVyZm9ybWluZyBhY3Rpb24gXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWZhdWx0QWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwZXJmb3JtQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZGVmYXVsdEFjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZGVmYXVsdEFjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IGZyb21TbGF0ZVZhbHVlKGV2ZW50LmVkaXRvci5jaGlsZHJlbiwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGV2ZW50LmVkaXRvcikpLCBzZWxlY3Rpb24gPSB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCBldmVudC5lZGl0b3Iuc2VsZWN0aW9uLCBjb250ZXh0LnNjaGVtYSksIGVkaXRvckNvbnRleHQgPSB7XG4gICAgICAgIGFjdGl2ZURlY29yYXRvcnM6IGdldEFjdGl2ZURlY29yYXRvcnMoe1xuICAgICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWEsXG4gICAgICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZTogZXZlbnQuZWRpdG9yXG4gICAgICAgIH0pLFxuICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHZhbHVlXG4gICAgICB9O1xuICAgICAgbGV0IGJlaGF2aW9yT3ZlcndyaXR0ZW4gPSAhMTtcbiAgICAgIGZvciAoY29uc3QgZXZlbnRCZWhhdmlvciBvZiBldmVudEJlaGF2aW9ycykge1xuICAgICAgICBjb25zdCBzaG91bGRSdW4gPSBldmVudEJlaGF2aW9yLmd1YXJkID09PSB2b2lkIDAgfHwgZXZlbnRCZWhhdmlvci5ndWFyZCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yQ29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzaG91bGRSdW4pXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGFjdGlvbkludGVuZFNldHMgPSBldmVudEJlaGF2aW9yLmFjdGlvbnMubWFwKChhY3Rpb25TZXQpID0+IGFjdGlvblNldCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yQ29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9LCBzaG91bGRSdW4pKTtcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb25JbnRlbmRzIG9mIGFjdGlvbkludGVuZFNldHMpXG4gICAgICAgICAgYmVoYXZpb3JPdmVyd3JpdHRlbiA9IGJlaGF2aW9yT3ZlcndyaXR0ZW4gfHwgYWN0aW9uSW50ZW5kcy5sZW5ndGggPiAwICYmIGFjdGlvbkludGVuZHMuc29tZSgoYWN0aW9uSW50ZW5kKSA9PiBhY3Rpb25JbnRlbmQudHlwZSAhPT0gXCJlZmZlY3RcIiksIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgYWN0aW9uSW50ZW5kIG9mIGFjdGlvbkludGVuZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uSW50ZW5kLnR5cGUgPT09IFwicmFpc2VcIikge1xuICAgICAgICAgICAgICAgICAgaXNDdXN0b21CZWhhdmlvckV2ZW50KGFjdGlvbkludGVuZC5ldmVudCkgPyBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDogYWN0aW9uSW50ZW5kLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgICAgfSkgOiBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBhY3Rpb25JbnRlbmQuZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcjogZXZlbnQuZWRpdG9yXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAuLi5hY3Rpb25JbnRlbmQsXG4gICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHBlcmZvcm1BY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgUGVyZm9ybWluZyBhY3Rpb24gXCIke2FjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICBpZiAoYmVoYXZpb3JPdmVyd3JpdHRlbikge1xuICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50Py5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWJlaGF2aW9yT3ZlcndyaXR0ZW4pIHtcbiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb25DYWxsYmFjaykge1xuICAgICAgICAgIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjdGlvbkNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYFBlcmZvcm1pbmcgXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWZhdWx0QWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwZXJmb3JtQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZGVmYXVsdEFjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZGVmYXVsdEFjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJlZGl0b3JcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGJlaGF2aW9yczogbmV3IFNldChpbnB1dC5iZWhhdmlvcnMgPz8gY29yZUJlaGF2aW9ycyksXG4gICAga2V5R2VuZXJhdG9yOiBpbnB1dC5rZXlHZW5lcmF0b3IsXG4gICAgcGVuZGluZ0V2ZW50czogW10sXG4gICAgc2NoZW1hOiBpbnB1dC5zY2hlbWEsXG4gICAgc2VsZWN0aW9uOiBudWxsLFxuICAgIGluaXRpYWxSZWFkT25seTogaW5wdXQucmVhZE9ubHkgPz8gITEsXG4gICAgbWF4QmxvY2tzOiBpbnB1dC5tYXhCbG9ja3MsXG4gICAgdmFsdWU6IGlucHV0LnZhbHVlXG4gIH0pLFxuICBvbjoge1xuICAgIFwiYWRkIGJlaGF2aW9yXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYWRkIGJlaGF2aW9yIHRvIGNvbnRleHRcIlxuICAgIH0sXG4gICAgXCJyZW1vdmUgYmVoYXZpb3JcIjoge1xuICAgICAgYWN0aW9uczogXCJyZW1vdmUgYmVoYXZpb3IgZnJvbSBjb250ZXh0XCJcbiAgICB9LFxuICAgIHVuc2V0OiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIFwidmFsdWUgY2hhbmdlZFwiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIHNlbGVjdGlvbjoge1xuICAgICAgYWN0aW9uczogW2Fzc2lnbih7XG4gICAgICAgIHNlbGVjdGlvbjogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5zZWxlY3Rpb25cbiAgICAgIH0pLCBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudCldXG4gICAgfSxcbiAgICBibHVycmVkOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIGZvY3VzZWQ6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IGV2ZW50KVxuICAgIH0sXG4gICAgbG9hZGluZzoge1xuICAgICAgYWN0aW9uczogZW1pdCh7XG4gICAgICAgIHR5cGU6IFwibG9hZGluZ1wiXG4gICAgICB9KVxuICAgIH0sXG4gICAgcGF0Y2hlczoge1xuICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQpXG4gICAgfSxcbiAgICBcImRvbmUgbG9hZGluZ1wiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KHtcbiAgICAgICAgdHlwZTogXCJkb25lIGxvYWRpbmdcIlxuICAgICAgfSlcbiAgICB9LFxuICAgIFwidXBkYXRlIGJlaGF2aW9yc1wiOiB7XG4gICAgICBhY3Rpb25zOiBcImFzc2lnbiBiZWhhdmlvcnNcIlxuICAgIH0sXG4gICAgXCJ1cGRhdGUgc2NoZW1hXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYXNzaWduIHNjaGVtYVwiXG4gICAgfSxcbiAgICBcInVwZGF0ZSB2YWx1ZVwiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICB2YWx1ZTogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC52YWx1ZVxuICAgICAgfSlcbiAgICB9LFxuICAgIFwidXBkYXRlIG1heEJsb2Nrc1wiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBtYXhCbG9ja3M6ICh7XG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSkgPT4gZXZlbnQubWF4QmxvY2tzXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgdHlwZTogXCJwYXJhbGxlbFwiLFxuICBzdGF0ZXM6IHtcbiAgICBcImVkaXQgbW9kZVwiOiB7XG4gICAgICBpbml0aWFsOiBcInJlYWQgb25seVwiLFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIFwicmVhZCBvbmx5XCI6IHtcbiAgICAgICAgICBpbml0aWFsOiBcImRldGVybWluZSBpbml0aWFsIGVkaXQgbW9kZVwiLFxuICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgXCJkZXRlcm1pbmUgaW5pdGlhbCBlZGl0IG1vZGVcIjoge1xuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjogW3tcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5yZWFkIG9ubHkucmVhZCBvbmx5XCIsXG4gICAgICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgICAgfSkgPT4gY29udGV4dC5pbml0aWFsUmVhZE9ubHlcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUuZWRpdGFibGVcIlxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlYWQgb25seVwiOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgICAgICAgICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgICAgICB9KSA9PiAhZXZlbnQucmVhZE9ubHksXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUuZWRpdGFibGVcIixcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgZWRpdGFibGVcIl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRhYmxlOiB7XG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwidXBkYXRlIHJlYWRPbmx5XCI6IHtcbiAgICAgICAgICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQucmVhZE9ubHksXG4gICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5yZWFkIG9ubHkucmVhZCBvbmx5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgcmVhZCBvbmx5XCJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJiZWhhdmlvciBldmVudFwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiaGFuZGxlIGJlaGF2aW9yIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImN1c3RvbSBiZWhhdmlvciBldmVudFwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiaGFuZGxlIGJlaGF2aW9yIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFubm90YXRpb24uKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVyOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImN1c3RvbS4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20uKlwiLFxuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVjb3JhdG9yLipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaW5zZXJ0LipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsaXN0IGl0ZW0uKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic3R5bGUuKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwOiB7XG4gICAgICBpbml0aWFsOiBcInNldHRpbmcgdXBcIixcbiAgICAgIHN0YXRlczoge1xuICAgICAgICBcInNldHRpbmcgdXBcIjoge1xuICAgICAgICAgIGV4aXQ6IFtcImVtaXQgcmVhZHlcIl0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG11dGF0aW9uOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjoge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwicHJpc3RpbmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJpc3RpbmU6IHtcbiAgICAgICAgICBpbml0aWFsOiBcImlkbGVcIixcbiAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgIGlkbGU6IHtcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemluZzoge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCIsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5zZXR1cC5kaXJ0eVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3Iuc2V0dXAuZGlydHlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vcm1hbGl6aW5nOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJkb25lIG5vcm1hbGl6aW5nXCI6IHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJpZGxlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG11dGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpcnR5OiB7XG4gICAgICAgICAgZW50cnk6IFtcImVtaXQgcGVuZGluZyBldmVudHNcIiwgXCJjbGVhciBwZW5kaW5nIGV2ZW50c1wiXSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJlbWl0IHBhdGNoIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBcImVtaXQgbXV0YXRpb24gZXZlbnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5mdW5jdGlvbiBnZXRWYWx1ZSh7XG4gIGVkaXRvckFjdG9yU25hcHNob3QsXG4gIHNsYXRlRWRpdG9ySW5zdGFuY2Vcbn0pIHtcbiAgcmV0dXJuIGZyb21TbGF0ZVZhbHVlKHNsYXRlRWRpdG9ySW5zdGFuY2UuY2hpbGRyZW4sIGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KHNsYXRlRWRpdG9ySW5zdGFuY2UpKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5mdW5jdGlvbiB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9yLCB0MCkge1xuICBjb25zdCAkID0gYygzKSwgY29tcGFyZSA9IHQwID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcGFyZSA6IHQwO1xuICBsZXQgdDE7XG4gIHJldHVybiAkWzBdICE9PSBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlIHx8ICRbMV0gIT09IHNlbGVjdG9yID8gKHQxID0gKGVkaXRvckFjdG9yU25hcHNob3QpID0+IHtcbiAgICBjb25zdCBzbmFwc2hvdCA9IGdldEVkaXRvclNuYXBzaG90KHtcbiAgICAgIGVkaXRvckFjdG9yU25hcHNob3QsXG4gICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGVjdG9yKHNuYXBzaG90KTtcbiAgfSwgJFswXSA9IGVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5zdGFuY2UsICRbMV0gPSBzZWxlY3RvciwgJFsyXSA9IHQxKSA6IHQxID0gJFsyXSwgdXNlU2VsZWN0b3IoZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgdDEsIGNvbXBhcmUpO1xufVxuZnVuY3Rpb24gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICBzbGF0ZUVkaXRvckluc3RhbmNlXG59KSB7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDoge1xuICAgICAgYWN0aXZlRGVjb3JhdG9yczogZ2V0QWN0aXZlRGVjb3JhdG9ycyh7XG4gICAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3JTbmFwc2hvdC5jb250ZXh0LnNjaGVtYSxcbiAgICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZVxuICAgICAgfSksXG4gICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICBzY2hlbWE6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zY2hlbWEsXG4gICAgICBzZWxlY3Rpb246IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24sXG4gICAgICB2YWx1ZTogZ2V0VmFsdWUoe1xuICAgICAgICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlXG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn1cbmNvbnN0IGRlZmF1bHRLZXlHZW5lcmF0b3IgPSAoKSA9PiByYW5kb21LZXkoMTIpLCBnZXRCeXRlSGV4VGFibGUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHtcbiAgbGV0IHRhYmxlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICh0YWJsZSlcbiAgICAgIHJldHVybiB0YWJsZTtcbiAgICB0YWJsZSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpXG4gICAgICB0YWJsZVtpXSA9IChpICsgMjU2KS50b1N0cmluZygxNikuc2xpY2UoMSk7XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9O1xufSkoKTtcbmZ1bmN0aW9uIHdoYXR3Z1JORyhsZW5ndGggPSAxNikge1xuICBjb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpLCBybmRzODtcbn1cbmZ1bmN0aW9uIHJhbmRvbUtleShsZW5ndGgpIHtcbiAgY29uc3QgdGFibGUgPSBnZXRCeXRlSGV4VGFibGUoKTtcbiAgcmV0dXJuIHdoYXR3Z1JORyhsZW5ndGgpLnJlZHVjZSgoc3RyLCBuKSA9PiBzdHIgKyB0YWJsZVtuXSwgXCJcIikuc2xpY2UoMCwgbGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvcihjb25maWcpIHtcbiAgY29uc3QgZWRpdG9yQWN0b3IgPSBjcmVhdGVBY3RvcihlZGl0b3JNYWNoaW5lLCB7XG4gICAgaW5wdXQ6IGVkaXRvckNvbmZpZ1RvTWFjaGluZUlucHV0KGNvbmZpZylcbiAgfSk7XG4gIHJldHVybiBlZGl0b3JBY3Rvci5zdGFydCgpLCBjcmVhdGVFZGl0b3JGcm9tQWN0b3IoZWRpdG9yQWN0b3IpO1xufVxuZnVuY3Rpb24gdXNlQ3JlYXRlRWRpdG9yKGNvbmZpZykge1xuICBjb25zdCAkID0gYyg2KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBjb25maWcgPyAodDAgPSBlZGl0b3JDb25maWdUb01hY2hpbmVJbnB1dChjb25maWcpLCAkWzBdID0gY29uZmlnLCAkWzFdID0gdDApIDogdDAgPSAkWzFdO1xuICBsZXQgdDE7XG4gICRbMl0gIT09IHQwID8gKHQxID0ge1xuICAgIGlucHV0OiB0MFxuICB9LCAkWzJdID0gdDAsICRbM10gPSB0MSkgOiB0MSA9ICRbM107XG4gIGNvbnN0IGVkaXRvckFjdG9yID0gdXNlQWN0b3JSZWYoZWRpdG9yTWFjaGluZSwgdDEpO1xuICBsZXQgdDIsIHQzO1xuICByZXR1cm4gJFs0XSAhPT0gZWRpdG9yQWN0b3IgPyAodDMgPSBjcmVhdGVFZGl0b3JGcm9tQWN0b3IoZWRpdG9yQWN0b3IpLCAkWzRdID0gZWRpdG9yQWN0b3IsICRbNV0gPSB0MykgOiB0MyA9ICRbNV0sIHQyID0gdDMsIHQyO1xufVxuZnVuY3Rpb24gZWRpdG9yQ29uZmlnVG9NYWNoaW5lSW5wdXQoY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgYmVoYXZpb3JzOiBjb25maWcuYmVoYXZpb3JzLFxuICAgIGtleUdlbmVyYXRvcjogY29uZmlnLmtleUdlbmVyYXRvciA/PyBkZWZhdWx0S2V5R2VuZXJhdG9yLFxuICAgIG1heEJsb2NrczogY29uZmlnLm1heEJsb2NrcyxcbiAgICByZWFkT25seTogY29uZmlnLnJlYWRPbmx5LFxuICAgIHNjaGVtYTogY29uZmlnLnNjaGVtYURlZmluaXRpb24gPyBjb21waWxlU2NoZW1hRGVmaW5pdGlvbihjb25maWcuc2NoZW1hRGVmaW5pdGlvbikgOiBjcmVhdGVFZGl0b3JTY2hlbWEoY29uZmlnLnNjaGVtYS5oYXNPd25Qcm9wZXJ0eShcImpzb25UeXBlXCIpID8gY29uZmlnLnNjaGVtYSA6IGNvbXBpbGVUeXBlKGNvbmZpZy5zY2hlbWEpKSxcbiAgICB2YWx1ZTogY29uZmlnLmluaXRpYWxWYWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRWRpdG9yRnJvbUFjdG9yKGVkaXRvckFjdG9yKSB7XG4gIGNvbnN0IHNsYXRlRWRpdG9yID0gY3JlYXRlU2xhdGVFZGl0b3Ioe1xuICAgIGVkaXRvckFjdG9yXG4gIH0pLCBlZGl0YWJsZSA9IGNyZWF0ZUVkaXRhYmxlQVBJKHNsYXRlRWRpdG9yLmluc3RhbmNlLCBlZGl0b3JBY3Rvcik7XG4gIHJldHVybiB7XG4gICAgZ2V0U25hcHNob3Q6ICgpID0+IGdldEVkaXRvclNuYXBzaG90KHtcbiAgICAgIGVkaXRvckFjdG9yU25hcHNob3Q6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksXG4gICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBzbGF0ZUVkaXRvci5pbnN0YW5jZVxuICAgIH0pLFxuICAgIHJlZ2lzdGVyQmVoYXZpb3I6IChjb25maWcpID0+IChlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYWRkIGJlaGF2aW9yXCIsXG4gICAgICBiZWhhdmlvcjogY29uZmlnLmJlaGF2aW9yXG4gICAgfSksICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcInJlbW92ZSBiZWhhdmlvclwiLFxuICAgICAgICBiZWhhdmlvcjogY29uZmlnLmJlaGF2aW9yXG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBzZW5kOiAoZXZlbnQpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoZXZlbnQpO1xuICAgIH0sXG4gICAgb246IChldmVudCwgbGlzdGVuZXIpID0+IGVkaXRvckFjdG9yLm9uKFxuICAgICAgZXZlbnQsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICBsaXN0ZW5lclxuICAgICksXG4gICAgX2ludGVybmFsOiB7XG4gICAgICBlZGl0YWJsZSxcbiAgICAgIGVkaXRvckFjdG9yLFxuICAgICAgc2xhdGVFZGl0b3JcbiAgICB9XG4gIH07XG59XG5jb25zdCBFZGl0b3JBY3RvckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KSwgUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCksIHVzZVBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvbiA9ICgpID0+IHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udGV4dChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0KTtcbiAgaWYgKHNlbGVjdGlvbiA9PT0gdm9pZCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdXNlUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uYCBob29rIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxQb3J0YWJsZVRleHRFZGl0b3I+IGNvbXBvbmVudCdzIGNvbnRleHQuXCIpO1xuICByZXR1cm4gc2VsZWN0aW9uO1xufSwgZGVidWckNSA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlNlbGVjdGlvblByb3ZpZGVyXCIpO1xuZnVuY3Rpb24gUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNiksIFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgbGV0IHQwLCB0MTtcbiAgJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDAgPSAoKSA9PiB7XG4gICAgZGVidWckNShcIlN1YnNjcmliaW5nIHRvIHNlbGVjdGlvbiBjaGFuZ2VzXCIpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHByb3BzLmVkaXRvckFjdG9yLm9uKFwic2VsZWN0aW9uXCIsIChldmVudCkgPT4ge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0aW9uKGV2ZW50LnNlbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVidWckNShcIlVuc3Vic2NyaWJpbmcgdG8gc2VsZWN0aW9uIGNoYW5nZXNcIiksIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxID0gW3Byb3BzLmVkaXRvckFjdG9yXSwgJFswXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzFdID0gdDAsICRbMl0gPSB0MSkgOiAodDAgPSAkWzFdLCB0MSA9ICRbMl0pLCB1c2VFZmZlY3QodDAsIHQxKTtcbiAgbGV0IHQyO1xuICByZXR1cm4gJFszXSAhPT0gcHJvcHMuY2hpbGRyZW4gfHwgJFs0XSAhPT0gc2VsZWN0aW9uID8gKHQyID0gLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBzZWxlY3Rpb24sIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFszXSA9IHByb3BzLmNoaWxkcmVuLCAkWzRdID0gc2VsZWN0aW9uLCAkWzVdID0gdDIpIDogdDIgPSAkWzVdLCB0Mjtcbn1cbmNvbnN0IGRlYnVnJDQgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50OlBvcnRhYmxlVGV4dEVkaXRvclwiKTtcbmNsYXNzIFBvcnRhYmxlVGV4dEVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9IFwiUG9ydGFibGVUZXh0RWRpdG9yXCI7XG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIG9mIGFsbCB0aGUgZWRpdG9yIGNoYW5nZXMuXG4gICAqL1xuICBjaGFuZ2UkID0gbmV3IFN1YmplY3QoKTtcbiAgLyoqXG4gICAqIEEgbG9va3VwIHRhYmxlIGZvciBhbGwgdGhlIHJlbGV2YW50IHNjaGVtYSB0eXBlcyBmb3IgdGhpcyBwb3J0YWJsZSB0ZXh0IHR5cGUuXG4gICAqL1xuICAvKipcbiAgICogVGhlIGVkaXRvciBpbnN0YW5jZVxuICAgKi9cbiAgLypcbiAgICogVGhlIGVkaXRvciBBUEkgKGN1cnJlbnRseSBpbXBsZW1lbnRlZCB3aXRoIFNsYXRlKS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpLCBwcm9wcy5lZGl0b3IgPyB0aGlzLmVkaXRvciA9IHByb3BzLmVkaXRvciA6IHRoaXMuZWRpdG9yID0gY3JlYXRlRWRpdG9yKHtcbiAgICAgIGtleUdlbmVyYXRvcjogcHJvcHMua2V5R2VuZXJhdG9yID8/IGRlZmF1bHRLZXlHZW5lcmF0b3IsXG4gICAgICBzY2hlbWE6IHByb3BzLnNjaGVtYVR5cGUsXG4gICAgICBpbml0aWFsVmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgbWF4QmxvY2tzOiBwcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludChwcm9wcy5tYXhCbG9ja3MudG9TdHJpbmcoKSwgMTApLFxuICAgICAgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5XG4gICAgfSksIHRoaXMuc2NoZW1hVHlwZXMgPSB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSwgdGhpcy5lZGl0YWJsZSA9IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZTtcbiAgfVxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgIXRoaXMucHJvcHMuZWRpdG9yICYmICFwcmV2UHJvcHMuZWRpdG9yICYmIHRoaXMucHJvcHMuc2NoZW1hVHlwZSAhPT0gcHJldlByb3BzLnNjaGVtYVR5cGUgJiYgKHRoaXMuc2NoZW1hVHlwZXMgPSBjcmVhdGVFZGl0b3JTY2hlbWEodGhpcy5wcm9wcy5zY2hlbWFUeXBlLmhhc093blByb3BlcnR5KFwianNvblR5cGVcIikgPyB0aGlzLnByb3BzLnNjaGVtYVR5cGUgOiBjb21waWxlVHlwZSh0aGlzLnByb3BzLnNjaGVtYVR5cGUpKSwgdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgc2NoZW1hXCIsXG4gICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hVHlwZXNcbiAgICB9KSksICF0aGlzLnByb3BzLmVkaXRvciAmJiAhcHJldlByb3BzLmVkaXRvciAmJiAodGhpcy5wcm9wcy5yZWFkT25seSAhPT0gcHJldlByb3BzLnJlYWRPbmx5ICYmIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHJlYWRPbmx5XCIsXG4gICAgICByZWFkT25seTogdGhpcy5wcm9wcy5yZWFkT25seSA/PyAhMVxuICAgIH0pLCB0aGlzLnByb3BzLm1heEJsb2NrcyAhPT0gcHJldlByb3BzLm1heEJsb2NrcyAmJiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSBtYXhCbG9ja3NcIixcbiAgICAgIG1heEJsb2NrczogdGhpcy5wcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludCh0aGlzLnByb3BzLm1heEJsb2Nrcy50b1N0cmluZygpLCAxMClcbiAgICB9KSwgdGhpcy5wcm9wcy52YWx1ZSAhPT0gcHJldlByb3BzLnZhbHVlICYmIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHZhbHVlXCIsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxuICAgIH0pLCB0aGlzLnByb3BzLmVkaXRvclJlZiAhPT0gcHJldlByb3BzLmVkaXRvclJlZiAmJiB0aGlzLnByb3BzLmVkaXRvclJlZiAmJiAodGhpcy5wcm9wcy5lZGl0b3JSZWYuY3VycmVudCA9IHRoaXMpKTtcbiAgfVxuICBzZXRFZGl0YWJsZSA9IChlZGl0YWJsZSkgPT4ge1xuICAgIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSA9IHtcbiAgICAgIC4uLnRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSxcbiAgICAgIC4uLmVkaXRhYmxlXG4gICAgfTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGxlZ2FjeVBhdGNoZXMgPSB0aGlzLnByb3BzLmVkaXRvciA/IHZvaWQgMCA6IHRoaXMucHJvcHMuaW5jb21pbmdQYXRjaGVzJCA/PyB0aGlzLnByb3BzLnBhdGNoZXMkO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogW1xuICAgICAgbGVnYWN5UGF0Y2hlcyA/IC8qIEBfX1BVUkVfXyAqLyBqc3goUm91dGVQYXRjaGVzT2JzZXJ2YWJsZVRvRWRpdG9yQWN0b3IsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgcGF0Y2hlcyQ6IGxlZ2FjeVBhdGNoZXMgfSkgOiBudWxsLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChSb3V0ZUV2ZW50c1RvQ2hhbmdlcywgeyBlZGl0b3JBY3RvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBvbkNoYW5nZTogKGNoYW5nZSkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmVkaXRvciB8fCB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSksIHRoaXMuY2hhbmdlJC5uZXh0KGNoYW5nZSk7XG4gICAgICB9IH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChTeW5jaHJvbml6ZXIsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZSB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goRWRpdG9yQWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFNsYXRlLCB7IGVkaXRvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlLCBpbml0aWFsVmFsdWU6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbml0aWFsVmFsdWUsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvblByb3ZpZGVyLCB7IGVkaXRvckFjdG9yOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pIH0pIH0pIH0pXG4gICAgXSB9KTtcbiAgfVxuICAvLyBTdGF0aWMgQVBJIG1ldGhvZHNcbiAgc3RhdGljIGFjdGl2ZUFubm90YXRpb25zID0gKGVkaXRvcikgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5hY3RpdmVBbm5vdGF0aW9ucygpIDogW107XG4gIHN0YXRpYyBpc0Fubm90YXRpb25BY3RpdmUgPSAoZWRpdG9yLCBhbm5vdGF0aW9uVHlwZSkgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5pc0Fubm90YXRpb25BY3RpdmUoYW5ub3RhdGlvblR5cGUpIDogITE7XG4gIHN0YXRpYyBhZGRBbm5vdGF0aW9uID0gKGVkaXRvciwgdHlwZSwgdmFsdWUpID0+IGVkaXRvci5lZGl0YWJsZT8uYWRkQW5ub3RhdGlvbih0eXBlLCB2YWx1ZSk7XG4gIHN0YXRpYyBibHVyID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IGJsdXJyZWRcIiksIGVkaXRvci5lZGl0YWJsZT8uYmx1cigpO1xuICB9O1xuICBzdGF0aWMgZGVsZXRlID0gKGVkaXRvciwgc2VsZWN0aW9uLCBvcHRpb25zKSA9PiBlZGl0b3IuZWRpdGFibGU/LmRlbGV0ZShzZWxlY3Rpb24sIG9wdGlvbnMpO1xuICBzdGF0aWMgZmluZERPTU5vZGUgPSAoZWRpdG9yLCBlbGVtZW50KSA9PiBlZGl0b3IuZWRpdGFibGU/LmZpbmRET01Ob2RlKGVsZW1lbnQpO1xuICBzdGF0aWMgZmluZEJ5UGF0aCA9IChlZGl0b3IsIHBhdGgpID0+IGVkaXRvci5lZGl0YWJsZT8uZmluZEJ5UGF0aChwYXRoKSB8fCBbXTtcbiAgc3RhdGljIGZvY3VzID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHJlcXVlc3RpbmcgZm9jdXNcIiksIGVkaXRvci5lZGl0YWJsZT8uZm9jdXMoKTtcbiAgfTtcbiAgc3RhdGljIGZvY3VzQmxvY2sgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQmxvY2soKTtcbiAgc3RhdGljIGZvY3VzQ2hpbGQgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQ2hpbGQoKTtcbiAgc3RhdGljIGdldFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5nZXRTZWxlY3Rpb24oKSA6IG51bGw7XG4gIHN0YXRpYyBnZXRWYWx1ZSA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uZ2V0VmFsdWUoKTtcbiAgc3RhdGljIGhhc0Jsb2NrU3R5bGUgPSAoZWRpdG9yLCBibG9ja1N0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0Jsb2NrU3R5bGUoYmxvY2tTdHlsZSk7XG4gIHN0YXRpYyBoYXNMaXN0U3R5bGUgPSAoZWRpdG9yLCBsaXN0U3R5bGUpID0+IGVkaXRvci5lZGl0YWJsZT8uaGFzTGlzdFN0eWxlKGxpc3RTdHlsZSk7XG4gIHN0YXRpYyBpc0NvbGxhcHNlZFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNDb2xsYXBzZWRTZWxlY3Rpb24oKTtcbiAgc3RhdGljIGlzRXhwYW5kZWRTZWxlY3Rpb24gPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzRXhwYW5kZWRTZWxlY3Rpb24oKTtcbiAgc3RhdGljIGlzTWFya0FjdGl2ZSA9IChlZGl0b3IsIG1hcmspID0+IGVkaXRvci5lZGl0YWJsZT8uaXNNYXJrQWN0aXZlKG1hcmspO1xuICBzdGF0aWMgaW5zZXJ0Q2hpbGQgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gKGRlYnVnJDQoXCJIb3N0IGluc2VydGluZyBjaGlsZFwiKSwgZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRDaGlsZCh0eXBlLCB2YWx1ZSkpO1xuICBzdGF0aWMgaW5zZXJ0QmxvY2sgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRCbG9jayh0eXBlLCB2YWx1ZSk7XG4gIHN0YXRpYyBpbnNlcnRCcmVhayA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaW5zZXJ0QnJlYWsoKTtcbiAgc3RhdGljIGlzVm9pZCA9IChlZGl0b3IsIGVsZW1lbnQpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNWb2lkKGVsZW1lbnQpO1xuICBzdGF0aWMgaXNPYmplY3RQYXRoID0gKF9lZGl0b3IsIHBhdGgpID0+IHtcbiAgICBpZiAoIXBhdGggfHwgIUFycmF5LmlzQXJyYXkocGF0aCkpIHJldHVybiAhMTtcbiAgICBjb25zdCBpc0NoaWxkT2JqZWN0RWRpdFBhdGggPSBwYXRoLmxlbmd0aCA+IDMgJiYgcGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiO1xuICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aFsxXSAhPT0gXCJjaGlsZHJlblwiIHx8IGlzQ2hpbGRPYmplY3RFZGl0UGF0aDtcbiAgfTtcbiAgc3RhdGljIG1hcmtzID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5tYXJrcygpO1xuICBzdGF0aWMgc2VsZWN0ID0gKGVkaXRvciwgc2VsZWN0aW9uKSA9PiB7XG4gICAgZGVidWckNChcIkhvc3Qgc2V0dGluZyBzZWxlY3Rpb25cIiwgc2VsZWN0aW9uKSwgZWRpdG9yLmVkaXRhYmxlPy5zZWxlY3Qoc2VsZWN0aW9uKTtcbiAgfTtcbiAgc3RhdGljIHJlbW92ZUFubm90YXRpb24gPSAoZWRpdG9yLCB0eXBlKSA9PiBlZGl0b3IuZWRpdGFibGU/LnJlbW92ZUFubm90YXRpb24odHlwZSk7XG4gIHN0YXRpYyB0b2dnbGVCbG9ja1N0eWxlID0gKGVkaXRvciwgYmxvY2tTdHlsZSkgPT4gKGRlYnVnJDQoXCJIb3N0IGlzIHRvZ2dsaW5nIGJsb2NrIHN0eWxlXCIpLCBlZGl0b3IuZWRpdGFibGU/LnRvZ2dsZUJsb2NrU3R5bGUoYmxvY2tTdHlsZSkpO1xuICBzdGF0aWMgdG9nZ2xlTGlzdCA9IChlZGl0b3IsIGxpc3RTdHlsZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy50b2dnbGVMaXN0KGxpc3RTdHlsZSk7XG4gIHN0YXRpYyB0b2dnbGVNYXJrID0gKGVkaXRvciwgbWFyaykgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHRvZ2dsaW5nIG1hcmtcIiwgbWFyayksIGVkaXRvci5lZGl0YWJsZT8udG9nZ2xlTWFyayhtYXJrKTtcbiAgfTtcbiAgc3RhdGljIGdldEZyYWdtZW50ID0gKGVkaXRvcikgPT4gKGRlYnVnJDQoXCJIb3N0IGdldHRpbmcgZnJhZ21lbnRcIiksIGVkaXRvci5lZGl0YWJsZT8uZ2V0RnJhZ21lbnQoKSk7XG4gIHN0YXRpYyB1bmRvID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHVuZG9pbmdcIiksIGVkaXRvci5lZGl0YWJsZT8udW5kbygpO1xuICB9O1xuICBzdGF0aWMgcmVkbyA9IChlZGl0b3IpID0+IHtcbiAgICBkZWJ1ZyQ0KFwiSG9zdCByZWRvaW5nXCIpLCBlZGl0b3IuZWRpdGFibGU/LnJlZG8oKTtcbiAgfTtcbiAgc3RhdGljIGlzU2VsZWN0aW9uc092ZXJsYXBwaW5nID0gKGVkaXRvciwgc2VsZWN0aW9uQSwgc2VsZWN0aW9uQikgPT4gZWRpdG9yLmVkaXRhYmxlPy5pc1NlbGVjdGlvbnNPdmVybGFwcGluZyhzZWxlY3Rpb25BLCBzZWxlY3Rpb25CKTtcbn1cbmZ1bmN0aW9uIFJvdXRlUGF0Y2hlc09ic2VydmFibGVUb0VkaXRvckFjdG9yKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDQpO1xuICBsZXQgdDAsIHQxO1xuICByZXR1cm4gJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgfHwgJFsxXSAhPT0gcHJvcHMucGF0Y2hlcyQgPyAodDAgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gcHJvcHMucGF0Y2hlcyQuc3Vic2NyaWJlKChwYXlsb2FkKSA9PiB7XG4gICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJwYXRjaGVzXCIsXG4gICAgICAgIC4uLnBheWxvYWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MSA9IFtwcm9wcy5lZGl0b3JBY3RvciwgcHJvcHMucGF0Y2hlcyRdLCAkWzBdID0gcHJvcHMuZWRpdG9yQWN0b3IsICRbMV0gPSBwcm9wcy5wYXRjaGVzJCwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5mdW5jdGlvbiBSb3V0ZUV2ZW50c1RvQ2hhbmdlcyhwcm9wcykge1xuICBjb25zdCAkID0gYyg2KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcyA/ICh0MCA9IChjaGFuZ2UpID0+IHByb3BzLm9uQ2hhbmdlKGNoYW5nZSksICRbMF0gPSBwcm9wcywgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlRWZmZWN0RXZlbnQodDApO1xuICBsZXQgdDEsIHQyO1xuICByZXR1cm4gJFsyXSAhPT0gaGFuZGxlQ2hhbmdlIHx8ICRbM10gIT09IHByb3BzLmVkaXRvckFjdG9yID8gKHQxID0gKCkgPT4ge1xuICAgIGRlYnVnJDQoXCJTdWJzY3JpYmluZyB0byBlZGl0b3IgY2hhbmdlc1wiKTtcbiAgICBjb25zdCBzdWIgPSBwcm9wcy5lZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBiYjU6IHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwiYmx1cnJlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYmx1clwiLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LmV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwYXRjaFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImxvYWRpbmdcIjoge1xuICAgICAgICAgIGhhbmRsZUNoYW5nZSh7XG4gICAgICAgICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICAgIGlzTG9hZGluZzogITBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImRvbmUgbG9hZGluZ1wiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiAhMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZm9jdXNlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZm9jdXNcIixcbiAgICAgICAgICAgIGV2ZW50OiBldmVudC5ldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidmFsdWUgY2hhbmdlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwidmFsdWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBldmVudC52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW52YWxpZFZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBldmVudC5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLmV2ZW50LFxuICAgICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlYWR5XCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic2VsZWN0aW9uXCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJ1ZyQ0KFwiVW5zdWJzY3JpYmluZyB0byBjaGFuZ2VzXCIpLCBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MiA9IFtwcm9wcy5lZGl0b3JBY3RvciwgaGFuZGxlQ2hhbmdlXSwgJFsyXSA9IGhhbmRsZUNoYW5nZSwgJFszXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzRdID0gdDEsICRbNV0gPSB0MikgOiAodDEgPSAkWzRdLCB0MiA9ICRbNV0pLCB1c2VFZmZlY3QodDEsIHQyKSwgbnVsbDtcbn1cbmNvbnN0IGRlYnVnJDMgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50czpMZWFmXCIpLCBFTVBUWV9NQVJLUyA9IFtdLCBMZWFmID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuLFxuICAgIGxlYWYsXG4gICAgc2NoZW1hVHlwZXMsXG4gICAgcmVuZGVyQ2hpbGQsXG4gICAgcmVuZGVyRGVjb3JhdG9yLFxuICAgIHJlbmRlckFubm90YXRpb25cbiAgfSA9IHByb3BzLCBzcGFuUmVmID0gdXNlUmVmKG51bGwpLCBwb3J0YWJsZVRleHRFZGl0b3IgPSB1c2VQb3J0YWJsZVRleHRFZGl0b3IoKSwgYmxvY2tTZWxlY3RlZCA9IHVzZVNlbGVjdGVkKCksIFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IHVzZVN0YXRlKCExKSwgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZSghMSksIGJsb2NrID0gY2hpbGRyZW4ucHJvcHMucGFyZW50LCBwYXRoID0gdXNlTWVtbygoKSA9PiBibG9jayA/IFt7XG4gICAgX2tleTogYmxvY2s/Ll9rZXlcbiAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgX2tleTogbGVhZi5fa2V5XG4gIH1dIDogW10sIFtibG9jaywgbGVhZi5fa2V5XSksIGRlY29yYXRvclZhbHVlcyA9IHVzZU1lbW8oKCkgPT4gc2NoZW1hVHlwZXMuZGVjb3JhdG9ycy5tYXAoKGRlYykgPT4gZGVjLnZhbHVlKSwgW3NjaGVtYVR5cGVzLmRlY29yYXRvcnNdKSwgbWFya3MgPSB1c2VNZW1vKCgpID0+IHVuaXEoKGxlYWYubWFya3MgfHwgRU1QVFlfTUFSS1MpLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9yVmFsdWVzLmluY2x1ZGVzKG1hcmspKSksIFtkZWNvcmF0b3JWYWx1ZXMsIGxlYWYubWFya3NdKSwgYW5ub3RhdGlvbk1hcmtzID0gQXJyYXkuaXNBcnJheShsZWFmLm1hcmtzKSA/IGxlYWYubWFya3MgOiBFTVBUWV9NQVJLUywgYW5ub3RhdGlvbnMgPSB1c2VNZW1vKCgpID0+IGFubm90YXRpb25NYXJrcy5tYXAoKG1hcmtfMCkgPT4gIWRlY29yYXRvclZhbHVlcy5pbmNsdWRlcyhtYXJrXzApICYmIGJsb2NrPy5tYXJrRGVmcz8uZmluZCgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFya18wKSkuZmlsdGVyKEJvb2xlYW4pLCBbYW5ub3RhdGlvbk1hcmtzLCBibG9jaywgZGVjb3JhdG9yVmFsdWVzXSksIHNob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXMgPSBhbm5vdGF0aW9ucy5sZW5ndGggPiAwICYmIGJsb2NrU2VsZWN0ZWQ7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKSB7XG4gICAgICBzZXRGb2N1c2VkKCExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgIHNlbCAmJiBpc0VxdWFsKHNlbC5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSAmJiBzdGFydFRyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZCghMCk7XG4gICAgfSk7XG4gIH0sIFtzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzLCBwYXRoLCBwb3J0YWJsZVRleHRFZGl0b3JdKTtcbiAgY29uc3Qgc2V0U2VsZWN0ZWRGcm9tUmFuZ2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKVxuICAgICAgcmV0dXJuO1xuICAgIGRlYnVnJDMoXCJTZXR0aW5nIHNlbGVjdGlvbiBhbmQgZm9jdXMgZnJvbSByYW5nZVwiKTtcbiAgICBjb25zdCB3aW5TZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCF3aW5TZWxlY3Rpb24pIHtcbiAgICAgIHNldFNlbGVjdGVkKCExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdpblNlbGVjdGlvbiAmJiB3aW5TZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gd2luU2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICBzcGFuUmVmLmN1cnJlbnQgJiYgcmFuZ2UuaW50ZXJzZWN0c05vZGUoc3BhblJlZi5jdXJyZW50KSA/IHNldFNlbGVjdGVkKCEwKSA6IHNldFNlbGVjdGVkKCExKTtcbiAgICB9IGVsc2VcbiAgICAgIHNldFNlbGVjdGVkKCExKTtcbiAgfSwgW3Nob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXNdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXMpXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgb25CbHVyID0gZWRpdG9yQWN0b3Iub24oXCJibHVyXCIsICgpID0+IHtcbiAgICAgIHNldEZvY3VzZWQoITEpLCBzZXRTZWxlY3RlZCghMSk7XG4gICAgfSksIG9uRm9jdXMgPSBlZGl0b3JBY3Rvci5vbihcImZvY3VzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlbF8wID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgc2VsXzAgJiYgaXNFcXVhbChzZWxfMC5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSAmJiBzZXRGb2N1c2VkKCEwKSwgc2V0U2VsZWN0ZWRGcm9tUmFuZ2UoKTtcbiAgICB9KSwgb25TZWxlY3Rpb24gPSBlZGl0b3JBY3Rvci5vbihcInNlbGVjdGlvblwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnNlbGVjdGlvbiAmJiBpc0VxdWFsKGV2ZW50LnNlbGVjdGlvbi5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSA/IHNldEZvY3VzZWQoITApIDogc2V0Rm9jdXNlZCghMSksIHNldFNlbGVjdGVkRnJvbVJhbmdlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG9uQmx1ci51bnN1YnNjcmliZSgpLCBvbkZvY3VzLnVuc3Vic2NyaWJlKCksIG9uU2VsZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2VkaXRvckFjdG9yLCBwYXRoLCBwb3J0YWJsZVRleHRFZGl0b3IsIHNldFNlbGVjdGVkRnJvbVJhbmdlLCBzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzXSksIHVzZUVmZmVjdCgoKSA9PiBzZXRTZWxlY3RlZEZyb21SYW5nZSgpLCBbc2V0U2VsZWN0ZWRGcm9tUmFuZ2VdKTtcbiAgY29uc3QgY29udGVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCByZXR1cm5lZENoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgaWYgKFRleHQuaXNUZXh0KGxlYWYpICYmIGxlYWYuX3R5cGUgPT09IHNjaGVtYVR5cGVzLnNwYW4ubmFtZSAmJiAobWFya3MuZm9yRWFjaCgobWFya18xKSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWFUeXBlID0gc2NoZW1hVHlwZXMuZGVjb3JhdG9ycy5maW5kKChkZWNfMCkgPT4gZGVjXzAudmFsdWUgPT09IG1hcmtfMSk7XG4gICAgICBpZiAoc2NoZW1hVHlwZSAmJiByZW5kZXJEZWNvcmF0b3IpIHtcbiAgICAgICAgY29uc3QgX3Byb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICBjaGlsZHJlbjogcmV0dXJuZWRDaGlsZHJlbixcbiAgICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBzcGFuUmVmLFxuICAgICAgICAgIGZvY3VzZWQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICBzY2hlbWFUeXBlLFxuICAgICAgICAgIHZhbHVlOiBtYXJrXzFcbiAgICAgICAgfSwgXCJ0eXBlXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ3R5cGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnc2NoZW1hVHlwZScgaW5zdGVhZC5cIiksIHNjaGVtYVR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuZWRDaGlsZHJlbiA9IHJlbmRlckRlY29yYXRvcihfcHJvcHMpO1xuICAgICAgfVxuICAgIH0pLCBibG9jayAmJiBhbm5vdGF0aW9ucy5sZW5ndGggPiAwICYmIGFubm90YXRpb25zLmZvckVhY2goKGFubm90YXRpb24pID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYVR5cGVfMCA9IHNjaGVtYVR5cGVzLmFubm90YXRpb25zLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gYW5ub3RhdGlvbi5fdHlwZSk7XG4gICAgICBpZiAoc2NoZW1hVHlwZV8wKVxuICAgICAgICBpZiAocmVuZGVyQW5ub3RhdGlvbikge1xuICAgICAgICAgIGNvbnN0IF9wcm9wc18wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgY2hpbGRyZW46IHJldHVybmVkQ2hpbGRyZW4sXG4gICAgICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBzcGFuUmVmLFxuICAgICAgICAgICAgZm9jdXNlZCxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgIHNjaGVtYVR5cGU6IHNjaGVtYVR5cGVfMCxcbiAgICAgICAgICAgIHZhbHVlOiBhbm5vdGF0aW9uXG4gICAgICAgICAgfSwgXCJ0eXBlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ3R5cGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnc2NoZW1hVHlwZScgaW5zdGVhZC5cIiksIHNjaGVtYVR5cGVfMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm5lZENoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIGpzeChcInNwYW5cIiwgeyByZWY6IHNwYW5SZWYsIGNoaWxkcmVuOiByZW5kZXJBbm5vdGF0aW9uKF9wcm9wc18wKSB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmV0dXJuZWRDaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBqc3goRGVmYXVsdEFubm90YXRpb24sIHsgYW5ub3RhdGlvbiwgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJzcGFuXCIsIHsgcmVmOiBzcGFuUmVmLCBjaGlsZHJlbjogcmV0dXJuZWRDaGlsZHJlbiB9KSB9KTtcbiAgICB9KSwgYmxvY2sgJiYgcmVuZGVyQ2hpbGQpKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGJsb2NrLmNoaWxkcmVuLmZpbmQoKF9jaGlsZCkgPT4gX2NoaWxkLl9rZXkgPT09IGxlYWYuX2tleSk7XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgY29uc3QgX3Byb3BzXzEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICAgIGFubm90YXRpb25zLFxuICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KEZyYWdtZW50LCB7IGNoaWxkcmVuOiByZXR1cm5lZENoaWxkcmVuIH0pLFxuICAgICAgICAgIGVkaXRvckVsZW1lbnRSZWY6IHNwYW5SZWYsXG4gICAgICAgICAgZm9jdXNlZCxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHNjaGVtYVR5cGU6IHNjaGVtYVR5cGVzLnNwYW4sXG4gICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICAgdmFsdWU6IGNoaWxkXG4gICAgICAgIH0sIFwidHlwZVwiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcIlByb3BlcnR5ICd0eXBlJyBpcyBkZXByZWNhdGVkLCB1c2UgJ3NjaGVtYVR5cGUnIGluc3RlYWQuXCIpLCBzY2hlbWFUeXBlcy5zcGFuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybmVkQ2hpbGRyZW4gPSByZW5kZXJDaGlsZChfcHJvcHNfMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5lZENoaWxkcmVuO1xuICB9LCBbYW5ub3RhdGlvbnMsIGJsb2NrLCBjaGlsZHJlbiwgZm9jdXNlZCwgbGVhZiwgbWFya3MsIHBhdGgsIHJlbmRlckFubm90YXRpb24sIHJlbmRlckNoaWxkLCByZW5kZXJEZWNvcmF0b3IsIHNjaGVtYVR5cGVzLmFubm90YXRpb25zLCBzY2hlbWFUeXBlcy5kZWNvcmF0b3JzLCBzY2hlbWFUeXBlcy5zcGFuLCBzZWxlY3RlZF0pO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IC4uLmF0dHJpYnV0ZXMsIHJlZjogc3BhblJlZiwgY2hpbGRyZW46IGNvbnRlbnQgfSwgbGVhZi5fa2V5KSwgW2xlYWYsIGF0dHJpYnV0ZXMsIGNvbnRlbnRdKTtcbn07XG5MZWFmLmRpc3BsYXlOYW1lID0gXCJMZWFmXCI7XG5jb25zdCBkZWJ1ZyQyID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoSG90S2V5c1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhIb3RrZXlzKGVkaXRvckFjdG9yLCBwb3J0YWJsZVRleHRFZGl0b3IsIGhvdGtleXNGcm9tT3B0aW9ucykge1xuICBjb25zdCByZXNlcnZlZEhvdGtleXMgPSBbXCJlbnRlclwiLCBcInRhYlwiLCBcInNoaWZ0XCIsIFwiZGVsZXRlXCIsIFwiZW5kXCJdLCBhY3RpdmVIb3RrZXlzID0gaG90a2V5c0Zyb21PcHRpb25zID8/IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5wdGVXaXRoSG90S2V5cyA9IChldmVudCkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMoYWN0aXZlSG90a2V5cykuZm9yRWFjaCgoY2F0KSA9PiB7XG4gICAgICAgIGlmIChjYXQgPT09IFwibWFya3NcIilcbiAgICAgICAgICBmb3IgKGNvbnN0IGhvdGtleSBpbiBhY3RpdmVIb3RrZXlzW2NhdF0pIHtcbiAgICAgICAgICAgIGlmIChyZXNlcnZlZEhvdGtleXMuaW5jbHVkZXMoaG90a2V5KSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgaG90a2V5ICR7aG90a2V5fSBpcyByZXNlcnZlZCFgKTtcbiAgICAgICAgICAgIGlmIChpc0hvdGtleShob3RrZXksIGV2ZW50Lm5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZU1hcmsgPSBhY3RpdmVIb3RrZXlzW2NhdF07XG4gICAgICAgICAgICAgIGlmIChwb3NzaWJsZU1hcmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrID0gcG9zc2libGVNYXJrW2hvdGtleV07XG4gICAgICAgICAgICAgICAgZGVidWckMihgSG90S2V5ICR7aG90a2V5fSB0byB0b2dnbGUgJHttYXJrfWApLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlY29yYXRvcjogbWFya1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBpZiAoY2F0ID09PSBcImN1c3RvbVwiKVxuICAgICAgICAgIGZvciAoY29uc3QgaG90a2V5IGluIGFjdGl2ZUhvdGtleXNbY2F0XSkge1xuICAgICAgICAgICAgaWYgKHJlc2VydmVkSG90a2V5cy5pbmNsdWRlcyhob3RrZXkpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBob3RrZXkgJHtob3RrZXl9IGlzIHJlc2VydmVkIWApO1xuICAgICAgICAgICAgaWYgKGlzSG90a2V5KGhvdGtleSwgZXZlbnQubmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlQ29tbWFuZCA9IGFjdGl2ZUhvdGtleXNbY2F0XTtcbiAgICAgICAgICAgICAgaWYgKHBvc3NpYmxlQ29tbWFuZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwb3NzaWJsZUNvbW1hbmRbaG90a2V5XTtcbiAgICAgICAgICAgICAgICBjb21tYW5kKGV2ZW50LCBwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckMSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aEluc2VydERhdGFcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoSW5zZXJ0RGF0YShlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IGJsb2NrVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLCBzcGFuVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5zcGFuLm5hbWUsIHdoaXRlc3BhY2VPblBhc3RlTW9kZSA9IHNjaGVtYVR5cGVzLmJsb2NrLm9wdGlvbnMudW5zdGFibGVfd2hpdGVzcGFjZU9uUGFzdGVNb2RlLCB0b1BsYWluVGV4dCA9IChibG9ja3MpID0+IGJsb2Nrcy5tYXAoKGJsb2NrKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spID8gYmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX3R5cGUgPT09IHNwYW5UeXBlTmFtZSA/IGNoaWxkLnRleHQgOiBgWyR7c2NoZW1hVHlwZXMuaW5saW5lT2JqZWN0cy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGNoaWxkLl90eXBlKT8udGl0bGUgfHwgXCJPYmplY3RcIn1dYCkuam9pbihcIlwiKSA6IGBbJHtzY2hlbWFUeXBlcy5ibG9ja09iamVjdHMuZmluZCgodCkgPT4gdC5uYW1lID09PSBibG9jay5fdHlwZSk/LnRpdGxlIHx8IFwiT2JqZWN0XCJ9XWApLmpvaW4oYFxuXG5gKTtcbiAgICByZXR1cm4gZWRpdG9yLnNldEZyYWdtZW50RGF0YSA9IChkYXRhLCBvcmlnaW5FdmVudCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzZWxlY3Rpb25cbiAgICAgIH0gPSBlZGl0b3I7XG4gICAgICBpZiAoIXNlbGVjdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gUmFuZ2UuZWRnZXMoc2VsZWN0aW9uKSwgc3RhcnRWb2lkID0gRWRpdG9yLnZvaWQoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBzdGFydC5wYXRoXG4gICAgICB9KSwgZW5kVm9pZCA9IEVkaXRvci52b2lkKGVkaXRvciwge1xuICAgICAgICBhdDogZW5kLnBhdGhcbiAgICAgIH0pO1xuICAgICAgaWYgKFJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbikgJiYgIXN0YXJ0Vm9pZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgZG9tUmFuZ2UgPSBSZWFjdEVkaXRvci50b0RPTVJhbmdlKGVkaXRvciwgc2VsZWN0aW9uKTtcbiAgICAgIGxldCBjb250ZW50cyA9IGRvbVJhbmdlLmNsb25lQ29udGVudHMoKTtcbiAgICAgIGlmIChlbmRWb2lkKSB7XG4gICAgICAgIGNvbnN0IFt2b2lkTm9kZV0gPSBlbmRWb2lkLCByID0gZG9tUmFuZ2UuY2xvbmVSYW5nZSgpLCBkb21Ob2RlID0gUmVhY3RFZGl0b3IudG9ET01Ob2RlKGVkaXRvciwgdm9pZE5vZGUpO1xuICAgICAgICByLnNldEVuZEFmdGVyKGRvbU5vZGUpLCBjb250ZW50cyA9IHIuY2xvbmVDb250ZW50cygpO1xuICAgICAgfVxuICAgICAgQXJyYXkuZnJvbShjb250ZW50cy5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc2xhdGUtemVyby13aWR0aF1cIikpLmZvckVhY2goKHp3KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzTmV3bGluZSA9IHp3LmdldEF0dHJpYnV0ZShcImRhdGEtc2xhdGUtemVyby13aWR0aFwiKSA9PT0gXCJuXCI7XG4gICAgICAgIHp3LnRleHRDb250ZW50ID0gaXNOZXdsaW5lID8gYFxuYCA6IFwiXCI7XG4gICAgICB9KSwgQXJyYXkuZnJvbShjb250ZW50cy5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSkuZm9yRWFjaCgoZWxtKSA9PiB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNsYXRlLWlubGluZVwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtbGVhZlwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtbm9kZVwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtc3BhY2VyXCIpLCBlbG0ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zbGF0ZS1zdHJpbmdcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNsYXRlLXplcm8td2lkdGhcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIik7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGVsbS5hdHRyaWJ1dGVzKVxuICAgICAgICAgIGVsbS5oYXNBdHRyaWJ1dGUoa2V5KSAmJiBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGRpdiA9IGNvbnRlbnRzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChjb250ZW50cyksIGRpdi5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJ0cnVlXCIpLCBjb250ZW50cy5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgIGNvbnN0IGFzSFRNTCA9IGRpdi5pbm5lckhUTUw7XG4gICAgICBjb250ZW50cy5vd25lckRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gZWRpdG9yLmdldEZyYWdtZW50KCksIHBvcnRhYmxlVGV4dCA9IGZyb21TbGF0ZVZhbHVlKGZyYWdtZW50LCBibG9ja1R5cGVOYW1lKSwgYXNKU09OID0gSlNPTi5zdHJpbmdpZnkocG9ydGFibGVUZXh0KSwgYXNQbGFpblRleHQgPSB0b1BsYWluVGV4dChwb3J0YWJsZVRleHQpO1xuICAgICAgZGF0YS5jbGVhckRhdGEoKSwgZGF0YS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBhc1BsYWluVGV4dCksIGRhdGEuc2V0RGF0YShcInRleHQvaHRtbFwiLCBhc0hUTUwpLCBkYXRhLnNldERhdGEoXCJhcHBsaWNhdGlvbi9qc29uXCIsIGFzSlNPTiksIGRhdGEuc2V0RGF0YShcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLCBhc0pTT04pLCBkZWJ1ZyQxKFwidGV4dFwiLCBhc1BsYWluVGV4dCksIGRhdGEuc2V0RGF0YShcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dC1ldmVudC1vcmlnaW5cIiwgb3JpZ2luRXZlbnQgfHwgXCJleHRlcm5hbFwiKSwgZGVidWckMShcIlNldCBmcmFnbWVudCBkYXRhXCIsIGFzSlNPTiwgYXNIVE1MKTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0UG9ydGFibGVUZXh0RGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGNvbnN0IHBUZXh0ID0gZGF0YS5nZXREYXRhKFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpLCBvcmlnaW4gPSBkYXRhLmdldERhdGEoXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHQtZXZlbnQtb3JpZ2luXCIpO1xuICAgICAgaWYgKGRlYnVnJDEoYEluc2VydGluZyBwb3J0YWJsZSB0ZXh0IGZyb20gJHtvcmlnaW59IGV2ZW50YCwgcFRleHQpLCBwVGV4dCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHBUZXh0KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkKSAmJiBwYXJzZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHNsYXRlVmFsdWUgPSBfcmVnZW5lcmF0ZUtleXMoZWRpdG9yLCB0b1NsYXRlVmFsdWUocGFyc2VkLCB7XG4gICAgICAgICAgICBzY2hlbWFUeXBlc1xuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLCBzcGFuVHlwZU5hbWUsIHNjaGVtYVR5cGVzKSwgdmFsaWRhdGlvbiA9IHZhbGlkYXRlVmFsdWUocGFyc2VkLCBzY2hlbWFUeXBlcywgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcik7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkICYmICF2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRlc2NyaXB0aW9uID0gYCR7dmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5kZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgcmV0dXJuIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgIG5hbWU6IFwicGFzdGVFcnJvclwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JEZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgZGF0YTogdmFsaWRhdGlvblxuICAgICAgICAgICAgfSksIGRlYnVnJDEoXCJJbnZhbGlkIGluc2VydCByZXN1bHRcIiwgdmFsaWRhdGlvbiksICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2luc2VydEZyYWdtZW50KGVkaXRvciwgc2xhdGVWYWx1ZSwgc2NoZW1hVHlwZXMpLCAhMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvci5pbnNlcnRUZXh0T3JIVE1MRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICAgIHJldHVybiBkZWJ1ZyQxKFwiTm8gc2VsZWN0aW9uLCBub3QgaW5zZXJ0aW5nXCIpLCAhMTtcbiAgICAgIGNvbnN0IGh0bWwgPSBkYXRhLmdldERhdGEoXCJ0ZXh0L2h0bWxcIiksIHRleHQgPSBkYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO1xuICAgICAgaWYgKGh0bWwgfHwgdGV4dCkge1xuICAgICAgICBkZWJ1ZyQxKFwiSW5zZXJ0aW5nIGRhdGFcIiwgZGF0YSk7XG4gICAgICAgIGxldCBwb3J0YWJsZVRleHQsIGZyYWdtZW50LCBpbnNlcnRlZFR5cGU7XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgaWYgKHBvcnRhYmxlVGV4dCA9IGh0bWxUb0Jsb2NrcyhodG1sLCBzY2hlbWFUeXBlcy5wb3J0YWJsZVRleHQsIHtcbiAgICAgICAgICAgIHVuc3RhYmxlX3doaXRlc3BhY2VPblBhc3RlTW9kZTogd2hpdGVzcGFjZU9uUGFzdGVNb2RlXG4gICAgICAgICAgfSkubWFwKChibG9jaykgPT4gbm9ybWFsaXplQmxvY2soYmxvY2ssIHtcbiAgICAgICAgICAgIGJsb2NrVHlwZU5hbWVcbiAgICAgICAgICB9KSksIGZyYWdtZW50ID0gdG9TbGF0ZVZhbHVlKHBvcnRhYmxlVGV4dCwge1xuICAgICAgICAgICAgc2NoZW1hVHlwZXNcbiAgICAgICAgICB9KSwgaW5zZXJ0ZWRUeXBlID0gXCJIVE1MXCIsIHBvcnRhYmxlVGV4dC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGV4dFRvSHRtbCA9IGA8aHRtbD48Ym9keT4ke2VzY2FwZUh0bWwodGV4dCkuc3BsaXQoL1xcbnsyLH0vKS5tYXAoKGxpbmUpID0+IGxpbmUgPyBgPHA+JHtsaW5lLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCBcIjxici8+XCIpfTwvcD5gIDogXCI8cD48L3A+XCIpLmpvaW4oXCJcIil9PC9ib2R5PjwvaHRtbD5gO1xuICAgICAgICAgIHBvcnRhYmxlVGV4dCA9IGh0bWxUb0Jsb2Nrcyh0ZXh0VG9IdG1sLCBzY2hlbWFUeXBlcy5wb3J0YWJsZVRleHQpLm1hcCgoYmxvY2spID0+IG5vcm1hbGl6ZUJsb2NrKGJsb2NrLCB7XG4gICAgICAgICAgICBibG9ja1R5cGVOYW1lXG4gICAgICAgICAgfSkpLCBmcmFnbWVudCA9IHRvU2xhdGVWYWx1ZShwb3J0YWJsZVRleHQsIHtcbiAgICAgICAgICAgIHNjaGVtYVR5cGVzXG4gICAgICAgICAgfSksIGluc2VydGVkVHlwZSA9IFwidGV4dFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZVZhbHVlKHBvcnRhYmxlVGV4dCwgc2NoZW1hVHlwZXMsIGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IpO1xuICAgICAgICBpZiAoIXZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgICAgICBjb25zdCBlcnJvckRlc2NyaXB0aW9uID0gYENvdWxkIG5vdCB2YWxpZGF0ZSB0aGUgcmVzdWx0aW5nIHBvcnRhYmxlIHRleHQgdG8gaW5zZXJ0LlxuJHt2YWxpZGF0aW9uLnJlc29sdXRpb24/LmRlc2NyaXB0aW9ufVxuVHJ5IHRvIGluc2VydCBhcyBwbGFpbiB0ZXh0IChzaGlmdC1wYXN0ZSkgaW5zdGVhZC5gO1xuICAgICAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGFzdGVFcnJvclwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGVycm9yRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkYXRhOiB2YWxpZGF0aW9uXG4gICAgICAgICAgfSksIGRlYnVnJDEoXCJJbnZhbGlkIGluc2VydCByZXN1bHRcIiwgdmFsaWRhdGlvbiksICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWJ1ZyQxKGBJbnNlcnRpbmcgJHtpbnNlcnRlZFR5cGV9IGZyYWdtZW50IGF0ICR7SlNPTi5zdHJpbmdpZnkoZWRpdG9yLnNlbGVjdGlvbil9YCksIF9pbnNlcnRGcmFnbWVudChlZGl0b3IsIGZyYWdtZW50LCBzY2hlbWFUeXBlcyksICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvci5pbnNlcnREYXRhID0gKGRhdGEpID0+IHtcbiAgICAgIGVkaXRvci5pbnNlcnRQb3J0YWJsZVRleHREYXRhKGRhdGEpIHx8IGVkaXRvci5pbnNlcnRUZXh0T3JIVE1MRGF0YShkYXRhKTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0RnJhZ21lbnREYXRhID0gKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gZGF0YS5nZXREYXRhKFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpO1xuICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoZnJhZ21lbnQpO1xuICAgICAgICByZXR1cm4gZWRpdG9yLmluc2VydEZyYWdtZW50KHBhcnNlZCksICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGVudGl0eU1hcCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI8XCI6IFwiJmx0O1wiLFxuICBcIj5cIjogXCImZ3Q7XCIsXG4gICdcIic6IFwiJnF1b3Q7XCIsXG4gIFwiJ1wiOiBcIiYjMzk7XCIsXG4gIFwiL1wiOiBcIiYjeDJGO1wiLFxuICBcImBcIjogXCImI3g2MDtcIixcbiAgXCI9XCI6IFwiJiN4M0Q7XCJcbn07XG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cikge1xuICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvWyY8PlwiJ2A9L10vZywgKHMpID0+IGVudGl0eU1hcFtzXSk7XG59XG5mdW5jdGlvbiBfcmVnZW5lcmF0ZUtleXMoZWRpdG9yLCBmcmFnbWVudCwga2V5R2VuZXJhdG9yLCBzcGFuVHlwZU5hbWUsIGVkaXRvclR5cGVzKSB7XG4gIHJldHVybiBmcmFnbWVudC5tYXAoKG5vZGUpID0+IHtcbiAgICBjb25zdCBuZXdOb2RlID0ge1xuICAgICAgLi4ubm9kZVxuICAgIH07XG4gICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhuZXdOb2RlKSkge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSBlZGl0b3JUeXBlcy5hbm5vdGF0aW9ucy5tYXAoKHQpID0+IHQubmFtZSk7XG4gICAgICBpZiAoYW5ub3RhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBtYXJrRGVmcyxcbiAgICAgICAgICAuLi5OZXdOb2RlTm9EZWZzXG4gICAgICAgIH0gPSBuZXdOb2RlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLk5ld05vZGVOb0RlZnMsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgobmV3Tm9kZS5tYXJrRGVmcyB8fCBbXSkuc29tZSgoZGVmKSA9PiAhYW5ub3RhdGlvbnMuaW5jbHVkZXMoZGVmLl90eXBlKSkpIHtcbiAgICAgICAgY29uc3QgYWxsb3dlZEFubm90YXRpb25zID0gKG5ld05vZGUubWFya0RlZnMgfHwgW10pLmZpbHRlcigoZGVmKSA9PiBhbm5vdGF0aW9ucy5pbmNsdWRlcyhkZWYuX3R5cGUpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5uZXdOb2RlLFxuICAgICAgICAgIG1hcmtEZWZzOiBhbGxvd2VkQW5ub3RhdGlvbnMsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG5ld05vZGUubWFya0RlZnMgPSAobmV3Tm9kZS5tYXJrRGVmcyB8fCBbXSkubWFwKChkZWYpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkS2V5ID0gZGVmLl9rZXksIG5ld0tleSA9IGtleUdlbmVyYXRvcigpO1xuICAgICAgICByZXR1cm4gbmV3Tm9kZS5jaGlsZHJlbiA9IG5ld05vZGUuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX3R5cGUgPT09IHNwYW5UeXBlTmFtZSAmJiBlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgPyB7XG4gICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgbWFya3M6IGNoaWxkLm1hcmtzICYmIGNoaWxkLm1hcmtzLmluY2x1ZGVzKG9sZEtleSkgPyBbLi4uY2hpbGQubWFya3NdLmZpbHRlcigobWFyaykgPT4gbWFyayAhPT0gb2xkS2V5KS5jb25jYXQobmV3S2V5KSA6IGNoaWxkLm1hcmtzXG4gICAgICAgIH0gOiBjaGlsZCksIHtcbiAgICAgICAgICAuLi5kZWYsXG4gICAgICAgICAgX2tleTogbmV3S2V5XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZVdpdGhOZXdLZXlzID0ge1xuICAgICAgLi4ubmV3Tm9kZSxcbiAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpXG4gICAgfTtcbiAgICByZXR1cm4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGVXaXRoTmV3S2V5cykgJiYgKG5vZGVXaXRoTmV3S2V5cy5jaGlsZHJlbiA9IG5vZGVXaXRoTmV3S2V5cy5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiAoe1xuICAgICAgLi4uY2hpbGQsXG4gICAgICBfa2V5OiBrZXlHZW5lcmF0b3IoKVxuICAgIH0pKSksIG5vZGVXaXRoTmV3S2V5cztcbiAgfSk7XG59XG5mdW5jdGlvbiBfaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLCBmcmFnbWVudCwgc2NoZW1hVHlwZXMpIHtcbiAgZWRpdG9yLndpdGhvdXROb3JtYWxpemluZygoKSA9PiB7XG4gICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICBkZXB0aDogMVxuICAgIH0pO1xuICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soZm9jdXNCbG9jaykgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGZyYWdtZW50WzBdKSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYXJrRGVmc1xuICAgICAgfSA9IGZvY3VzQmxvY2s7XG4gICAgICBkZWJ1ZyQxKFwiTWl4aW5nIG1hcmtEZWZzIG9mIGZvY3VzQmxvY2sgYW5kIGZyYWdtZW50c1swXSBibG9ja1wiLCBtYXJrRGVmcywgZnJhZ21lbnRbMF0ubWFya0RlZnMpLCBpc0VxdWFsKG1hcmtEZWZzLCBmcmFnbWVudFswXS5tYXJrRGVmcykgfHwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgbWFya0RlZnM6IHVuaXEoWy4uLmZyYWdtZW50WzBdLm1hcmtEZWZzIHx8IFtdLCAuLi5tYXJrRGVmcyB8fCBbXV0pXG4gICAgICB9LCB7XG4gICAgICAgIGF0OiBmb2N1c1BhdGgsXG4gICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgIHZvaWRzOiAhMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlzRXF1YWxUb0VtcHR5RWRpdG9yKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hVHlwZXMpID8gKFRyYW5zZm9ybXMuc3BsaXROb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbMCwgMF1cbiAgICB9KSwgZWRpdG9yLmluc2VydEZyYWdtZW50KGZyYWdtZW50KSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbMF1cbiAgICB9KSkgOiBlZGl0b3IuaW5zZXJ0RnJhZ21lbnQoZnJhZ21lbnQpO1xuICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiB3aXRoU3luY1JhbmdlRGVjb3JhdGlvbnMoe1xuICBlZGl0b3JBY3RvcixcbiAgc2xhdGVFZGl0b3IsXG4gIHN5bmNSYW5nZURlY29yYXRpb25zXG59KSB7XG4gIGNvbnN0IG9yaWdpbmFsQXBwbHkgPSBzbGF0ZUVkaXRvci5hcHBseTtcbiAgcmV0dXJuIHNsYXRlRWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgb3JpZ2luYWxBcHBseShvcCksICFlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgIH0pICYmIG9wLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIHN5bmNSYW5nZURlY29yYXRpb25zKG9wKTtcbiAgfSwgKCkgPT4ge1xuICAgIHNsYXRlRWRpdG9yLmFwcGx5ID0gb3JpZ2luYWxBcHBseTtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpFZGl0YWJsZVwiKSwgUExBQ0VIT0xERVJfU1RZTEUgPSB7XG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDBcbn0sIFBvcnRhYmxlVGV4dEVkaXRhYmxlID0gZm9yd2FyZFJlZihmdW5jdGlvbihwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIGNvbnN0IHtcbiAgICBob3RrZXlzLFxuICAgIG9uQmx1cixcbiAgICBvbkZvY3VzLFxuICAgIG9uQmVmb3JlSW5wdXQsXG4gICAgb25QYXN0ZSxcbiAgICBvbkNvcHksXG4gICAgb25DbGljayxcbiAgICByYW5nZURlY29yYXRpb25zLFxuICAgIHJlbmRlckFubm90YXRpb24sXG4gICAgcmVuZGVyQmxvY2ssXG4gICAgcmVuZGVyQ2hpbGQsXG4gICAgcmVuZGVyRGVjb3JhdG9yLFxuICAgIHJlbmRlckxpc3RJdGVtLFxuICAgIHJlbmRlclBsYWNlaG9sZGVyLFxuICAgIHJlbmRlclN0eWxlLFxuICAgIHNlbGVjdGlvbjogcHJvcHNTZWxlY3Rpb24sXG4gICAgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcsXG4gICAgc3BlbGxDaGVjayxcbiAgICAuLi5yZXN0UHJvcHNcbiAgfSA9IHByb3BzLCBwb3J0YWJsZVRleHRFZGl0b3IgPSB1c2VQb3J0YWJsZVRleHRFZGl0b3IoKSwgcmVmID0gdXNlUmVmKG51bGwpLCBbZWRpdGFibGVFbGVtZW50LCBzZXRFZGl0YWJsZUVsZW1lbnRdID0gdXNlU3RhdGUobnVsbCksIFtoYXNJbnZhbGlkVmFsdWUsIHNldEhhc0ludmFsaWRWYWx1ZV0gPSB1c2VTdGF0ZSghMSksIFtyYW5nZURlY29yYXRpb25TdGF0ZSwgc2V0UmFuZ2VEZWNvcmF0aW9uc1N0YXRlXSA9IHVzZVN0YXRlKFtdKTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShmb3J3YXJkZWRSZWYsICgpID0+IHJlZi5jdXJyZW50KTtcbiAgY29uc3QgcmFuZ2VEZWNvcmF0aW9uc1JlZiA9IHVzZVJlZihyYW5nZURlY29yYXRpb25zKSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIHJlYWRPbmx5ID0gdXNlU2VsZWN0b3IoZWRpdG9yQWN0b3IsIChzKSA9PiBzLm1hdGNoZXMoe1xuICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgfSkpLCBzY2hlbWFUeXBlcyA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCAoc18wKSA9PiBzXzAuY29udGV4dC5zY2hlbWEpLCBzbGF0ZUVkaXRvciA9IHVzZVNsYXRlKCksIGJsb2NrVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lO1xuICB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB3aXRoSW5zZXJ0RGF0YSA9IGNyZWF0ZVdpdGhJbnNlcnREYXRhKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyk7XG4gICAgaWYgKHJlYWRPbmx5KVxuICAgICAgcmV0dXJuIGRlYnVnKFwiRWRpdGFibGUgaXMgaW4gcmVhZCBvbmx5IG1vZGVcIiksIHdpdGhJbnNlcnREYXRhKHNsYXRlRWRpdG9yKTtcbiAgICBjb25zdCB3aXRoSG90S2V5cyA9IGNyZWF0ZVdpdGhIb3RrZXlzKGVkaXRvckFjdG9yLCBwb3J0YWJsZVRleHRFZGl0b3IsIGhvdGtleXMpO1xuICAgIHJldHVybiBkZWJ1ZyhcIkVkaXRhYmxlIGlzIGluIGVkaXQgbW9kZVwiKSwgd2l0aEluc2VydERhdGEod2l0aEhvdEtleXMoc2xhdGVFZGl0b3IpKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBob3RrZXlzLCBwb3J0YWJsZVRleHRFZGl0b3IsIHJlYWRPbmx5LCBzY2hlbWFUeXBlcywgc2xhdGVFZGl0b3JdKTtcbiAgY29uc3QgcmVuZGVyRWxlbWVudCA9IHVzZUNhbGxiYWNrKChlUHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goRWxlbWVudCwgeyAuLi5lUHJvcHMsIHJlYWRPbmx5LCByZW5kZXJCbG9jaywgcmVuZGVyQ2hpbGQsIHJlbmRlckxpc3RJdGVtLCByZW5kZXJTdHlsZSwgc2NoZW1hVHlwZXMsIHNwZWxsQ2hlY2sgfSksIFtzY2hlbWFUeXBlcywgc3BlbGxDaGVjaywgcmVhZE9ubHksIHJlbmRlckJsb2NrLCByZW5kZXJDaGlsZCwgcmVuZGVyTGlzdEl0ZW0sIHJlbmRlclN0eWxlXSksIHJlbmRlckxlYWYgPSB1c2VDYWxsYmFjaygobFByb3BzKSA9PiB7XG4gICAgaWYgKGxQcm9wcy5sZWFmLl90eXBlID09PSBcInNwYW5cIikge1xuICAgICAgbGV0IHJlbmRlcmVkID0gLyogQF9fUFVSRV9fICovIGpzeChMZWFmLCB7IC4uLmxQcm9wcywgZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzLCByZW5kZXJBbm5vdGF0aW9uLCByZW5kZXJDaGlsZCwgcmVuZGVyRGVjb3JhdG9yLCByZWFkT25seSB9KTtcbiAgICAgIGlmIChyZW5kZXJQbGFjZWhvbGRlciAmJiBsUHJvcHMubGVhZi5wbGFjZWhvbGRlciAmJiBsUHJvcHMudGV4dC50ZXh0ID09PSBcIlwiKVxuICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiBQTEFDRUhPTERFUl9TVFlMRSwgY29udGVudEVkaXRhYmxlOiAhMSwgY2hpbGRyZW46IHJlbmRlclBsYWNlaG9sZGVyKCkgfSksXG4gICAgICAgICAgcmVuZGVyZWRcbiAgICAgICAgXSB9KTtcbiAgICAgIGNvbnN0IGRlY29yYXRpb24gPSBsUHJvcHMubGVhZi5yYW5nZURlY29yYXRpb247XG4gICAgICByZXR1cm4gZGVjb3JhdGlvbiAmJiAocmVuZGVyZWQgPSBkZWNvcmF0aW9uLmNvbXBvbmVudCh7XG4gICAgICAgIGNoaWxkcmVuOiByZW5kZXJlZFxuICAgICAgfSkpLCByZW5kZXJlZDtcbiAgICB9XG4gICAgcmV0dXJuIGxQcm9wcy5jaGlsZHJlbjtcbiAgfSwgW2VkaXRvckFjdG9yLCByZWFkT25seSwgcmVuZGVyQW5ub3RhdGlvbiwgcmVuZGVyQ2hpbGQsIHJlbmRlckRlY29yYXRvciwgcmVuZGVyUGxhY2Vob2xkZXIsIHNjaGVtYVR5cGVzXSksIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByb3BzU2VsZWN0aW9uKSB7XG4gICAgICBkZWJ1ZyhgU2VsZWN0aW9uIGZyb20gcHJvcHMgJHtKU09OLnN0cmluZ2lmeShwcm9wc1NlbGVjdGlvbil9YCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkU2VsZWN0aW9uID0gbm9ybWFsaXplU2VsZWN0aW9uKHByb3BzU2VsZWN0aW9uLCBmcm9tU2xhdGVWYWx1ZShzbGF0ZUVkaXRvci5jaGlsZHJlbiwgYmxvY2tUeXBlTmFtZSkpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRTZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgZGVidWcoYE5vcm1hbGl6ZWQgc2VsZWN0aW9uIGZyb20gcHJvcHMgJHtKU09OLnN0cmluZ2lmeShub3JtYWxpemVkU2VsZWN0aW9uKX1gKTtcbiAgICAgICAgY29uc3Qgc2xhdGVSYW5nZSA9IHRvU2xhdGVSYW5nZShub3JtYWxpemVkU2VsZWN0aW9uLCBzbGF0ZUVkaXRvcik7XG4gICAgICAgIHNsYXRlUmFuZ2UgJiYgKFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBzbGF0ZVJhbmdlKSwgc2xhdGVFZGl0b3Iub3BlcmF0aW9ucy5zb21lKChvKSA9PiBvLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB8fCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInNlbGVjdGlvblwiLFxuICAgICAgICAgIHNlbGVjdGlvbjogbm9ybWFsaXplZFNlbGVjdGlvblxuICAgICAgICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tUeXBlTmFtZSwgZWRpdG9yQWN0b3IsIHByb3BzU2VsZWN0aW9uLCBzbGF0ZUVkaXRvcl0pLCBzeW5jUmFuZ2VEZWNvcmF0aW9ucyA9IHVzZUNhbGxiYWNrKChvcGVyYXRpb24pID0+IHtcbiAgICBpZiAocmFuZ2VEZWNvcmF0aW9ucyAmJiByYW5nZURlY29yYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG5ld1NsYXRlUmFuZ2VzID0gW107XG4gICAgICBpZiAocmFuZ2VEZWNvcmF0aW9ucy5mb3JFYWNoKChyYW5nZURlY29yYXRpb25JdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IHNsYXRlUmFuZ2VfMCA9IHRvU2xhdGVSYW5nZShyYW5nZURlY29yYXRpb25JdGVtLnNlbGVjdGlvbiwgc2xhdGVFZGl0b3IpO1xuICAgICAgICBpZiAoIVJhbmdlLmlzUmFuZ2Uoc2xhdGVSYW5nZV8wKSkge1xuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbkl0ZW0ub25Nb3ZlZCAmJiByYW5nZURlY29yYXRpb25JdGVtLm9uTW92ZWQoe1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uOiBudWxsLFxuICAgICAgICAgICAgcmFuZ2VEZWNvcmF0aW9uOiByYW5nZURlY29yYXRpb25JdGVtLFxuICAgICAgICAgICAgb3JpZ2luOiBcImxvY2FsXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld1JhbmdlO1xuICAgICAgICBpZiAob3BlcmF0aW9uICYmIChuZXdSYW5nZSA9IG1vdmVSYW5nZUJ5T3BlcmF0aW9uKHNsYXRlUmFuZ2VfMCwgb3BlcmF0aW9uKSwgbmV3UmFuZ2UgJiYgbmV3UmFuZ2UgIT09IHNsYXRlUmFuZ2VfMCB8fCBuZXdSYW5nZSA9PT0gbnVsbCAmJiBzbGF0ZVJhbmdlXzApKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBQb3J0YWJsZVRleHRFZGl0b3IuZ2V0VmFsdWUocG9ydGFibGVUZXh0RWRpdG9yKSwgbmV3UmFuZ2VTZWxlY3Rpb24gPSB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCBuZXdSYW5nZSwgc2NoZW1hVHlwZXMpO1xuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbkl0ZW0ub25Nb3ZlZCAmJiByYW5nZURlY29yYXRpb25JdGVtLm9uTW92ZWQoe1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uOiBuZXdSYW5nZVNlbGVjdGlvbixcbiAgICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbjogcmFuZ2VEZWNvcmF0aW9uSXRlbSxcbiAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3UmFuZ2UgIT09IG51bGwgJiYgbmV3U2xhdGVSYW5nZXMucHVzaCh7XG4gICAgICAgICAgLi4ubmV3UmFuZ2UgfHwgc2xhdGVSYW5nZV8wLFxuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbjogcmFuZ2VEZWNvcmF0aW9uSXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBuZXdTbGF0ZVJhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNldFJhbmdlRGVjb3JhdGlvbnNTdGF0ZShuZXdTbGF0ZVJhbmdlcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0UmFuZ2VEZWNvcmF0aW9uc1N0YXRlKChyYW5nZURlY29yYXRpb25TdGF0ZV8wKSA9PiByYW5nZURlY29yYXRpb25TdGF0ZV8wLmxlbmd0aCA+IDAgPyBbXSA6IHJhbmdlRGVjb3JhdGlvblN0YXRlXzApO1xuICB9LCBbcG9ydGFibGVUZXh0RWRpdG9yLCByYW5nZURlY29yYXRpb25zLCBzY2hlbWFUeXBlcywgc2xhdGVFZGl0b3JdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvblJlYWR5ID0gZWRpdG9yQWN0b3Iub24oXCJyZWFkeVwiLCAoKSA9PiB7XG4gICAgICBzeW5jUmFuZ2VEZWNvcmF0aW9ucygpLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzKCk7XG4gICAgfSksIG9uSW52YWxpZFZhbHVlID0gZWRpdG9yQWN0b3Iub24oXCJpbnZhbGlkIHZhbHVlXCIsICgpID0+IHtcbiAgICAgIHNldEhhc0ludmFsaWRWYWx1ZSghMCk7XG4gICAgfSksIG9uVmFsdWVDaGFuZ2VkID0gZWRpdG9yQWN0b3Iub24oXCJ2YWx1ZSBjaGFuZ2VkXCIsICgpID0+IHtcbiAgICAgIHNldEhhc0ludmFsaWRWYWx1ZSghMSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG9uUmVhZHkudW5zdWJzY3JpYmUoKSwgb25JbnZhbGlkVmFsdWUudW5zdWJzY3JpYmUoKSwgb25WYWx1ZUNoYW5nZWQudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZWRpdG9yQWN0b3IsIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMsIHN5bmNSYW5nZURlY29yYXRpb25zXSksIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvcHNTZWxlY3Rpb24gJiYgIWhhc0ludmFsaWRWYWx1ZSAmJiByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzKCk7XG4gIH0sIFtoYXNJbnZhbGlkVmFsdWUsIHByb3BzU2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzXSk7XG4gIGNvbnN0IFtzeW5jZWRSYW5nZURlY29yYXRpb25zLCBzZXRTeW5jZWRSYW5nZURlY29yYXRpb25zXSA9IHVzZVN0YXRlKCExKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jZWRSYW5nZURlY29yYXRpb25zIHx8IChzZXRTeW5jZWRSYW5nZURlY29yYXRpb25zKCEwKSwgc3luY1JhbmdlRGVjb3JhdGlvbnMoKSk7XG4gIH0sIFtzeW5jUmFuZ2VEZWNvcmF0aW9ucywgc3luY2VkUmFuZ2VEZWNvcmF0aW9uc10pLCB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlzRXF1YWwocmFuZ2VEZWNvcmF0aW9ucywgcmFuZ2VEZWNvcmF0aW9uc1JlZi5jdXJyZW50KSB8fCBzeW5jUmFuZ2VEZWNvcmF0aW9ucygpLCByYW5nZURlY29yYXRpb25zUmVmLmN1cnJlbnQgPSByYW5nZURlY29yYXRpb25zO1xuICB9LCBbcmFuZ2VEZWNvcmF0aW9ucywgc3luY1JhbmdlRGVjb3JhdGlvbnNdKSwgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB0ZWFyZG93biA9IHdpdGhTeW5jUmFuZ2VEZWNvcmF0aW9ucyh7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgc3luY1JhbmdlRGVjb3JhdGlvbnNcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gdGVhcmRvd24oKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBzbGF0ZUVkaXRvciwgc3luY1JhbmdlRGVjb3JhdGlvbnNdKTtcbiAgY29uc3QgaGFuZGxlQ29weSA9IHVzZUNhbGxiYWNrKChldmVudCkgPT4ge1xuICAgIG9uQ29weSA/IG9uQ29weShldmVudCkgIT09IHZvaWQgMCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpIDogZXZlbnQubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJjb3B5XCIsXG4gICAgICAgIGRhdGE6IGV2ZW50Lm5hdGl2ZUV2ZW50LmNsaXBib2FyZERhdGFcbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XG4gICAgfSk7XG4gIH0sIFtvbkNvcHksIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVQYXN0ZSA9IHVzZUNhbGxiYWNrKChldmVudF8wKSA9PiB7XG4gICAgY29uc3QgdmFsdWVfMCA9IFBvcnRhYmxlVGV4dEVkaXRvci5nZXRWYWx1ZShwb3J0YWJsZVRleHRFZGl0b3IpLCBwYXRoID0gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZV8wLCBzbGF0ZUVkaXRvci5zZWxlY3Rpb24sIHNjaGVtYVR5cGVzKT8uZm9jdXMucGF0aCB8fCBbXSwgb25QYXN0ZVJlc3VsdCA9IG9uUGFzdGU/Lih7XG4gICAgICBldmVudDogZXZlbnRfMCxcbiAgICAgIHZhbHVlOiB2YWx1ZV8wLFxuICAgICAgcGF0aCxcbiAgICAgIHNjaGVtYVR5cGVzXG4gICAgfSk7XG4gICAgb25QYXN0ZVJlc3VsdCB8fCAhc2xhdGVFZGl0b3Iuc2VsZWN0aW9uID8gKGV2ZW50XzAucHJldmVudERlZmF1bHQoKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImxvYWRpbmdcIlxuICAgIH0pLCBQcm9taXNlLnJlc29sdmUob25QYXN0ZVJlc3VsdCkudGhlbigocmVzdWx0XzApID0+IHtcbiAgICAgIGRlYnVnKFwiQ3VzdG9tIHBhc3RlIGZ1bmN0aW9uIGZyb20gY2xpZW50IHJlc29sdmVkXCIsIHJlc3VsdF8wKSwgIXJlc3VsdF8wIHx8ICFyZXN1bHRfMC5pbnNlcnQgPyAoZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKSwgc2xhdGVFZGl0b3IuaW5zZXJ0RGF0YShldmVudF8wLmNsaXBib2FyZERhdGEpKSA6IHJlc3VsdF8wLmluc2VydCA/IHNsYXRlRWRpdG9yLmluc2VydEZyYWdtZW50KHRvU2xhdGVWYWx1ZShyZXN1bHRfMC5pbnNlcnQsIHtcbiAgICAgICAgc2NoZW1hVHlwZXNcbiAgICAgIH0pKSA6IGNvbnNvbGUud2FybihcIllvdXIgb25QYXN0ZSBmdW5jdGlvbiByZXR1cm5lZCBzb21ldGhpbmcgdW5leHBlY3RlZDpcIiwgcmVzdWx0XzApO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4gKGNvbnNvbGUuZXJyb3IoZXJyb3IpLCBlcnJvcikpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiZG9uZSBsb2FkaW5nXCJcbiAgICAgIH0pO1xuICAgIH0pKSA6IGV2ZW50XzAubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJwYXN0ZVwiLFxuICAgICAgICBkYXRhOiBldmVudF8wLm5hdGl2ZUV2ZW50LmNsaXBib2FyZERhdGFcbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XzBcbiAgICB9KSwgZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBvblBhc3RlLCBwb3J0YWJsZVRleHRFZGl0b3IsIHNjaGVtYVR5cGVzLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVPbkZvY3VzID0gdXNlQ2FsbGJhY2soKGV2ZW50XzEpID0+IHtcbiAgICBpZiAob25Gb2N1cyAmJiBvbkZvY3VzKGV2ZW50XzEpLCAhZXZlbnRfMS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgc2VsZWN0aW9uID09PSBudWxsICYmIChUcmFuc2Zvcm1zLnNlbGVjdChzbGF0ZUVkaXRvciwgRWRpdG9yLnN0YXJ0KHNsYXRlRWRpdG9yLCBbXSkpLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiZm9jdXNlZFwiLFxuICAgICAgICBldmVudDogZXZlbnRfMVxuICAgICAgfSk7XG4gICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBQb3J0YWJsZVRleHRFZGl0b3IuZ2V0U2VsZWN0aW9uKHBvcnRhYmxlVGV4dEVkaXRvcik7XG4gICAgICBzZWxlY3Rpb24gPT09IG5ld1NlbGVjdGlvbiAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgc2VsZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlZGl0b3JBY3Rvciwgb25Gb2N1cywgcG9ydGFibGVUZXh0RWRpdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChldmVudF8yKSA9PiB7XG4gICAgb25DbGljayAmJiBvbkNsaWNrKGV2ZW50XzIpO1xuICAgIGNvbnN0IGZvY3VzQmxvY2tQYXRoID0gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uID8gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkgOiB2b2lkIDAsIGZvY3VzQmxvY2sgPSBmb2N1c0Jsb2NrUGF0aCA/IE5vZGUuZGVzY2VuZGFudChzbGF0ZUVkaXRvciwgZm9jdXNCbG9ja1BhdGgpIDogdm9pZCAwLCBbXywgbGFzdE5vZGVQYXRoXSA9IE5vZGUubGFzdChzbGF0ZUVkaXRvciwgW10pLCBsYXN0QmxvY2tQYXRoID0gbGFzdE5vZGVQYXRoLnNsaWNlKDAsIDEpLCBsYXN0Tm9kZUZvY3VzZWQgPSBmb2N1c0Jsb2NrUGF0aCA/IFBhdGguZXF1YWxzKGxhc3RCbG9ja1BhdGgsIGZvY3VzQmxvY2tQYXRoKSA6ICExLCBsYXN0QmxvY2tJc1ZvaWQgPSBmb2N1c0Jsb2NrID8gIXNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKGZvY3VzQmxvY2spIDogITE7XG4gICAgc2xhdGVFZGl0b3Iuc2VsZWN0aW9uICYmIFJhbmdlLmlzQ29sbGFwc2VkKHNsYXRlRWRpdG9yLnNlbGVjdGlvbikgJiYgbGFzdE5vZGVGb2N1c2VkICYmIGxhc3RCbG9ja0lzVm9pZCAmJiAoVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgc2xhdGVFZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgfSkpLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKTtcbiAgfSwgW29uQ2xpY2ssIHNsYXRlRWRpdG9yXSksIGhhbmRsZU9uQmx1ciA9IHVzZUNhbGxiYWNrKChldmVudF8zKSA9PiB7XG4gICAgb25CbHVyICYmIG9uQmx1cihldmVudF8zKSwgZXZlbnRfMy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpIHx8IGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJibHVycmVkXCIsXG4gICAgICBldmVudDogZXZlbnRfM1xuICAgIH0pO1xuICB9LCBbZWRpdG9yQWN0b3IsIG9uQmx1cl0pLCBoYW5kbGVPbkJlZm9yZUlucHV0ID0gdXNlQ2FsbGJhY2soKGV2ZW50XzQpID0+IHtcbiAgICBvbkJlZm9yZUlucHV0ICYmIG9uQmVmb3JlSW5wdXQoZXZlbnRfNCk7XG4gIH0sIFtvbkJlZm9yZUlucHV0XSksIHZhbGlkYXRlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghc2xhdGVFZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJvb3QgPSBSZWFjdEVkaXRvci5maW5kRG9jdW1lbnRPclNoYWRvd1Jvb3Qoc2xhdGVFZGl0b3IpLCB7XG4gICAgICBhY3RpdmVFbGVtZW50XG4gICAgfSA9IHJvb3Q7XG4gICAgaWYgKHJlZi5jdXJyZW50ICE9PSBhY3RpdmVFbGVtZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbVNlbGVjdGlvbiA9IFJlYWN0RWRpdG9yLmdldFdpbmRvdyhzbGF0ZUVkaXRvcikuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFkb21TZWxlY3Rpb24gfHwgZG9tU2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZXhpc3RpbmdET01SYW5nZSA9IGRvbVNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuZXdET01SYW5nZSA9IFJlYWN0RWRpdG9yLnRvRE9NUmFuZ2Uoc2xhdGVFZGl0b3IsIHNsYXRlRWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAobmV3RE9NUmFuZ2Uuc3RhcnRPZmZzZXQgIT09IGV4aXN0aW5nRE9NUmFuZ2Uuc3RhcnRPZmZzZXQgfHwgbmV3RE9NUmFuZ2UuZW5kT2Zmc2V0ICE9PSBleGlzdGluZ0RPTVJhbmdlLmVuZE9mZnNldCkgJiYgKGRlYnVnKFwiRE9NIHJhbmdlIG91dCBvZiBzeW5jLCB2YWxpZGF0aW5nIHNlbGVjdGlvblwiKSwgZG9tU2VsZWN0aW9uPy5yZW1vdmVBbGxSYW5nZXMoKSwgZG9tU2VsZWN0aW9uLmFkZFJhbmdlKG5ld0RPTVJhbmdlKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBkZWJ1ZyhcIkNvdWxkIG5vdCByZXNvbHZlIHNlbGVjdGlvbiwgc2VsZWN0aW5nIHRvcCBkb2N1bWVudFwiKSwgVHJhbnNmb3Jtcy5kZXNlbGVjdChzbGF0ZUVkaXRvciksIHNsYXRlRWRpdG9yLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIFswLCAwXSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9LCBbcmVmLCBzbGF0ZUVkaXRvcl0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlZGl0YWJsZUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IG11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih2YWxpZGF0ZVNlbGVjdGlvbik7XG4gICAgICByZXR1cm4gbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGVkaXRhYmxlRWxlbWVudCwge1xuICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogITEsXG4gICAgICAgIGF0dHJpYnV0ZXM6ICExLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiAhMSxcbiAgICAgICAgY2hpbGRMaXN0OiAhMCxcbiAgICAgICAgc3VidHJlZTogITBcbiAgICAgIH0pLCAoKSA9PiB7XG4gICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFt2YWxpZGF0ZVNlbGVjdGlvbiwgZWRpdGFibGVFbGVtZW50XSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjaygoZXZlbnRfNSkgPT4ge1xuICAgIHByb3BzLm9uS2V5RG93biAmJiBwcm9wcy5vbktleURvd24oZXZlbnRfNSksIGV2ZW50XzUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgc2xhdGVFZGl0b3IucHRlV2l0aEhvdEtleXMoZXZlbnRfNSksIGV2ZW50XzUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwia2V5LmRvd25cIixcbiAgICAgICAga2V5Ym9hcmRFdmVudDoge1xuICAgICAgICAgIGtleTogZXZlbnRfNS5rZXksXG4gICAgICAgICAgY29kZTogZXZlbnRfNS5jb2RlLFxuICAgICAgICAgIGFsdEtleTogZXZlbnRfNS5hbHRLZXksXG4gICAgICAgICAgY3RybEtleTogZXZlbnRfNS5jdHJsS2V5LFxuICAgICAgICAgIG1ldGFLZXk6IGV2ZW50XzUubWV0YUtleSxcbiAgICAgICAgICBzaGlmdEtleTogZXZlbnRfNS5zaGlmdEtleVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZWRpdG9yOiBzbGF0ZUVkaXRvcixcbiAgICAgIG5hdGl2ZUV2ZW50OiBldmVudF81XG4gICAgfSk7XG4gIH0sIFtwcm9wcywgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soKGV2ZW50XzYpID0+IHtcbiAgICBwcm9wcy5vbktleVVwICYmIHByb3BzLm9uS2V5VXAoZXZlbnRfNiksIGV2ZW50XzYuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwia2V5LnVwXCIsXG4gICAgICAgIGtleWJvYXJkRXZlbnQ6IHtcbiAgICAgICAgICBrZXk6IGV2ZW50XzYua2V5LFxuICAgICAgICAgIGNvZGU6IGV2ZW50XzYuY29kZSxcbiAgICAgICAgICBhbHRLZXk6IGV2ZW50XzYuYWx0S2V5LFxuICAgICAgICAgIGN0cmxLZXk6IGV2ZW50XzYuY3RybEtleSxcbiAgICAgICAgICBtZXRhS2V5OiBldmVudF82Lm1ldGFLZXksXG4gICAgICAgICAgc2hpZnRLZXk6IGV2ZW50XzYuc2hpZnRLZXlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICBuYXRpdmVFdmVudDogZXZlbnRfNlxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld1RvU2xhdGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiBzY3JvbGxTZWxlY3Rpb25JbnRvVmlldyA9PT0gbnVsbCA/IG5vb3AgOiAoX2VkaXRvciwgZG9tUmFuZ2UpID0+IHtcbiAgICAgICAgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcocG9ydGFibGVUZXh0RWRpdG9yLCBkb21SYW5nZSk7XG4gICAgICB9O1xuICB9LCBbcG9ydGFibGVUZXh0RWRpdG9yLCBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld10pLCBkZWNvcmF0ZSA9IHVzZUNhbGxiYWNrKChbLCBwYXRoXzBdKSA9PiB7XG4gICAgaWYgKGlzRXF1YWxUb0VtcHR5RWRpdG9yKHNsYXRlRWRpdG9yLmNoaWxkcmVuLCBzY2hlbWFUeXBlcykpXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICEwXG4gICAgICB9XTtcbiAgICBpZiAocGF0aF8wLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCByZXN1bHRfMSA9IHJhbmdlRGVjb3JhdGlvblN0YXRlLmZpbHRlcigoaXRlbSkgPT4gUmFuZ2UuaXNDb2xsYXBzZWQoaXRlbSkgPyBwYXRoXzAubGVuZ3RoICE9PSAyID8gITEgOiBQYXRoLmVxdWFscyhpdGVtLmZvY3VzLnBhdGgsIHBhdGhfMCkgJiYgUGF0aC5lcXVhbHMoaXRlbS5hbmNob3IucGF0aCwgcGF0aF8wKSA6IFJhbmdlLmludGVyc2VjdGlvbihpdGVtLCB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogcGF0aF8wLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBwYXRoXzAsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0pIHx8IFJhbmdlLmluY2x1ZGVzKGl0ZW0sIHBhdGhfMCkpO1xuICAgIHJldHVybiByZXN1bHRfMS5sZW5ndGggPiAwID8gcmVzdWx0XzEgOiBbXTtcbiAgfSwgW3NsYXRlRWRpdG9yLCBzY2hlbWFUeXBlcywgcmFuZ2VEZWNvcmF0aW9uU3RhdGVdKTtcbiAgcmV0dXJuIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoc2xhdGVFZGl0b3IsIHNsYXRlRWRpdG9yKSwgc2V0RWRpdGFibGVFbGVtZW50KHJlZi5jdXJyZW50KTtcbiAgfSwgW3NsYXRlRWRpdG9yLCByZWZdKSwgcG9ydGFibGVUZXh0RWRpdG9yID8gaGFzSW52YWxpZFZhbHVlID8gbnVsbCA6IC8qIEBfX1BVUkVfXyAqLyBqc3goXG4gICAgRWRpdGFibGUsXG4gICAge1xuICAgICAgLi4ucmVzdFByb3BzLFxuICAgICAgYXV0b0ZvY3VzOiAhMSxcbiAgICAgIGNsYXNzTmFtZTogcmVzdFByb3BzLmNsYXNzTmFtZSB8fCBcInB0LWVkaXRhYmxlXCIsXG4gICAgICBkZWNvcmF0ZSxcbiAgICAgIG9uQmx1cjogaGFuZGxlT25CbHVyLFxuICAgICAgb25Db3B5OiBoYW5kbGVDb3B5LFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICBvbkRPTUJlZm9yZUlucHV0OiBoYW5kbGVPbkJlZm9yZUlucHV0LFxuICAgICAgb25Gb2N1czogaGFuZGxlT25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgICAgb25QYXN0ZTogaGFuZGxlUGFzdGUsXG4gICAgICByZWFkT25seSxcbiAgICAgIHJlbmRlclBsYWNlaG9sZGVyOiB2b2lkIDAsXG4gICAgICByZW5kZXJFbGVtZW50LFxuICAgICAgcmVuZGVyTGVhZixcbiAgICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3OiBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld1RvU2xhdGVcbiAgICB9XG4gICkgOiBudWxsO1xufSk7XG5Qb3J0YWJsZVRleHRFZGl0YWJsZS5kaXNwbGF5TmFtZSA9IFwiRm9yd2FyZFJlZihQb3J0YWJsZVRleHRFZGl0YWJsZSlcIjtcbmNvbnN0IEVkaXRvckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5mdW5jdGlvbiBFZGl0b3JQcm92aWRlcihwcm9wcykge1xuICBjb25zdCAkID0gYygyOCksIGVkaXRvciA9IHVzZUNyZWF0ZUVkaXRvcihwcm9wcy5pbml0aWFsQ29uZmlnKSwgZWRpdG9yQWN0b3IgPSBlZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvciA9IGVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3I7XG4gIGxldCB0MCwgdDE7XG4gICRbMF0gIT09IGVkaXRvciA/ICh0MSA9IG5ldyBQb3J0YWJsZVRleHRFZGl0b3Ioe1xuICAgIGVkaXRvclxuICB9KSwgJFswXSA9IGVkaXRvciwgJFsxXSA9IHQxKSA6IHQxID0gJFsxXSwgdDAgPSB0MTtcbiAgY29uc3QgcG9ydGFibGVUZXh0RWRpdG9yID0gdDA7XG4gIGxldCB0MjtcbiAgJFsyXSAhPT0gcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQgPyAodDIgPSAoY2hhbmdlKSA9PiB7XG4gICAgcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQubmV4dChjaGFuZ2UpO1xuICB9LCAkWzJdID0gcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQsICRbM10gPSB0MikgOiB0MiA9ICRbM107XG4gIGxldCB0MztcbiAgJFs0XSAhPT0gZWRpdG9yQWN0b3IgfHwgJFs1XSAhPT0gdDIgPyAodDMgPSAvKiBAX19QVVJFX18gKi8ganN4KFJvdXRlRXZlbnRzVG9DaGFuZ2VzLCB7IGVkaXRvckFjdG9yLCBvbkNoYW5nZTogdDIgfSksICRbNF0gPSBlZGl0b3JBY3RvciwgJFs1XSA9IHQyLCAkWzZdID0gdDMpIDogdDMgPSAkWzZdO1xuICBsZXQgdDQ7XG4gICRbN10gIT09IGVkaXRvckFjdG9yIHx8ICRbOF0gIT09IHNsYXRlRWRpdG9yLmluc3RhbmNlID8gKHQ0ID0gLyogQF9fUFVSRV9fICovIGpzeChTeW5jaHJvbml6ZXIsIHsgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yOiBzbGF0ZUVkaXRvci5pbnN0YW5jZSB9KSwgJFs3XSA9IGVkaXRvckFjdG9yLCAkWzhdID0gc2xhdGVFZGl0b3IuaW5zdGFuY2UsICRbOV0gPSB0NCkgOiB0NCA9ICRbOV07XG4gIGxldCB0NTtcbiAgJFsxMF0gIT09IGVkaXRvckFjdG9yIHx8ICRbMTFdICE9PSBwcm9wcy5jaGlsZHJlbiA/ICh0NSA9IC8qIEBfX1BVUkVfXyAqLyBqc3goUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uUHJvdmlkZXIsIHsgZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFsxMF0gPSBlZGl0b3JBY3RvciwgJFsxMV0gPSBwcm9wcy5jaGlsZHJlbiwgJFsxMl0gPSB0NSkgOiB0NSA9ICRbMTJdO1xuICBsZXQgdDY7XG4gICRbMTNdICE9PSBwb3J0YWJsZVRleHRFZGl0b3IgfHwgJFsxNF0gIT09IHQ1ID8gKHQ2ID0gLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBwb3J0YWJsZVRleHRFZGl0b3IsIGNoaWxkcmVuOiB0NSB9KSwgJFsxM10gPSBwb3J0YWJsZVRleHRFZGl0b3IsICRbMTRdID0gdDUsICRbMTVdID0gdDYpIDogdDYgPSAkWzE1XTtcbiAgbGV0IHQ3O1xuICAkWzE2XSAhPT0gc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlIHx8ICRbMTddICE9PSBzbGF0ZUVkaXRvci5pbnN0YW5jZSB8fCAkWzE4XSAhPT0gdDYgPyAodDcgPSAvKiBAX19QVVJFX18gKi8ganN4KFNsYXRlLCB7IGVkaXRvcjogc2xhdGVFZGl0b3IuaW5zdGFuY2UsIGluaXRpYWxWYWx1ZTogc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCBjaGlsZHJlbjogdDYgfSksICRbMTZdID0gc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCAkWzE3XSA9IHNsYXRlRWRpdG9yLmluc3RhbmNlLCAkWzE4XSA9IHQ2LCAkWzE5XSA9IHQ3KSA6IHQ3ID0gJFsxOV07XG4gIGxldCB0ODtcbiAgJFsyMF0gIT09IGVkaXRvckFjdG9yIHx8ICRbMjFdICE9PSB0NyA/ICh0OCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goRWRpdG9yQWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBlZGl0b3JBY3RvciwgY2hpbGRyZW46IHQ3IH0pLCAkWzIwXSA9IGVkaXRvckFjdG9yLCAkWzIxXSA9IHQ3LCAkWzIyXSA9IHQ4KSA6IHQ4ID0gJFsyMl07XG4gIGxldCB0OTtcbiAgcmV0dXJuICRbMjNdICE9PSBlZGl0b3IgfHwgJFsyNF0gIT09IHQzIHx8ICRbMjVdICE9PSB0NCB8fCAkWzI2XSAhPT0gdDggPyAodDkgPSAvKiBAX19QVVJFX18gKi8ganN4cyhFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBlZGl0b3IsIGNoaWxkcmVuOiBbXG4gICAgdDMsXG4gICAgdDQsXG4gICAgdDhcbiAgXSB9KSwgJFsyM10gPSBlZGl0b3IsICRbMjRdID0gdDMsICRbMjVdID0gdDQsICRbMjZdID0gdDgsICRbMjddID0gdDkpIDogdDkgPSAkWzI3XSwgdDk7XG59XG5mdW5jdGlvbiB1c2VFZGl0b3IoKSB7XG4gIGNvbnN0IGVkaXRvciA9IFJlYWN0LnVzZUNvbnRleHQoRWRpdG9yQ29udGV4dCk7XG4gIGlmICghZWRpdG9yKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIEVkaXRvciBzZXQuIFVzZSBFZGl0b3JQcm92aWRlciB0byBzZXQgb25lLlwiKTtcbiAgcmV0dXJuIGVkaXRvcjtcbn1cbmZ1bmN0aW9uIEVkaXRvckV2ZW50TGlzdGVuZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNCksIGVkaXRvciA9IHVzZUVkaXRvcigpLCBvbiA9IHVzZUVmZmVjdEV2ZW50KHByb3BzLm9uKTtcbiAgbGV0IHQwLCB0MTtcbiAgcmV0dXJuICRbMF0gIT09IGVkaXRvciB8fCAkWzFdICE9PSBvbiA/ICh0MCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3Iub24oXCIqXCIsIG9uKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgdDEgPSBbZWRpdG9yLCBvbl0sICRbMF0gPSBlZGl0b3IsICRbMV0gPSBvbiwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5leHBvcnQge1xuICBFZGl0b3JFdmVudExpc3RlbmVyLFxuICBFZGl0b3JQcm92aWRlcixcbiAgUG9ydGFibGVUZXh0RWRpdGFibGUsXG4gIFBvcnRhYmxlVGV4dEVkaXRvcixcbiAgZGVmaW5lU2NoZW1hLFxuICBlZGl0b3JNYWNoaW5lLFxuICBkZWZhdWx0S2V5R2VuZXJhdG9yIGFzIGtleUdlbmVyYXRvcixcbiAgdXNlRWRpdG9yLFxuICB1c2VFZGl0b3JTZWxlY3RvcixcbiAgdXNlUG9ydGFibGVUZXh0RWRpdG9yLFxuICB1c2VQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(\n  Object.prototype.hasOwnProperty\n);\nfunction move(arr, from, to) {\n  const nextValue = arr.slice(), val = nextValue[from];\n  return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    } else if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"move\") {\n        if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\"))\n          throw new Error(\n            `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n              patch.value\n            )}`\n          );\n        return move(nextValue, patch.value.from, patch.value.to);\n      }\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = _apply(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction apply$2(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value))\n        throw new Error(\"Cannot set value of an object to a non-object\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"setIfMissing\")\n        return value === void 0 ? patch.value : value;\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instad got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n    ...patch,\n    path: tail\n  }), nextValue);\n}\nconst OPERATIONS$1 = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  inc(currentValue, nextValue) {\n    return currentValue + nextValue;\n  },\n  dec(currentValue, nextValue) {\n    return currentValue - nextValue;\n  }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  diffMatchPatch(currentValue, nextValue) {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  const func = OPERATIONS[patch.type];\n  if (func)\n    return func(value, patch.value);\n  throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n  return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n\n\n\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n      children\n    }),\n    bullet: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n      children\n    })\n  },\n  DefaultListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  link = ({\n    children,\n    value\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n    href: value?.href,\n    children\n  }),\n  underlineStyle = {\n    textDecoration: \"underline\"\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n      children\n    }),\n    strong: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children\n    }),\n    code: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n      children\n    }),\n    underline: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: underlineStyle,\n      children\n    }),\n    \"strike-through\": ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n      children\n    }),\n    link\n  },\n  getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n  },\n  DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: hidden,\n      children: warning\n    }) : /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      style: hidden,\n      children: warning\n    });\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: `unknown__pt__mark__${markType}`,\n    children\n  }),\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n    children\n  }),\n  DefaultUnknownList = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n    children\n  }),\n  DefaultUnknownListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  DefaultHardBreak = () => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n  defaultBlockStyles = {\n    normal: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children\n    }),\n    blockquote: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n      children\n    }),\n    h1: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n      children\n    }),\n    h2: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n      children\n    }),\n    h3: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children\n    }),\n    h4: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n      children\n    }),\n    h5: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n      children\n    }),\n    h6: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n      children\n    })\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(input) ? input : [input],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML),\n    components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]),\n    renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]),\n    rendered = nested.map((node, index) => renderNode({\n      node,\n      index,\n      isInline: !1,\n      renderNode\n    }));\n  return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: rendered\n  });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n        node,\n        index,\n        isInline\n      } = options,\n      key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      Span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderBlock(node, index, key, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }), key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n        value: node,\n        isInline,\n        index,\n        renderNode\n      },\n      Node = components.types[node._type];\n    return Node ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;